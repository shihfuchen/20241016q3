
firmware_update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005878  08005878  00006878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c8  080058c8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080058c8  080058c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058d0  080058d0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d0  080058d0  000068d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058d4  080058d4  000068d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080058d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  080058e4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080058e4  000071d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb4d  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  00016b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00018b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000952  00000000  00000000  00019750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a43  00000000  00000000  0001a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbaf  00000000  00000000  0003eae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eadf1  00000000  00000000  0004c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  001374c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013a6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005860 	.word	0x08005860

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005860 	.word	0x08005860

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fb5e 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f873 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f951 	bl	80007bc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800051a:	f000 f8bb 	bl	8000694 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f901 	bl	8000724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Fil1.IdType = FDCAN_STANDARD_ID;
 8000522:	4b31      	ldr	r3, [pc, #196]	@ (80005e8 <main+0xe0>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
  FDCAN_Fil1.FilterIndex = 0;
 8000528:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <main+0xe0>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
  FDCAN_Fil1.FilterType = FDCAN_FILTER_RANGE;
 800052e:	4b2e      	ldr	r3, [pc, #184]	@ (80005e8 <main+0xe0>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  FDCAN_Fil1.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000534:	4b2c      	ldr	r3, [pc, #176]	@ (80005e8 <main+0xe0>)
 8000536:	2201      	movs	r2, #1
 8000538:	60da      	str	r2, [r3, #12]
  FDCAN_Fil1.FilterID1 = 0x000;
 800053a:	4b2b      	ldr	r3, [pc, #172]	@ (80005e8 <main+0xe0>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  FDCAN_Fil1.FilterID2 = 0x200;
 8000540:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <main+0xe0>)
 8000542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000546:	615a      	str	r2, [r3, #20]

  TxHeader.Identifier = 0x005; //id
 8000548:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <main+0xe4>)
 800054a:	2205      	movs	r2, #5
 800054c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800054e:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <main+0xe4>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000554:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <main+0xe4>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 800055a:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <main+0xe4>)
 800055c:	220f      	movs	r2, #15
 800055e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000560:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <main+0xe4>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_FRAME_FD_NO_BRS; //FDCAN_FRAME_FD_NO_BRS; //FDCAN_BRS_ON;
 8000566:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <main+0xe4>)
 8000568:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800056c:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN; //FDCAN_FD_CAN;
 800056e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <main+0xe4>)
 8000570:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000574:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000576:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <main+0xe4>)
 8000578:	2200      	movs	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <main+0xe4>)
 800057e:	2200      	movs	r2, #0
 8000580:	621a      	str	r2, [r3, #32]

  HAL_FDCAN_ConfigFilter(&hfdcan1,&FDCAN_Fil1);
 8000582:	4919      	ldr	r1, [pc, #100]	@ (80005e8 <main+0xe0>)
 8000584:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <main+0xe8>)
 8000586:	f000 febd 	bl	8001304 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT, DISABLE, DISABLE);
 800058a:	2300      	movs	r3, #0
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	2202      	movs	r2, #2
 8000592:	2100      	movs	r1, #0
 8000594:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <main+0xe8>)
 8000596:	f000 ff0f 	bl	80013b8 <HAL_FDCAN_ConfigGlobalFilter>
//  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
//  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	4814      	ldr	r0, [pc, #80]	@ (80005f0 <main+0xe8>)
 80005a0:	f001 f91e 	bl	80017e0 <HAL_FDCAN_ActivateNotification>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <main+0xa6>
    {
      Error_Handler();
 80005aa:	f000 f9a5 	bl	80008f8 <Error_Handler>
    }
  if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 5, 0) != HAL_OK)
 80005ae:	2200      	movs	r2, #0
 80005b0:	2105      	movs	r1, #5
 80005b2:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <main+0xe8>)
 80005b4:	f000 ff31 	bl	800141a <HAL_FDCAN_ConfigTxDelayCompensation>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <main+0xba>
  {
    Error_Handler();
 80005be:	f000 f99b 	bl	80008f8 <Error_Handler>
  }
  if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 80005c2:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <main+0xe8>)
 80005c4:	f000 ff4b 	bl	800145e <HAL_FDCAN_EnableTxDelayCompensation>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <main+0xca>
  {
    Error_Handler();
 80005ce:	f000 f993 	bl	80008f8 <Error_Handler>
  }
  HAL_FDCAN_Start(&hfdcan1);
 80005d2:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <main+0xe8>)
 80005d4:	f000 ff64 	bl	80014a0 <HAL_FDCAN_Start>

  HAL_UART_Receive_IT(&huart1, RxData_66, 66);
 80005d8:	2242      	movs	r2, #66	@ 0x42
 80005da:	4906      	ldr	r1, [pc, #24]	@ (80005f4 <main+0xec>)
 80005dc:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <main+0xf0>)
 80005de:	f002 ff23 	bl	8003428 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart1, RxData, 8);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	bf00      	nop
 80005e4:	e7fd      	b.n	80005e2 <main+0xda>
 80005e6:	bf00      	nop
 80005e8:	200001b8 	.word	0x200001b8
 80005ec:	20000194 	.word	0x20000194
 80005f0:	20000028 	.word	0x20000028
 80005f4:	20000120 	.word	0x20000120
 80005f8:	2000008c 	.word	0x2000008c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2238      	movs	r2, #56	@ 0x38
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 f8fc 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800061e:	2000      	movs	r0, #0
 8000620:	f001 fdee 	bl	8002200 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2340      	movs	r3, #64	@ 0x40
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800063a:	2301      	movs	r3, #1
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800063e:	2314      	movs	r3, #20
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fe88 	bl	8002368 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065e:	f000 f94b 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f986 	bl	800298c <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000686:	f000 f937 	bl	80008f8 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <MX_FDCAN1_Init+0x88>)
 800069a:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <MX_FDCAN1_Init+0x8c>)
 800069c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV8;
 800069e:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006aa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006d2:	220f      	movs	r2, #15
 80006d4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006d8:	2204      	movs	r2, #4
 80006da:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006de:	2201      	movs	r2, #1
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006ea:	220f      	movs	r2, #15
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006f6:	220a      	movs	r2, #10
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_FDCAN1_Init+0x88>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_FDCAN1_Init+0x88>)
 8000702:	2200      	movs	r2, #0
 8000704:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_FDCAN1_Init+0x88>)
 8000708:	f000 fca2 	bl	8001050 <HAL_FDCAN_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000712:	f000 f8f1 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028
 8000720:	40006400 	.word	0x40006400

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 800072a:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <MX_USART1_UART_Init+0x94>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000730:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076c:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 800076e:	f002 fd77 	bl	8003260 <HAL_UART_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f8be 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000780:	f004 ff77 	bl	8005672 <HAL_UARTEx_SetTxFifoThreshold>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800078a:	f000 f8b5 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4808      	ldr	r0, [pc, #32]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 8000792:	f004 ffac 	bl	80056ee <HAL_UARTEx_SetRxFifoThreshold>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f8ac 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_USART1_UART_Init+0x90>)
 80007a2:	f004 ff2d 	bl	8005600 <HAL_UARTEx_DisableFifoMode>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f8a4 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	40013800 	.word	0x40013800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_GPIO_Init+0x78>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <MX_GPIO_Init+0x78>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_GPIO_Init+0x78>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_GPIO_Init+0x78>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <MX_GPIO_Init+0x78>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_GPIO_Init+0x78>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2103      	movs	r1, #3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f001 fcc7 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080e:	2303      	movs	r3, #3
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f001 fb36 	bl	8001e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//有uart 跟 usart
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
		user_delaynus_tim(1);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	}
	else{*/
		TxHeader.Identifier = RxData_66[0] * 0xff + RxData_66[1];
 8000840:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <HAL_UART_RxCpltCallback+0x6c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4613      	mov	r3, r2
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	1a9b      	subs	r3, r3, r2
 800084c:	4a15      	ldr	r2, [pc, #84]	@ (80008a4 <HAL_UART_RxCpltCallback+0x6c>)
 800084e:	7852      	ldrb	r2, [r2, #1]
 8000850:	4413      	add	r3, r2
 8000852:	461a      	mov	r2, r3
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_UART_RxCpltCallback+0x70>)
 8000856:	601a      	str	r2, [r3, #0]
		uint8_t *TxData = RxData_66 + 2;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <HAL_UART_RxCpltCallback+0x74>)
 800085a:	60fb      	str	r3, [r7, #12]
		if(TxHeader.Identifier == 0x10){
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_UART_RxCpltCallback+0x70>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b10      	cmp	r3, #16
 8000862:	d107      	bne.n	8000874 <HAL_UART_RxCpltCallback+0x3c>
	        uint32_t u32TxFifoRqst = HAL_FDCAN_GetLatestTxFifoQRequestBuffer(&hfdcan1);
 8000864:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <HAL_UART_RxCpltCallback+0x78>)
 8000866:	f000 fe87 	bl	8001578 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>
 800086a:	60b8      	str	r0, [r7, #8]
	        HAL_FDCAN_AbortTxRequest(&hfdcan1, u32TxFifoRqst);
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <HAL_UART_RxCpltCallback+0x78>)
 8000870:	f000 fe8e 	bl	8001590 <HAL_FDCAN_AbortTxRequest>
	        //errorflag = 1;
		}
/*		if(TxHeader.Identifier == 0x111){
			TxData[0]=1;
		}*/
	    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	490c      	ldr	r1, [pc, #48]	@ (80008a8 <HAL_UART_RxCpltCallback+0x70>)
 8000878:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <HAL_UART_RxCpltCallback+0x78>)
 800087a:	f000 fe39 	bl	80014f0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_UART_RxCpltCallback+0x50>
	    {
	      Error_Handler();
 8000884:	f000 f838 	bl	80008f8 <Error_Handler>
	    }
	//}
    HAL_UART_Receive_IT(&huart1, RxData_66, 66);
 8000888:	2242      	movs	r2, #66	@ 0x42
 800088a:	4906      	ldr	r1, [pc, #24]	@ (80008a4 <HAL_UART_RxCpltCallback+0x6c>)
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 800088e:	f002 fdcb 	bl	8003428 <HAL_UART_Receive_IT>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000892:	2101      	movs	r1, #1
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f001 fc98 	bl	80021cc <HAL_GPIO_TogglePin>
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	//HAL_UART_Receive_IT(&huart1, RxData, 8); //test
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000120 	.word	0x20000120
 80008a8:	20000194 	.word	0x20000194
 80008ac:	20000122 	.word	0x20000122
 80008b0:	20000028 	.word	0x20000028
 80008b4:	2000008c 	.word	0x2000008c

080008b8 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcanRx1, uint32_t RxFifo0ITs)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]

	HAL_FDCAN_GetRxMessage(hfdcanRx1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <HAL_FDCAN_RxFifo0Callback+0x34>)
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80008c6:	2140      	movs	r1, #64	@ 0x40
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 fe81 	bl	80015d0 <HAL_FDCAN_GetRxMessage>
	HAL_UART_Transmit_IT(&huart1, RxData, 8);
 80008ce:	2208      	movs	r2, #8
 80008d0:	4906      	ldr	r1, [pc, #24]	@ (80008ec <HAL_FDCAN_RxFifo0Callback+0x34>)
 80008d2:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80008d4:	f002 fd14 	bl	8003300 <HAL_UART_Transmit_IT>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008d8:	2102      	movs	r1, #2
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f001 fc75 	bl	80021cc <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000164 	.word	0x20000164
 80008f0:	2000016c 	.word	0x2000016c
 80008f4:	2000008c 	.word	0x2000008c

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_MspInit+0x44>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090e:	4a0e      	ldr	r2, [pc, #56]	@ (8000948 <HAL_MspInit+0x44>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6613      	str	r3, [r2, #96]	@ 0x60
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x44>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6593      	str	r3, [r2, #88]	@ 0x58
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800093a:	f001 fd05 	bl	8002348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b09e      	sub	sp, #120	@ 0x78
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	2254      	movs	r2, #84	@ 0x54
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f004 ff4b 	bl	8005808 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a24      	ldr	r2, [pc, #144]	@ (8000a08 <HAL_FDCAN_MspInit+0xbc>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d141      	bne.n	8000a00 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800097c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000980:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000986:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fa19 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000998:	f7ff ffae 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_FDCAN_MspInit+0xc0>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <HAL_FDCAN_MspInit+0xc0>)
 80009a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_FDCAN_MspInit+0xc0>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_FDCAN_MspInit+0xc0>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_FDCAN_MspInit+0xc0>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_FDCAN_MspInit+0xc0>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009de:	2309      	movs	r3, #9
 80009e0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f001 fa54 	bl	8001e98 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2015      	movs	r0, #21
 80009f6:	f000 fa36 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009fa:	2015      	movs	r0, #21
 80009fc:	f000 fa4d 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3778      	adds	r7, #120	@ 0x78
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40006400 	.word	0x40006400
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09e      	sub	sp, #120	@ 0x78
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2254      	movs	r2, #84	@ 0x54
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fee9 	bl	8005808 <memset>
  if(huart->Instance==USART1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <HAL_UART_MspInit+0xb4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d13d      	bne.n	8000abc <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f9b9 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff ff4e 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a60:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a66:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a8c:	2330      	movs	r3, #48	@ 0x30
 8000a8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4809      	ldr	r0, [pc, #36]	@ (8000acc <HAL_UART_MspInit+0xbc>)
 8000aa8:	f001 f9f6 	bl	8001e98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2025      	movs	r0, #37	@ 0x25
 8000ab2:	f000 f9d8 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab6:	2025      	movs	r0, #37	@ 0x25
 8000ab8:	f000 f9ef 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3778      	adds	r7, #120	@ 0x78
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f8a5 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <FDCAN1_IT0_IRQHandler+0x10>)
 8000b36:	f000 ff39 	bl	80019ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000028 	.word	0x20000028

08000b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <USART1_IRQHandler+0x10>)
 8000b4a:	f002 fcb9 	bl	80034c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000008c 	.word	0x2000008c

08000b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f004 fe35 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fcab 	bl	8000508 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc0:	080058d8 	.word	0x080058d8
  ldr r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc8:	200001d4 	.word	0x200001d4

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>

08000bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f939 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f80e 	bl	8000c00 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff fe88 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]

}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d022      	beq.n	8000c5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_InitTick+0x6c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f944 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10f      	bne.n	8000c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	d809      	bhi.n	8000c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c42:	f000 f910 	bl	8000e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_InitTick+0x70>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e007      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e004      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e001      	b.n	8000c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a03      	ldr	r2, [pc, #12]	@ (8000c90 <HAL_IncTick+0x1c>)
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	200001d0 	.word	0x200001d0
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200001d0 	.word	0x200001d0

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	@ (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	@ (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	@ 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	@ 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff29 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff40 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff90 	bl	8000da4 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5f 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff33 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa4 	bl	8000e0c <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d005      	beq.n	8000ef2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2204      	movs	r2, #4
 8000eea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e037      	b.n	8000f62 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 020e 	bic.w	r2, r2, #14
 8000f00:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f10:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f003 021f 	and.w	r2, r3, #31
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f3e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00c      	beq.n	8000f62 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f56:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f60:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e047      	b.n	8001044 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 020e 	bic.w	r2, r2, #14
 8000fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001000:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00c      	beq.n	8001024 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001018:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001022:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	4798      	blx	r3
    }
  }
  return status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e147      	b.n	80012f2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d106      	bne.n	800107c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fc68 	bl	800094c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0210 	bic.w	r2, r2, #16
 800108a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800108c:	f7ff fe04 	bl	8000c98 <HAL_GetTick>
 8001090:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001092:	e012      	b.n	80010ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001094:	f7ff fe00 	bl	8000c98 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	d90b      	bls.n	80010ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e11b      	b.n	80012f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d0e5      	beq.n	8001094 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d8:	f7ff fdde 	bl	8000c98 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010de:	e012      	b.n	8001106 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010e0:	f7ff fdda 	bl	8000c98 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d90b      	bls.n	8001106 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f2:	f043 0201 	orr.w	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e0f5      	b.n	80012f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0e5      	beq.n	80010e0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0202 	orr.w	r2, r2, #2
 8001122:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a74      	ldr	r2, [pc, #464]	@ (80012fc <HAL_FDCAN_Init+0x2ac>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d103      	bne.n	8001136 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800112e:	4a74      	ldr	r2, [pc, #464]	@ (8001300 <HAL_FDCAN_Init+0x2b0>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7c1b      	ldrb	r3, [r3, #16]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	e007      	b.n	8001160 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800115e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7c5b      	ldrb	r3, [r3, #17]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	e007      	b.n	800118a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001188:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7c9b      	ldrb	r3, [r3, #18]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699a      	ldr	r2, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011a0:	619a      	str	r2, [r3, #24]
 80011a2:	e007      	b.n	80011b4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011b2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80011d8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0210 	bic.w	r2, r2, #16
 80011e8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699a      	ldr	r2, [r3, #24]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0204 	orr.w	r2, r2, #4
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	e02c      	b.n	800125e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d028      	beq.n	800125e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d01c      	beq.n	800124e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001222:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0210 	orr.w	r2, r2, #16
 8001232:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b03      	cmp	r3, #3
 800123a:	d110      	bne.n	800125e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0220 	orr.w	r2, r2, #32
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	e007      	b.n	800125e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 0220 	orr.w	r2, r2, #32
 800125c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	3b01      	subs	r3, #1
 8001264:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	3b01      	subs	r3, #1
 800126c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800126e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001276:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	3b01      	subs	r3, #1
 8001280:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001286:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001288:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001292:	d115      	bne.n	80012c0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001298:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	3b01      	subs	r3, #1
 80012a0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012a2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	3b01      	subs	r3, #1
 80012aa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012ac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	3b01      	subs	r3, #1
 80012b6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012bc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012be:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fcf6 	bl	8001cc8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40006400 	.word	0x40006400
 8001300:	40006500 	.word	0x40006500

08001304 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001314:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d002      	beq.n	8001322 <HAL_FDCAN_ConfigFilter+0x1e>
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d13d      	bne.n	800139e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d119      	bne.n	800135e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001336:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800133e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e01d      	b.n	800139a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	075a      	lsls	r2, r3, #29
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	079a      	lsls	r2, r3, #30
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	4313      	orrs	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3304      	adds	r3, #4
 8001392:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e006      	b.n	80013ac <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	f043 0202 	orr.w	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
  }
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d116      	bne.n	8001400 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013da:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	011a      	lsls	r2, r3, #4
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	431a      	orrs	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e006      	b.n	800140e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001404:	f043 0204 	orr.w	r2, r3, #4
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d108      	bne.n	8001444 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	0219      	lsls	r1, r3, #8
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	430a      	orrs	r2, r1
 800143e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	e006      	b.n	8001452 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001448:	f043 0204 	orr.w	r2, r3, #4
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d109      	bne.n	8001486 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001480:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e006      	b.n	8001494 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	f043 0204 	orr.w	r2, r3, #4
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
  }
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d110      	bne.n	80014d6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e006      	b.n	80014e4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	f043 0204 	orr.w	r2, r3, #4
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d12c      	bne.n	8001562 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e023      	b.n	8001570 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fc2e 	bl	8001da0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	fa01 f202 	lsl.w	r2, r1, r2
 8001550:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001554:	2201      	movs	r2, #1
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	409a      	lsls	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e006      	b.n	8001570 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001566:	f043 0208 	orr.w	r2, r3, #8
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
  }
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>:
  * @retval Tx buffer index of last Tx FIFO/Queue request
  *          - Any value of @arg FDCAN_Tx_location if Tx request has been submitted.
  *          - 0 if no Tx FIFO/Queue request have been submitted.
  */
uint32_t HAL_FDCAN_GetLatestTxFifoQRequestBuffer(const FDCAN_HandleTypeDef *hfdcan)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Return Last Tx FIFO/Queue Request Buffer */
  return hfdcan->LatestTxFifoQRequest;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_FDCAN_AbortTxRequest>:
  * @param  BufferIndex buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AbortTxRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndex));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d106      	bne.n	80015b4 <HAL_FDCAN_AbortTxRequest+0x24>
  {
    /* Add cancellation request */
    hfdcan->Instance->TXBCR = BufferIndex;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    /* Return function status */
    return HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e006      	b.n	80015c2 <HAL_FDCAN_AbortTxRequest+0x32>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b8:	f043 0208 	orr.w	r2, r3, #8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
  }
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	@ 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015e8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80015ea:	7efb      	ldrb	r3, [r7, #27]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	f040 80e8 	bne.w	80017c2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b40      	cmp	r3, #64	@ 0x40
 80015f6:	d137      	bne.n	8001668 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0db      	b.n	80017d0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001620:	0e1b      	lsrs	r3, r3, #24
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10a      	bne.n	8001640 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001632:	0a5b      	lsrs	r3, r3, #9
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
 8001666:	e036      	b.n	80016d6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0a3      	b.n	80017d0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001690:	0e1b      	lsrs	r3, r3, #24
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d10a      	bne.n	80016b0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e005      	b.n	8001706 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	3304      	adds	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0c1b      	lsrs	r3, r3, #16
 8001734:	f003 020f 	and.w	r2, r3, #15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0e1b      	lsrs	r3, r3, #24
 800175a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0fda      	lsrs	r2, r3, #31
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	3304      	adds	r3, #4
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
 800177a:	e00a      	b.n	8001792 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	441a      	add	r2, r3
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	440b      	add	r3, r1
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	3301      	adds	r3, #1
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <HAL_FDCAN_GetRxMessage+0x20c>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	461a      	mov	r2, r3
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d3ec      	bcc.n	800177c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b40      	cmp	r3, #64	@ 0x40
 80017a6:	d105      	bne.n	80017b4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80017b2:	e004      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e006      	b.n	80017d0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c6:	f043 0208 	orr.w	r2, r3, #8
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
  }
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	372c      	adds	r7, #44	@ 0x2c
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	08005890 	.word	0x08005890

080017e0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017f2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d003      	beq.n	8001802 <HAL_FDCAN_ActivateNotification+0x22>
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 80c8 	bne.w	8001992 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d03b      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d031      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d027      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d01d      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d013      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d13b      	bne.n	8001932 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d131      	bne.n	8001932 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d127      	bne.n	8001932 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11d      	bne.n	8001932 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d113      	bne.n	8001932 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0202 	orr.w	r2, r2, #2
 8001940:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001948:	2b00      	cmp	r3, #0
 800194a:	d009      	beq.n	8001960 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	430a      	orrs	r2, r1
 800195c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	430a      	orrs	r2, r1
 800197a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	430a      	orrs	r2, r1
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e006      	b.n	80019a0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	@ 0x30
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c8:	4013      	ands	r3, r2
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019e0:	4013      	ands	r3, r2
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f8:	4013      	ands	r3, r2
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a02:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001a06:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0e:	6a3a      	ldr	r2, [r7, #32]
 8001a10:	4013      	ands	r3, r2
 8001a12:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a1e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a32:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2240      	movs	r2, #64	@ 0x40
 8001a56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f916 	bl	8001c8a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d019      	beq.n	8001a9c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d014      	beq.n	8001a9c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a7a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a94:	6939      	ldr	r1, [r7, #16]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8d8 	bl	8001c4c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f8a2 	bl	8001bf6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001abe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fef8 	bl	80008b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001ad6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f897 	bl	8001c0c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00c      	beq.n	8001b02 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001afa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f890 	bl	8001c22 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d018      	beq.n	8001b3e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d013      	beq.n	8001b3e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b1e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f87c 	bl	8001c36 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00c      	beq.n	8001b62 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f880 	bl	8001c62 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00c      	beq.n	8001b86 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b7e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f878 	bl	8001c76 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00f      	beq.n	8001bb0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00a      	beq.n	8001bb0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ba2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001bbe:	69f9      	ldr	r1, [r7, #28]
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f876 	bl	8001cb2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f858 	bl	8001c9e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3730      	adds	r7, #48	@ 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001cd0:	4b30      	ldr	r3, [pc, #192]	@ (8001d94 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001cd2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d103      	bne.n	8001ce6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001ce4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2c      	ldr	r2, [pc, #176]	@ (8001d9c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d103      	bne.n	8001cf8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001cf6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d06:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0e:	041a      	lsls	r2, r3, #16
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d2c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d34:	061a      	lsls	r2, r3, #24
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e005      	b.n	8001d7a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3304      	adds	r3, #4
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d3f3      	bcc.n	8001d6e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	4000a400 	.word	0x4000a400
 8001d98:	40006800 	.word	0x40006800
 8001d9c:	40006c00 	.word	0x40006c00

08001da0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10a      	bne.n	8001dcc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001dbe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e00a      	b.n	8001de2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001dd4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001dda:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ddc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001de0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001df2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001df8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e020      	b.n	8001e76 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3303      	adds	r3, #3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3302      	adds	r3, #2
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	440b      	add	r3, r1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e4c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	440b      	add	r3, r1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e5a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	440a      	add	r2, r1
 8001e62:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e64:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3304      	adds	r3, #4
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <FDCAN_CopyMessageToRAM+0xf4>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d3d6      	bcc.n	8001e34 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3724      	adds	r7, #36	@ 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	08005890 	.word	0x08005890

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ea6:	e15a      	b.n	800215e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 814c 	beq.w	8002158 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d005      	beq.n	8001ed8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d130      	bne.n	8001f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f0e:	2201      	movs	r2, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	f003 0201 	and.w	r2, r3, #1
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d017      	beq.n	8001f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d123      	bne.n	8001fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0203 	and.w	r2, r3, #3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80a6 	beq.w	8002158 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200c:	4b5b      	ldr	r3, [pc, #364]	@ (800217c <HAL_GPIO_Init+0x2e4>)
 800200e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002010:	4a5a      	ldr	r2, [pc, #360]	@ (800217c <HAL_GPIO_Init+0x2e4>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6613      	str	r3, [r2, #96]	@ 0x60
 8002018:	4b58      	ldr	r3, [pc, #352]	@ (800217c <HAL_GPIO_Init+0x2e4>)
 800201a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002024:	4a56      	ldr	r2, [pc, #344]	@ (8002180 <HAL_GPIO_Init+0x2e8>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800204e:	d01f      	beq.n	8002090 <HAL_GPIO_Init+0x1f8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a4c      	ldr	r2, [pc, #304]	@ (8002184 <HAL_GPIO_Init+0x2ec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d019      	beq.n	800208c <HAL_GPIO_Init+0x1f4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a4b      	ldr	r2, [pc, #300]	@ (8002188 <HAL_GPIO_Init+0x2f0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_GPIO_Init+0x1f0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4a      	ldr	r2, [pc, #296]	@ (800218c <HAL_GPIO_Init+0x2f4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00d      	beq.n	8002084 <HAL_GPIO_Init+0x1ec>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a49      	ldr	r2, [pc, #292]	@ (8002190 <HAL_GPIO_Init+0x2f8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x1e8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a48      	ldr	r2, [pc, #288]	@ (8002194 <HAL_GPIO_Init+0x2fc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_GPIO_Init+0x1e4>
 8002078:	2305      	movs	r3, #5
 800207a:	e00a      	b.n	8002092 <HAL_GPIO_Init+0x1fa>
 800207c:	2306      	movs	r3, #6
 800207e:	e008      	b.n	8002092 <HAL_GPIO_Init+0x1fa>
 8002080:	2304      	movs	r3, #4
 8002082:	e006      	b.n	8002092 <HAL_GPIO_Init+0x1fa>
 8002084:	2303      	movs	r3, #3
 8002086:	e004      	b.n	8002092 <HAL_GPIO_Init+0x1fa>
 8002088:	2302      	movs	r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x1fa>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_GPIO_Init+0x1fa>
 8002090:	2300      	movs	r3, #0
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	f002 0203 	and.w	r2, r2, #3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4093      	lsls	r3, r2
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a2:	4937      	ldr	r1, [pc, #220]	@ (8002180 <HAL_GPIO_Init+0x2e8>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b0:	4b39      	ldr	r3, [pc, #228]	@ (8002198 <HAL_GPIO_Init+0x300>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d4:	4a30      	ldr	r2, [pc, #192]	@ (8002198 <HAL_GPIO_Init+0x300>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020da:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <HAL_GPIO_Init+0x300>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020fe:	4a26      	ldr	r2, [pc, #152]	@ (8002198 <HAL_GPIO_Init+0x300>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002104:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_GPIO_Init+0x300>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002128:	4a1b      	ldr	r2, [pc, #108]	@ (8002198 <HAL_GPIO_Init+0x300>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800212e:	4b1a      	ldr	r3, [pc, #104]	@ (8002198 <HAL_GPIO_Init+0x300>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002152:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_GPIO_Init+0x300>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	f47f ae9d 	bne.w	8001ea8 <HAL_GPIO_Init+0x10>
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	48000400 	.word	0x48000400
 8002188:	48000800 	.word	0x48000800
 800218c:	48000c00 	.word	0x48000c00
 8002190:	48001000 	.word	0x48001000
 8002194:	48001400 	.word	0x48001400
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43d9      	mvns	r1, r3
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	400b      	ands	r3, r1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d141      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221a:	d131      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800221c:	4b47      	ldr	r3, [pc, #284]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002222:	4a46      	ldr	r2, [pc, #280]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800222c:	4b43      	ldr	r3, [pc, #268]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002234:	4a41      	ldr	r2, [pc, #260]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800223c:	4b40      	ldr	r3, [pc, #256]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2232      	movs	r2, #50	@ 0x32
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	4a3f      	ldr	r2, [pc, #252]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002252:	e002      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225a:	4b38      	ldr	r3, [pc, #224]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002266:	d102      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800226e:	4b33      	ldr	r3, [pc, #204]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227a:	d158      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e057      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002280:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002286:	4a2d      	ldr	r2, [pc, #180]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002290:	e04d      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002298:	d141      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800229a:	4b28      	ldr	r3, [pc, #160]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	d131      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a8:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ae:	4a23      	ldr	r2, [pc, #140]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b8:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022c0:	4a1e      	ldr	r2, [pc, #120]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2232      	movs	r2, #50	@ 0x32
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022de:	e002      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f2:	d102      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f2      	bne.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fa:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002306:	d112      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e011      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800231c:	e007      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800231e:	4b07      	ldr	r3, [pc, #28]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800232c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40007000 	.word	0x40007000
 8002340:	20000000 	.word	0x20000000
 8002344:	431bde83 	.word	0x431bde83

08002348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002356:	6093      	str	r3, [r2, #8]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e2fe      	b.n	8002978 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d075      	beq.n	8002472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002386:	4b97      	ldr	r3, [pc, #604]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002390:	4b94      	ldr	r3, [pc, #592]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3e>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d002      	beq.n	80023ac <HAL_RCC_OscConfig+0x44>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b8d      	ldr	r3, [pc, #564]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e2d9      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x74>
 80023ce:	4b85      	ldr	r3, [pc, #532]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a84      	ldr	r2, [pc, #528]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b7f      	ldr	r3, [pc, #508]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7e      	ldr	r2, [pc, #504]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b7c      	ldr	r3, [pc, #496]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7b      	ldr	r2, [pc, #492]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 8002400:	4b78      	ldr	r3, [pc, #480]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a77      	ldr	r2, [pc, #476]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b75      	ldr	r3, [pc, #468]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a74      	ldr	r2, [pc, #464]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fc3a 	bl	8000c98 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fc36 	bl	8000c98 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e29e      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243a:	4b6a      	ldr	r3, [pc, #424]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xc0>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fc26 	bl	8000c98 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fc22 	bl	8000c98 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e28a      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002462:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d075      	beq.n	800256a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4b59      	ldr	r3, [pc, #356]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002488:	4b56      	ldr	r3, [pc, #344]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x136>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_OscConfig+0x13c>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d11f      	bne.n	80024e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a4:	4b4f      	ldr	r3, [pc, #316]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x154>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e25d      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b49      	ldr	r3, [pc, #292]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	4946      	ldr	r1, [pc, #280]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024d0:	4b45      	ldr	r3, [pc, #276]	@ (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fb93 	bl	8000c00 <HAL_InitTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d043      	beq.n	8002568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e249      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d023      	beq.n	8002534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ec:	4b3d      	ldr	r3, [pc, #244]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3c      	ldr	r2, [pc, #240]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fbce 	bl	8000c98 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7fe fbca 	bl	8000c98 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e232      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002512:	4b34      	ldr	r3, [pc, #208]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b31      	ldr	r3, [pc, #196]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	492d      	ldr	r1, [pc, #180]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
 8002532:	e01a      	b.n	800256a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002534:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800253a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fbaa 	bl	8000c98 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fba6 	bl	8000c98 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e20e      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800255a:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1e0>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d041      	beq.n	80025fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002584:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fb83 	bl	8000c98 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002596:	f7fe fb7f 	bl	8000c98 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1e7      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a8:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ef      	beq.n	8002596 <HAL_RCC_OscConfig+0x22e>
 80025b6:	e020      	b.n	80025fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b8:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fb66 	bl	8000c98 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ce:	e00d      	b.n	80025ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe fb62 	bl	8000c98 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d906      	bls.n	80025ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1ca      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ea      	bne.n	80025d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80a6 	beq.w	8002754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800260c:	4b84      	ldr	r3, [pc, #528]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x2b4>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x2b6>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b7f      	ldr	r3, [pc, #508]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	4a7e      	ldr	r2, [pc, #504]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262c:	6593      	str	r3, [r2, #88]	@ 0x58
 800262e:	4b7c      	ldr	r3, [pc, #496]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263e:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <HAL_RCC_OscConfig+0x4bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d118      	bne.n	800267c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264a:	4b76      	ldr	r3, [pc, #472]	@ (8002824 <HAL_RCC_OscConfig+0x4bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a75      	ldr	r2, [pc, #468]	@ (8002824 <HAL_RCC_OscConfig+0x4bc>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7fe fb1f 	bl	8000c98 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7fe fb1b 	bl	8000c98 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e183      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002670:	4b6c      	ldr	r3, [pc, #432]	@ (8002824 <HAL_RCC_OscConfig+0x4bc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d108      	bne.n	8002696 <HAL_RCC_OscConfig+0x32e>
 8002684:	4b66      	ldr	r3, [pc, #408]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268a:	4a65      	ldr	r2, [pc, #404]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002694:	e024      	b.n	80026e0 <HAL_RCC_OscConfig+0x378>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d110      	bne.n	80026c0 <HAL_RCC_OscConfig+0x358>
 800269e:	4b60      	ldr	r3, [pc, #384]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_OscConfig+0x378>
 80026c0:	4b57      	ldr	r3, [pc, #348]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026d0:	4b53      	ldr	r3, [pc, #332]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d016      	beq.n	8002716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fad6 	bl	8000c98 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fad2 	bl	8000c98 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e138      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	4b46      	ldr	r3, [pc, #280]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ed      	beq.n	80026f0 <HAL_RCC_OscConfig+0x388>
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7fe fabf 	bl	8000c98 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7fe fabb 	bl	8000c98 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e121      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002734:	4b3a      	ldr	r3, [pc, #232]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ed      	bne.n	800271e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002742:	7ffb      	ldrb	r3, [r7, #31]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b35      	ldr	r3, [pc, #212]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	4a34      	ldr	r2, [pc, #208]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002752:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d03c      	beq.n	80027da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002768:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800276a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800276e:	4a2c      	ldr	r2, [pc, #176]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe fa8e 	bl	8000c98 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002780:	f7fe fa8a 	bl	8000c98 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0f2      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002792:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ef      	beq.n	8002780 <HAL_RCC_OscConfig+0x418>
 80027a0:	e01b      	b.n	80027da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe fa71 	bl	8000c98 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ba:	f7fe fa6d 	bl	8000c98 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0d5      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ef      	bne.n	80027ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80c9 	beq.w	8002976 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	f000 8083 	beq.w	80028f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d15e      	bne.n	80028b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a08      	ldr	r2, [pc, #32]	@ (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002800:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fa47 	bl	8000c98 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	e00c      	b.n	8002828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fa43 	bl	8000c98 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d905      	bls.n	8002828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0ab      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002828:	4b55      	ldr	r3, [pc, #340]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ec      	bne.n	800280e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	4b52      	ldr	r3, [pc, #328]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	4b52      	ldr	r3, [pc, #328]	@ (8002984 <HAL_RCC_OscConfig+0x61c>)
 800283a:	4013      	ands	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6a11      	ldr	r1, [r2, #32]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002844:	3a01      	subs	r2, #1
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	4311      	orrs	r1, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800284e:	0212      	lsls	r2, r2, #8
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002856:	0852      	lsrs	r2, r2, #1
 8002858:	3a01      	subs	r2, #1
 800285a:	0552      	lsls	r2, r2, #21
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002862:	0852      	lsrs	r2, r2, #1
 8002864:	3a01      	subs	r2, #1
 8002866:	0652      	lsls	r2, r2, #25
 8002868:	4311      	orrs	r1, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800286e:	06d2      	lsls	r2, r2, #27
 8002870:	430a      	orrs	r2, r1
 8002872:	4943      	ldr	r1, [pc, #268]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 8002874:	4313      	orrs	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a40      	ldr	r2, [pc, #256]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002884:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a3d      	ldr	r2, [pc, #244]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800288e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fa02 	bl	8000c98 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe f9fe 	bl	8000c98 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e066      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	4b35      	ldr	r3, [pc, #212]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x530>
 80028b6:	e05e      	b.n	8002976 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b31      	ldr	r3, [pc, #196]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a30      	ldr	r2, [pc, #192]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 80028be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe f9e8 	bl	8000c98 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe f9e4 	bl	8000c98 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04c      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028de:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028ea:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4924      	ldr	r1, [pc, #144]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <HAL_RCC_OscConfig+0x620>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60cb      	str	r3, [r1, #12]
 80028f6:	e03e      	b.n	8002976 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e039      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002904:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <HAL_RCC_OscConfig+0x618>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	429a      	cmp	r2, r3
 8002916:	d12c      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	3b01      	subs	r3, #1
 8002924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d123      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11b      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d113      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d109      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	019f800c 	.word	0x019f800c
 8002988:	feeefffc 	.word	0xfeeefffc

0800298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e11e      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b91      	ldr	r3, [pc, #580]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b8e      	ldr	r3, [pc, #568]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 020f 	bic.w	r2, r3, #15
 80029ba:	498c      	ldr	r1, [pc, #560]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b8a      	ldr	r3, [pc, #552]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e106      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d073      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d129      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e8:	4b81      	ldr	r3, [pc, #516]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0f4      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029f8:	f000 f99e 	bl	8002d38 <RCC_GetSysClockFreqFromPLLSource>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf4 <HAL_RCC_ClockConfig+0x268>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d93f      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a06:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d033      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d12f      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a26:	4b72      	ldr	r3, [pc, #456]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a2e:	4a70      	ldr	r2, [pc, #448]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e024      	b.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a44:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0c6      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a54:	4b66      	ldr	r3, [pc, #408]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0be      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a64:	f000 f8ce 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4a61      	ldr	r2, [pc, #388]	@ (8002bf4 <HAL_RCC_ClockConfig+0x268>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d909      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a72:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4957      	ldr	r1, [pc, #348]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe f8fe 	bl	8000c98 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe f8fa 	bl	8000c98 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e095      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a42      	ldr	r2, [pc, #264]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002af8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b00:	4a3b      	ldr	r2, [pc, #236]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4936      	ldr	r1, [pc, #216]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b80      	cmp	r3, #128	@ 0x80
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b22:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4a32      	ldr	r2, [pc, #200]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d21d      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 020f 	bic.w	r2, r3, #15
 8002b44:	4929      	ldr	r1, [pc, #164]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe f8a4 	bl	8000c98 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe f8a0 	bl	8000c98 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e03b      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	@ (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1ed      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4917      	ldr	r1, [pc, #92]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	490f      	ldr	r1, [pc, #60]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb6:	f000 f825 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490c      	ldr	r1, [pc, #48]	@ (8002bf8 <HAL_RCC_ClockConfig+0x26c>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x270>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <HAL_RCC_ClockConfig+0x274>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f810 	bl	8000c00 <HAL_InitTick>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	04c4b400 	.word	0x04c4b400
 8002bf8:	08005878 	.word	0x08005878
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000004 	.word	0x20000004

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c16:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e047      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c1c:	4b27      	ldr	r3, [pc, #156]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c28:	4b26      	ldr	r3, [pc, #152]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	e03e      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c2e:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d136      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3a:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c58:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	4a16      	ldr	r2, [pc, #88]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c62:	68d2      	ldr	r2, [r2, #12]
 8002c64:	0a12      	lsrs	r2, r2, #8
 8002c66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	617b      	str	r3, [r7, #20]
      break;
 8002c70:	e00c      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c72:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	0a12      	lsrs	r2, r2, #8
 8002c80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
      break;
 8002c8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0e5b      	lsrs	r3, r3, #25
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	e001      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cac:	693b      	ldr	r3, [r7, #16]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	@ (8002d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08005888 	.word	0x08005888

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d10:	f7ff ffda 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0adb      	lsrs	r3, r3, #11
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4904      	ldr	r1, [pc, #16]	@ (8002d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08005888 	.word	0x08005888

08002d38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3301      	adds	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d10c      	bne.n	8002d76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5c:	4a17      	ldr	r2, [pc, #92]	@ (8002dbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	4a14      	ldr	r2, [pc, #80]	@ (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d66:	68d2      	ldr	r2, [r2, #12]
 8002d68:	0a12      	lsrs	r2, r2, #8
 8002d6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	617b      	str	r3, [r7, #20]
    break;
 8002d74:	e00c      	b.n	8002d90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d76:	4a12      	ldr	r2, [pc, #72]	@ (8002dc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	0a12      	lsrs	r2, r2, #8
 8002d84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    break;
 8002d8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0e5b      	lsrs	r3, r3, #25
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002daa:	687b      	ldr	r3, [r7, #4]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	00f42400 	.word	0x00f42400

08002dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dcc:	2300      	movs	r3, #0
 8002dce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8098 	beq.w	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b40      	ldr	r3, [pc, #256]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a39      	ldr	r2, [pc, #228]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e1a:	f7fd ff3d 	bl	8000c98 <HAL_GetTick>
 8002e1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e20:	e009      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fd ff39 	bl	8000c98 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d902      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	74fb      	strb	r3, [r7, #19]
        break;
 8002e34:	e005      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e36:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ef      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d159      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01e      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d019      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e64:	4b23      	ldr	r3, [pc, #140]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e70:	4b20      	ldr	r3, [pc, #128]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e76:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e80:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e90:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fd fef9 	bl	8000c98 <HAL_GetTick>
 8002ea6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fd fef5 	bl	8000c98 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d902      	bls.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	74fb      	strb	r3, [r7, #19]
            break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ec      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed6:	4b07      	ldr	r3, [pc, #28]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee4:	4903      	ldr	r1, [pc, #12]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002eec:	e008      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	74bb      	strb	r3, [r7, #18]
 8002ef2:	e005      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f00:	7c7b      	ldrb	r3, [r7, #17]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4ba7      	ldr	r3, [pc, #668]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	4aa6      	ldr	r2, [pc, #664]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1e:	4ba1      	ldr	r3, [pc, #644]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f023 0203 	bic.w	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	499d      	ldr	r1, [pc, #628]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f40:	4b98      	ldr	r3, [pc, #608]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	f023 020c 	bic.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4995      	ldr	r1, [pc, #596]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f62:	4b90      	ldr	r3, [pc, #576]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	498c      	ldr	r1, [pc, #560]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f84:	4b87      	ldr	r3, [pc, #540]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	4984      	ldr	r1, [pc, #528]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	497b      	ldr	r1, [pc, #492]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc8:	4b76      	ldr	r3, [pc, #472]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	4973      	ldr	r1, [pc, #460]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fea:	4b6e      	ldr	r3, [pc, #440]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	496a      	ldr	r1, [pc, #424]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800300c:	4b65      	ldr	r3, [pc, #404]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4962      	ldr	r1, [pc, #392]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800302e:	4b5d      	ldr	r3, [pc, #372]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	4959      	ldr	r1, [pc, #356]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003050:	4b54      	ldr	r3, [pc, #336]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	4951      	ldr	r1, [pc, #324]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003072:	4b4c      	ldr	r3, [pc, #304]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	4948      	ldr	r1, [pc, #288]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003094:	4b43      	ldr	r3, [pc, #268]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4940      	ldr	r1, [pc, #256]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b4:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a3a      	ldr	r2, [pc, #232]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030cc:	4b35      	ldr	r3, [pc, #212]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030da:	4932      	ldr	r1, [pc, #200]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b2d      	ldr	r3, [pc, #180]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a2c      	ldr	r2, [pc, #176]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003104:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003112:	4924      	ldr	r1, [pc, #144]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a1e      	ldr	r2, [pc, #120]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314a:	4916      	ldr	r1, [pc, #88]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800315a:	d105      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a10      	ldr	r2, [pc, #64]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003166:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d019      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	4908      	ldr	r1, [pc, #32]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003192:	d109      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a02      	ldr	r2, [pc, #8]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031b4:	4b29      	ldr	r3, [pc, #164]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	4926      	ldr	r1, [pc, #152]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031d4:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a20      	ldr	r2, [pc, #128]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80031ec:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fa:	4918      	ldr	r1, [pc, #96]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800320c:	4b13      	ldr	r3, [pc, #76]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a12      	ldr	r2, [pc, #72]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003216:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003224:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800322a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	490a      	ldr	r1, [pc, #40]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800324e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003250:	7cbb      	ldrb	r3, [r7, #18]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e042      	b.n	80032f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fd fbc3 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2224      	movs	r2, #36	@ 0x24
 800328e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 ff48 	bl	8004140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fc49 	bl	8003b48 <UART_SetConfig>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e01b      	b.n	80032f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 ffc7 	bl	8004284 <UART_CheckIdleState>
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003300:	b480      	push	{r7}
 8003302:	b091      	sub	sp, #68	@ 0x44
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003314:	2b20      	cmp	r3, #32
 8003316:	d178      	bne.n	800340a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Transmit_IT+0x24>
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e071      	b.n	800340c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2221      	movs	r2, #33	@ 0x21
 8003350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335c:	d12a      	bne.n	80033b4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003366:	d107      	bne.n	8003378 <HAL_UART_Transmit_IT+0x78>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a29      	ldr	r2, [pc, #164]	@ (8003418 <HAL_UART_Transmit_IT+0x118>)
 8003374:	679a      	str	r2, [r3, #120]	@ 0x78
 8003376:	e002      	b.n	800337e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a28      	ldr	r2, [pc, #160]	@ (800341c <HAL_UART_Transmit_IT+0x11c>)
 800337c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3308      	adds	r3, #8
 800339c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800339e:	637a      	str	r2, [r7, #52]	@ 0x34
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80033ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <HAL_UART_Transmit_IT+0x7e>
 80033b2:	e028      	b.n	8003406 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033bc:	d107      	bne.n	80033ce <HAL_UART_Transmit_IT+0xce>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a15      	ldr	r2, [pc, #84]	@ (8003420 <HAL_UART_Transmit_IT+0x120>)
 80033ca:	679a      	str	r2, [r3, #120]	@ 0x78
 80033cc:	e002      	b.n	80033d4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <HAL_UART_Transmit_IT+0x124>)
 80033d2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	613b      	str	r3, [r7, #16]
   return(result);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	69f9      	ldr	r1, [r7, #28]
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e6      	bne.n	80033d4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3744      	adds	r7, #68	@ 0x44
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	08004a4b 	.word	0x08004a4b
 800341c:	0800496b 	.word	0x0800496b
 8003420:	080048a9 	.word	0x080048a9
 8003424:	080047f1 	.word	0x080047f1

08003428 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800343c:	2b20      	cmp	r3, #32
 800343e:	d137      	bne.n	80034b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_Receive_IT+0x24>
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e030      	b.n	80034b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <HAL_UART_Receive_IT+0x94>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01f      	beq.n	80034a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d018      	beq.n	80034a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	613b      	str	r3, [r7, #16]
   return(result);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	69f9      	ldr	r1, [r7, #28]
 8003492:	6a3a      	ldr	r2, [r7, #32]
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	61bb      	str	r3, [r7, #24]
   return(result);
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f001 f804 	bl	80044b4 <UART_Start_Receive_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	e000      	b.n	80034b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3728      	adds	r7, #40	@ 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40008000 	.word	0x40008000

080034c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b0ba      	sub	sp, #232	@ 0xe8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80034ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80034ee:	4013      	ands	r3, r2
 80034f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80034f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11b      	bne.n	8003534 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 82e3 	beq.w	8003af0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
      }
      return;
 8003532:	e2dd      	b.n	8003af0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8123 	beq.w	8003784 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800353e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003542:	4b8d      	ldr	r3, [pc, #564]	@ (8003778 <HAL_UART_IRQHandler+0x2b8>)
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800354a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800354e:	4b8b      	ldr	r3, [pc, #556]	@ (800377c <HAL_UART_IRQHandler+0x2bc>)
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8116 	beq.w	8003784 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d011      	beq.n	8003588 <HAL_UART_IRQHandler+0xc8>
 8003564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d011      	beq.n	80035b8 <HAL_UART_IRQHandler+0xf8>
 8003594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2202      	movs	r2, #2
 80035a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d011      	beq.n	80035e8 <HAL_UART_IRQHandler+0x128>
 80035c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2204      	movs	r2, #4
 80035d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d017      	beq.n	8003624 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003600:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003604:	4b5c      	ldr	r3, [pc, #368]	@ (8003778 <HAL_UART_IRQHandler+0x2b8>)
 8003606:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	f043 0208 	orr.w	r2, r3, #8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <HAL_UART_IRQHandler+0x196>
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003634:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00c      	beq.n	8003656 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8249 	beq.w	8003af4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d013      	beq.n	8003696 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800367a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036aa:	2b40      	cmp	r3, #64	@ 0x40
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d054      	beq.n	8003764 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f001 f81c 	bl	80046f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d146      	bne.n	800375c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3308      	adds	r3, #8
 80036f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1d9      	bne.n	80036ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d017      	beq.n	8003754 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800372a:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <HAL_UART_IRQHandler+0x2c0>)
 800372c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fc23 	bl	8000f80 <HAL_DMA_Abort_IT>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d019      	beq.n	8003774 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800374e:	4610      	mov	r0, r2
 8003750:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003752:	e00f      	b.n	8003774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f9e1 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375a:	e00b      	b.n	8003774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f9dd 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003762:	e007      	b.n	8003774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f9d9 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003772:	e1bf      	b.n	8003af4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	bf00      	nop
    return;
 8003776:	e1bd      	b.n	8003af4 <HAL_UART_IRQHandler+0x634>
 8003778:	10000001 	.word	0x10000001
 800377c:	04000120 	.word	0x04000120
 8003780:	080047c5 	.word	0x080047c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003788:	2b01      	cmp	r3, #1
 800378a:	f040 8153 	bne.w	8003a34 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 814c 	beq.w	8003a34 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8145 	beq.w	8003a34 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2210      	movs	r2, #16
 80037b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	f040 80bb 	bne.w	8003938 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 818f 	beq.w	8003af8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80037e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f080 8187 	bcs.w	8003af8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8087 	bne.w	8003916 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800381c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003832:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003836:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800383e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800384a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1da      	bne.n	8003808 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3308      	adds	r3, #8
 8003872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003876:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800387a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800387e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e1      	bne.n	8003852 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800389e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e3      	bne.n	800388e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e4:	f023 0310 	bic.w	r3, r3, #16
 80038e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e4      	bne.n	80038d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd fadc 	bl	8000ece <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003928:	b29b      	uxth	r3, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	b29b      	uxth	r3, r3
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8fd 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003936:	e0df      	b.n	8003af8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003944:	b29b      	uxth	r3, r3
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80d1 	beq.w	8003afc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800395a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80cc 	beq.w	8003afc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003986:	647b      	str	r3, [r7, #68]	@ 0x44
 8003988:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800398c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e4      	bne.n	8003964 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3308      	adds	r3, #8
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	623b      	str	r3, [r7, #32]
   return(result);
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80039c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e1      	bne.n	800399a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0310 	bic.w	r3, r3, #16
 80039fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	617b      	str	r3, [r7, #20]
   return(result);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e4      	bne.n	80039ea <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f87f 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a32:	e063      	b.n	8003afc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00e      	beq.n	8003a5e <HAL_UART_IRQHandler+0x59e>
 8003a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f001 fdb4 	bl	80055c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a5c:	e051      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d014      	beq.n	8003a94 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03a      	beq.n	8003b00 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
    }
    return;
 8003a92:	e035      	b.n	8003b00 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d009      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x5f4>
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f001 f841 	bl	8004b34 <UART_EndTransmit_IT>
    return;
 8003ab2:	e026      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x614>
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f001 fd8d 	bl	80055ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ad2:	e016      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_UART_IRQHandler+0x642>
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	da0c      	bge.n	8003b02 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f001 fd75 	bl	80055d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aee:	e008      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
      return;
 8003af0:	bf00      	nop
 8003af2:	e006      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
    return;
 8003af4:	bf00      	nop
 8003af6:	e004      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
      return;
 8003af8:	bf00      	nop
 8003afa:	e002      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
      return;
 8003afc:	bf00      	nop
 8003afe:	e000      	b.n	8003b02 <HAL_UART_IRQHandler+0x642>
    return;
 8003b00:	bf00      	nop
  }
}
 8003b02:	37e8      	adds	r7, #232	@ 0xe8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b4c:	b08c      	sub	sp, #48	@ 0x30
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4baa      	ldr	r3, [pc, #680]	@ (8003e20 <UART_SetConfig+0x2d8>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a9f      	ldr	r2, [pc, #636]	@ (8003e24 <UART_SetConfig+0x2dc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003bbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	f023 010f 	bic.w	r1, r3, #15
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a90      	ldr	r2, [pc, #576]	@ (8003e28 <UART_SetConfig+0x2e0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d125      	bne.n	8003c38 <UART_SetConfig+0xf0>
 8003bec:	4b8f      	ldr	r3, [pc, #572]	@ (8003e2c <UART_SetConfig+0x2e4>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d81a      	bhi.n	8003c30 <UART_SetConfig+0xe8>
 8003bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <UART_SetConfig+0xb8>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c21 	.word	0x08003c21
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c16:	e116      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1e:	e112      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c26:	e10e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c2e:	e10a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c36:	e106      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7c      	ldr	r2, [pc, #496]	@ (8003e30 <UART_SetConfig+0x2e8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d138      	bne.n	8003cb4 <UART_SetConfig+0x16c>
 8003c42:	4b7a      	ldr	r3, [pc, #488]	@ (8003e2c <UART_SetConfig+0x2e4>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d82d      	bhi.n	8003cac <UART_SetConfig+0x164>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <UART_SetConfig+0x110>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003cad 	.word	0x08003cad
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003cad 	.word	0x08003cad
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003c95 	.word	0x08003c95
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003ca5 	.word	0x08003ca5
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c92:	e0d8      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c94:	2302      	movs	r3, #2
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9a:	e0d4      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca2:	e0d0      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003caa:	e0cc      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cac:	2310      	movs	r3, #16
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb2:	e0c8      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5e      	ldr	r2, [pc, #376]	@ (8003e34 <UART_SetConfig+0x2ec>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d125      	bne.n	8003d0a <UART_SetConfig+0x1c2>
 8003cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8003e2c <UART_SetConfig+0x2e4>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cc8:	2b30      	cmp	r3, #48	@ 0x30
 8003cca:	d016      	beq.n	8003cfa <UART_SetConfig+0x1b2>
 8003ccc:	2b30      	cmp	r3, #48	@ 0x30
 8003cce:	d818      	bhi.n	8003d02 <UART_SetConfig+0x1ba>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d00a      	beq.n	8003cea <UART_SetConfig+0x1a2>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d814      	bhi.n	8003d02 <UART_SetConfig+0x1ba>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <UART_SetConfig+0x19a>
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d008      	beq.n	8003cf2 <UART_SetConfig+0x1aa>
 8003ce0:	e00f      	b.n	8003d02 <UART_SetConfig+0x1ba>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce8:	e0ad      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cea:	2302      	movs	r3, #2
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf0:	e0a9      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf8:	e0a5      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d00:	e0a1      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d02:	2310      	movs	r3, #16
 8003d04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d08:	e09d      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e38 <UART_SetConfig+0x2f0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d125      	bne.n	8003d60 <UART_SetConfig+0x218>
 8003d14:	4b45      	ldr	r3, [pc, #276]	@ (8003e2c <UART_SetConfig+0x2e4>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d20:	d016      	beq.n	8003d50 <UART_SetConfig+0x208>
 8003d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d24:	d818      	bhi.n	8003d58 <UART_SetConfig+0x210>
 8003d26:	2b80      	cmp	r3, #128	@ 0x80
 8003d28:	d00a      	beq.n	8003d40 <UART_SetConfig+0x1f8>
 8003d2a:	2b80      	cmp	r3, #128	@ 0x80
 8003d2c:	d814      	bhi.n	8003d58 <UART_SetConfig+0x210>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <UART_SetConfig+0x1f0>
 8003d32:	2b40      	cmp	r3, #64	@ 0x40
 8003d34:	d008      	beq.n	8003d48 <UART_SetConfig+0x200>
 8003d36:	e00f      	b.n	8003d58 <UART_SetConfig+0x210>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3e:	e082      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d40:	2302      	movs	r3, #2
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d46:	e07e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4e:	e07a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d50:	2308      	movs	r3, #8
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e076      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5e:	e072      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a35      	ldr	r2, [pc, #212]	@ (8003e3c <UART_SetConfig+0x2f4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d12a      	bne.n	8003dc0 <UART_SetConfig+0x278>
 8003d6a:	4b30      	ldr	r3, [pc, #192]	@ (8003e2c <UART_SetConfig+0x2e4>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d78:	d01a      	beq.n	8003db0 <UART_SetConfig+0x268>
 8003d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d7e:	d81b      	bhi.n	8003db8 <UART_SetConfig+0x270>
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d84:	d00c      	beq.n	8003da0 <UART_SetConfig+0x258>
 8003d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d8a:	d815      	bhi.n	8003db8 <UART_SetConfig+0x270>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <UART_SetConfig+0x250>
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d94:	d008      	beq.n	8003da8 <UART_SetConfig+0x260>
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x270>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d9e:	e052      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003da0:	2302      	movs	r3, #2
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da6:	e04e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003da8:	2304      	movs	r3, #4
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dae:	e04a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003db0:	2308      	movs	r3, #8
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db6:	e046      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003db8:	2310      	movs	r3, #16
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dbe:	e042      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <UART_SetConfig+0x2dc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d13a      	bne.n	8003e40 <UART_SetConfig+0x2f8>
 8003dca:	4b18      	ldr	r3, [pc, #96]	@ (8003e2c <UART_SetConfig+0x2e4>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003dd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dd8:	d01a      	beq.n	8003e10 <UART_SetConfig+0x2c8>
 8003dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dde:	d81b      	bhi.n	8003e18 <UART_SetConfig+0x2d0>
 8003de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003de4:	d00c      	beq.n	8003e00 <UART_SetConfig+0x2b8>
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dea:	d815      	bhi.n	8003e18 <UART_SetConfig+0x2d0>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <UART_SetConfig+0x2b0>
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df4:	d008      	beq.n	8003e08 <UART_SetConfig+0x2c0>
 8003df6:	e00f      	b.n	8003e18 <UART_SetConfig+0x2d0>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	e022      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e06:	e01e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0e:	e01a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e10:	2308      	movs	r3, #8
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e16:	e016      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e1e:	e012      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e20:	cfff69f3 	.word	0xcfff69f3
 8003e24:	40008000 	.word	0x40008000
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40004400 	.word	0x40004400
 8003e34:	40004800 	.word	0x40004800
 8003e38:	40004c00 	.word	0x40004c00
 8003e3c:	40005000 	.word	0x40005000
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4aae      	ldr	r2, [pc, #696]	@ (8004104 <UART_SetConfig+0x5bc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	f040 8097 	bne.w	8003f80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d823      	bhi.n	8003ea2 <UART_SetConfig+0x35a>
 8003e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <UART_SetConfig+0x318>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003ea3 	.word	0x08003ea3
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003e93 	.word	0x08003e93
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	08003ea3 	.word	0x08003ea3
 8003e7c:	08003ea3 	.word	0x08003ea3
 8003e80:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e84:	f7fe ff2c 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8003e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e8a:	e010      	b.n	8003eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b9e      	ldr	r3, [pc, #632]	@ (8004108 <UART_SetConfig+0x5c0>)
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e90:	e00d      	b.n	8003eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7fe feb7 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8003e96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e98:	e009      	b.n	8003eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ea0:	e005      	b.n	8003eae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8130 	beq.w	8004116 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	4a94      	ldr	r2, [pc, #592]	@ (800410c <UART_SetConfig+0x5c4>)
 8003ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d305      	bcc.n	8003ee6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d903      	bls.n	8003eee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003eec:	e113      	b.n	8004116 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	60fa      	str	r2, [r7, #12]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	4a84      	ldr	r2, [pc, #528]	@ (800410c <UART_SetConfig+0x5c4>)
 8003efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2200      	movs	r2, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f10:	f7fc f982 	bl	8000218 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	020b      	lsls	r3, r1, #8
 8003f26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f2a:	0202      	lsls	r2, r0, #8
 8003f2c:	6979      	ldr	r1, [r7, #20]
 8003f2e:	6849      	ldr	r1, [r1, #4]
 8003f30:	0849      	lsrs	r1, r1, #1
 8003f32:	2000      	movs	r0, #0
 8003f34:	460c      	mov	r4, r1
 8003f36:	4605      	mov	r5, r0
 8003f38:	eb12 0804 	adds.w	r8, r2, r4
 8003f3c:	eb43 0905 	adc.w	r9, r3, r5
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	469a      	mov	sl, r3
 8003f48:	4693      	mov	fp, r2
 8003f4a:	4652      	mov	r2, sl
 8003f4c:	465b      	mov	r3, fp
 8003f4e:	4640      	mov	r0, r8
 8003f50:	4649      	mov	r1, r9
 8003f52:	f7fc f961 	bl	8000218 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f64:	d308      	bcc.n	8003f78 <UART_SetConfig+0x430>
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f6c:	d204      	bcs.n	8003f78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a3a      	ldr	r2, [r7, #32]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	e0ce      	b.n	8004116 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f7e:	e0ca      	b.n	8004116 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f88:	d166      	bne.n	8004058 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d827      	bhi.n	8003fe2 <UART_SetConfig+0x49a>
 8003f92:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <UART_SetConfig+0x450>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe fe90 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fc2:	e014      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7fe fea2 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8003fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fca:	e010      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8004108 <UART_SetConfig+0x5c0>)
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fd0:	e00d      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe fe17 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8003fd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fd8:	e009      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fe0:	e005      	b.n	8003fee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8090 	beq.w	8004116 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	4a44      	ldr	r2, [pc, #272]	@ (800410c <UART_SetConfig+0x5c4>)
 8003ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004000:	461a      	mov	r2, r3
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	fbb3 f3f2 	udiv	r3, r3, r2
 8004008:	005a      	lsls	r2, r3, #1
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	441a      	add	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	d916      	bls.n	8004050 <UART_SetConfig+0x508>
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004028:	d212      	bcs.n	8004050 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f023 030f 	bic.w	r3, r3, #15
 8004032:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	b29b      	uxth	r3, r3
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	b29a      	uxth	r2, r3
 8004040:	8bfb      	ldrh	r3, [r7, #30]
 8004042:	4313      	orrs	r3, r2
 8004044:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	8bfa      	ldrh	r2, [r7, #30]
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	e062      	b.n	8004116 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004056:	e05e      	b.n	8004116 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004058:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800405c:	2b08      	cmp	r3, #8
 800405e:	d828      	bhi.n	80040b2 <UART_SetConfig+0x56a>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <UART_SetConfig+0x520>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	0800408d 	.word	0x0800408d
 800406c:	08004095 	.word	0x08004095
 8004070:	0800409d 	.word	0x0800409d
 8004074:	080040b3 	.word	0x080040b3
 8004078:	080040a3 	.word	0x080040a3
 800407c:	080040b3 	.word	0x080040b3
 8004080:	080040b3 	.word	0x080040b3
 8004084:	080040b3 	.word	0x080040b3
 8004088:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fe28 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8004090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004092:	e014      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fe3a 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8004098:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800409a:	e010      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409c:	4b1a      	ldr	r3, [pc, #104]	@ (8004108 <UART_SetConfig+0x5c0>)
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040a0:	e00d      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a2:	f7fe fdaf 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 80040a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040a8:	e009      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040b0:	e005      	b.n	80040be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040bc:	bf00      	nop
    }

    if (pclk != 0U)
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d028      	beq.n	8004116 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	4a10      	ldr	r2, [pc, #64]	@ (800410c <UART_SetConfig+0x5c4>)
 80040ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ce:	461a      	mov	r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	441a      	add	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d910      	bls.n	8004110 <UART_SetConfig+0x5c8>
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f4:	d20c      	bcs.n	8004110 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e009      	b.n	8004116 <UART_SetConfig+0x5ce>
 8004102:	bf00      	nop
 8004104:	40008000 	.word	0x40008000
 8004108:	00f42400 	.word	0x00f42400
 800410c:	080058a0 	.word	0x080058a0
      }
      else
      {
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2201      	movs	r2, #1
 800411a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2201      	movs	r2, #1
 8004122:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004132:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004136:	4618      	mov	r0, r3
 8004138:	3730      	adds	r7, #48	@ 0x30
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01a      	beq.n	8004256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800423e:	d10a      	bne.n	8004256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b098      	sub	sp, #96	@ 0x60
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004294:	f7fc fd00 	bl	8000c98 <HAL_GetTick>
 8004298:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d12f      	bne.n	8004308 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f88e 	bl	80043d8 <UART_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d022      	beq.n	8004308 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e6      	bne.n	80042c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e063      	b.n	80043d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d149      	bne.n	80043aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004316:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431e:	2200      	movs	r2, #0
 8004320:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f857 	bl	80043d8 <UART_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d03c      	beq.n	80043aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	623b      	str	r3, [r7, #32]
   return(result);
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004350:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800435c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e6      	bne.n	8004330 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	60fb      	str	r3, [r7, #12]
   return(result);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004382:	61fa      	str	r2, [r7, #28]
 8004384:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	69b9      	ldr	r1, [r7, #24]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	617b      	str	r3, [r7, #20]
   return(result);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e5      	bne.n	8004362 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e012      	b.n	80043d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3758      	adds	r7, #88	@ 0x58
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e8:	e04f      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043f0:	d04b      	beq.n	800448a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fc fc51 	bl	8000c98 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <UART_WaitOnFlagUntilTimeout+0x30>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e04e      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d037      	beq.n	800448a <UART_WaitOnFlagUntilTimeout+0xb2>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b80      	cmp	r3, #128	@ 0x80
 800441e:	d034      	beq.n	800448a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b40      	cmp	r3, #64	@ 0x40
 8004424:	d031      	beq.n	800448a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b08      	cmp	r3, #8
 8004432:	d110      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2208      	movs	r2, #8
 800443a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f95b 	bl	80046f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2208      	movs	r2, #8
 8004446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e029      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004464:	d111      	bne.n	800448a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800446e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f941 	bl	80046f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e00f      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d0a0      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b0a3      	sub	sp, #140	@ 0x8c
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e6:	d10e      	bne.n	8004506 <UART_Start_Receive_IT+0x52>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <UART_Start_Receive_IT+0x48>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044fa:	e02d      	b.n	8004558 <UART_Start_Receive_IT+0xa4>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	22ff      	movs	r2, #255	@ 0xff
 8004500:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004504:	e028      	b.n	8004558 <UART_Start_Receive_IT+0xa4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <UART_Start_Receive_IT+0x76>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <UART_Start_Receive_IT+0x6c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	22ff      	movs	r2, #255	@ 0xff
 800451a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800451e:	e01b      	b.n	8004558 <UART_Start_Receive_IT+0xa4>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	227f      	movs	r2, #127	@ 0x7f
 8004524:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004528:	e016      	b.n	8004558 <UART_Start_Receive_IT+0xa4>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004532:	d10d      	bne.n	8004550 <UART_Start_Receive_IT+0x9c>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <UART_Start_Receive_IT+0x92>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	227f      	movs	r2, #127	@ 0x7f
 8004540:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004544:	e008      	b.n	8004558 <UART_Start_Receive_IT+0xa4>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	223f      	movs	r2, #63	@ 0x3f
 800454a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800454e:	e003      	b.n	8004558 <UART_Start_Receive_IT+0xa4>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2222      	movs	r2, #34	@ 0x22
 8004564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3308      	adds	r3, #8
 8004588:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800458c:	673a      	str	r2, [r7, #112]	@ 0x70
 800458e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004592:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800459a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e3      	bne.n	8004568 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045a8:	d14f      	bne.n	800464a <UART_Start_Receive_IT+0x196>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d349      	bcc.n	800464a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045be:	d107      	bne.n	80045d0 <UART_Start_Receive_IT+0x11c>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a47      	ldr	r2, [pc, #284]	@ (80046e8 <UART_Start_Receive_IT+0x234>)
 80045cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80045ce:	e002      	b.n	80045d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a46      	ldr	r2, [pc, #280]	@ (80046ec <UART_Start_Receive_IT+0x238>)
 80045d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01a      	beq.n	8004614 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80045ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004602:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004606:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800460e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e4      	bne.n	80045de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800462a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004634:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004636:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800463a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <UART_Start_Receive_IT+0x160>
 8004648:	e046      	b.n	80046d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004652:	d107      	bne.n	8004664 <UART_Start_Receive_IT+0x1b0>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d103      	bne.n	8004664 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a24      	ldr	r2, [pc, #144]	@ (80046f0 <UART_Start_Receive_IT+0x23c>)
 8004660:	675a      	str	r2, [r3, #116]	@ 0x74
 8004662:	e002      	b.n	800466a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a23      	ldr	r2, [pc, #140]	@ (80046f4 <UART_Start_Receive_IT+0x240>)
 8004668:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d019      	beq.n	80046a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004686:	677b      	str	r3, [r7, #116]	@ 0x74
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004690:	637b      	str	r3, [r7, #52]	@ 0x34
 8004692:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004696:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e6      	bne.n	8004672 <UART_Start_Receive_IT+0x1be>
 80046a4:	e018      	b.n	80046d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	613b      	str	r3, [r7, #16]
   return(result);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046c4:	623b      	str	r3, [r7, #32]
 80046c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	378c      	adds	r7, #140	@ 0x8c
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	0800525d 	.word	0x0800525d
 80046ec:	08004efd 	.word	0x08004efd
 80046f0:	08004d45 	.word	0x08004d45
 80046f4:	08004b8d 	.word	0x08004b8d

080046f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b095      	sub	sp, #84	@ 0x54
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800471e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004720:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e6      	bne.n	8004700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3308      	adds	r3, #8
 8004738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	61fb      	str	r3, [r7, #28]
   return(result);
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800475c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e3      	bne.n	8004732 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d118      	bne.n	80047a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	647b      	str	r3, [r7, #68]	@ 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	613b      	str	r3, [r7, #16]
   return(result);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e6      	bne.n	8004772 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047b8:	bf00      	nop
 80047ba:	3754      	adds	r7, #84	@ 0x54
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff f99a 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b08f      	sub	sp, #60	@ 0x3c
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	2b21      	cmp	r3, #33	@ 0x21
 8004800:	d14c      	bne.n	800489c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d132      	bne.n	8004874 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	61fb      	str	r3, [r7, #28]
   return(result);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e6      	bne.n	800480e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	60bb      	str	r3, [r7, #8]
   return(result);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004854:	633b      	str	r3, [r7, #48]	@ 0x30
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6979      	ldr	r1, [r7, #20]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	613b      	str	r3, [r7, #16]
   return(result);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e6      	bne.n	8004840 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004872:	e013      	b.n	800489c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800489c:	bf00      	nop
 800489e:	373c      	adds	r7, #60	@ 0x3c
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b091      	sub	sp, #68	@ 0x44
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	2b21      	cmp	r3, #33	@ 0x21
 80048b8:	d151      	bne.n	800495e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d132      	bne.n	800492c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	623b      	str	r3, [r7, #32]
   return(result);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	60fb      	str	r3, [r7, #12]
   return(result);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	69b9      	ldr	r1, [r7, #24]
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	617b      	str	r3, [r7, #20]
   return(result);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800492a:	e018      	b.n	800495e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004930:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004940:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004946:	1c9a      	adds	r2, r3, #2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800495e:	bf00      	nop
 8004960:	3744      	adds	r7, #68	@ 0x44
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800496a:	b480      	push	{r7}
 800496c:	b091      	sub	sp, #68	@ 0x44
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004978:	2b21      	cmp	r3, #33	@ 0x21
 800497a:	d160      	bne.n	8004a3e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004982:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004984:	e057      	b.n	8004a36 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d133      	bne.n	80049fa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	623b      	str	r3, [r7, #32]
   return(result);
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	617b      	str	r3, [r7, #20]
   return(result);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e6      	bne.n	80049c6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80049f8:	e021      	b.n	8004a3e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d013      	beq.n	8004a30 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a32:	3b01      	subs	r3, #1
 8004a34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a36:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1a4      	bne.n	8004986 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004a3c:	e7ff      	b.n	8004a3e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004a3e:	bf00      	nop
 8004a40:	3744      	adds	r7, #68	@ 0x44
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b091      	sub	sp, #68	@ 0x44
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a58:	2b21      	cmp	r3, #33	@ 0x21
 8004a5a:	d165      	bne.n	8004b28 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004a62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a64:	e05c      	b.n	8004b20 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d133      	bne.n	8004ada <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e5      	bne.n	8004a72 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004ad8:	e026      	b.n	8004b28 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d018      	beq.n	8004b1a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aec:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004afc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b02:	1c9a      	adds	r2, r3, #2
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b20:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d19f      	bne.n	8004a66 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004b26:	e7ff      	b.n	8004b28 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004b28:	bf00      	nop
 8004b2a:	3744      	adds	r7, #68	@ 0x44
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6979      	ldr	r1, [r7, #20]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	613b      	str	r3, [r7, #16]
   return(result);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e6      	bne.n	8004b3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fe ffc3 	bl	8003b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b82:	bf00      	nop
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b09c      	sub	sp, #112	@ 0x70
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004b9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ba4:	2b22      	cmp	r3, #34	@ 0x22
 8004ba6:	f040 80be 	bne.w	8004d26 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bb8:	b2d9      	uxtb	r1, r3
 8004bba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 80a1 	bne.w	8004d36 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e6      	bne.n	8004bf4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c46:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e5      	bne.n	8004c26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a33      	ldr	r2, [pc, #204]	@ (8004d40 <UART_RxISR_8BIT+0x1b4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01f      	beq.n	8004cb8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d018      	beq.n	8004cb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	623b      	str	r3, [r7, #32]
   return(result);
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d12e      	bne.n	8004d1e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0310 	bic.w	r3, r3, #16
 8004cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	69b9      	ldr	r1, [r7, #24]
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	d103      	bne.n	8004d0e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe ff0a 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d1c:	e00b      	b.n	8004d36 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fb fd8a 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 8004d24:	e007      	b.n	8004d36 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0208 	orr.w	r2, r2, #8
 8004d34:	619a      	str	r2, [r3, #24]
}
 8004d36:	bf00      	nop
 8004d38:	3770      	adds	r7, #112	@ 0x70
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40008000 	.word	0x40008000

08004d44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b09c      	sub	sp, #112	@ 0x70
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004d52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d5c:	2b22      	cmp	r3, #34	@ 0x22
 8004d5e:	f040 80be 	bne.w	8004ede <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d70:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d72:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004d76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d86:	1c9a      	adds	r2, r3, #2
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 80a1 	bne.w	8004eee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dcc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004dd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e6      	bne.n	8004dac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004dfe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a33      	ldr	r2, [pc, #204]	@ (8004ef8 <UART_RxISR_16BIT+0x1b4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01f      	beq.n	8004e70 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e5e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e6      	bne.n	8004e3e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d12e      	bne.n	8004ed6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f023 0310 	bic.w	r3, r3, #16
 8004e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6979      	ldr	r1, [r7, #20]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e6      	bne.n	8004e7e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d103      	bne.n	8004ec6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2210      	movs	r2, #16
 8004ec4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fe fe2e 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ed4:	e00b      	b.n	8004eee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fb fcae 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 8004edc:	e007      	b.n	8004eee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0208 	orr.w	r2, r2, #8
 8004eec:	619a      	str	r2, [r3, #24]
}
 8004eee:	bf00      	nop
 8004ef0:	3770      	adds	r7, #112	@ 0x70
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40008000 	.word	0x40008000

08004efc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0ac      	sub	sp, #176	@ 0xb0
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004f0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f32:	2b22      	cmp	r3, #34	@ 0x22
 8004f34:	f040 8182 	bne.w	800523c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004f3e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f42:	e125      	b.n	8005190 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f4e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004f52:	b2d9      	uxtb	r1, r3
 8004f54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5e:	400a      	ands	r2, r1
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d053      	beq.n	800503e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d011      	beq.n	8004fc6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbc:	f043 0201 	orr.w	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d011      	beq.n	8004ff6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d011      	beq.n	8005026 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2204      	movs	r2, #4
 8005014:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	f043 0202 	orr.w	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fe fd73 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 80a2 	bne.w	8005190 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800505a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800505c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800506e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005070:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005074:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800507c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e4      	bne.n	800504c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050aa:	66ba      	str	r2, [r7, #104]	@ 0x68
 80050ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80050b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80050b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e1      	bne.n	8005082 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005254 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d021      	beq.n	8005120 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01a      	beq.n	8005120 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80050f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800510c:	657b      	str	r3, [r7, #84]	@ 0x54
 800510e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005112:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800511a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e4      	bne.n	80050ea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d130      	bne.n	800518a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
 8005152:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e4      	bne.n	800512e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b10      	cmp	r3, #16
 8005170:	d103      	bne.n	800517a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2210      	movs	r2, #16
 8005178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fe fcd4 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
 8005188:	e002      	b.n	8005190 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb fb54 	bl	8000838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005190:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005194:	2b00      	cmp	r3, #0
 8005196:	d006      	beq.n	80051a6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f47f aecf 	bne.w	8004f44 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d049      	beq.n	800524c <UART_RxISR_8BIT_FIFOEN+0x350>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80051be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d242      	bcs.n	800524c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80051ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e3      	bne.n	80051c6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005202:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	60bb      	str	r3, [r7, #8]
   return(result);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f043 0320 	orr.w	r3, r3, #32
 8005218:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	613b      	str	r3, [r7, #16]
   return(result);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e4      	bne.n	8005204 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800523a:	e007      	b.n	800524c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0208 	orr.w	r2, r2, #8
 800524a:	619a      	str	r2, [r3, #24]
}
 800524c:	bf00      	nop
 800524e:	37b0      	adds	r7, #176	@ 0xb0
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40008000 	.word	0x40008000
 8005258:	08004b8d 	.word	0x08004b8d

0800525c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b0ae      	sub	sp, #184	@ 0xb8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800526a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005292:	2b22      	cmp	r3, #34	@ 0x22
 8005294:	f040 8186 	bne.w	80055a4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800529e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052a2:	e129      	b.n	80054f8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80052b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80052ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80052be:	4013      	ands	r3, r2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052cc:	1c9a      	adds	r2, r3, #2
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80052ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d053      	beq.n	80053a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d011      	beq.n	800532a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800530a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2201      	movs	r2, #1
 8005318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800532a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d011      	beq.n	800535a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2202      	movs	r2, #2
 8005348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800535a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d011      	beq.n	800538a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2204      	movs	r2, #4
 8005378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005380:	f043 0202 	orr.w	r2, r3, #2
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005390:	2b00      	cmp	r3, #0
 8005392:	d006      	beq.n	80053a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fe fbc1 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 80a4 	bne.w	80054f8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e2      	bne.n	80053b0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005412:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005414:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005418:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e1      	bne.n	80053ea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a5f      	ldr	r2, [pc, #380]	@ (80055bc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d021      	beq.n	8005488 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01a      	beq.n	8005488 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005462:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005474:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005476:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800547a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e4      	bne.n	8005452 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d130      	bne.n	80054f2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a6:	f023 0310 	bic.w	r3, r3, #16
 80054aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e4      	bne.n	8005496 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	d103      	bne.n	80054e2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2210      	movs	r2, #16
 80054e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fe fb20 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
 80054f0:	e002      	b.n	80054f8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fb f9a0 	bl	8000838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d006      	beq.n	800550e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	f47f aecb 	bne.w	80052a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005514:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005518:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800551c:	2b00      	cmp	r3, #0
 800551e:	d049      	beq.n	80055b4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005526:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800552a:	429a      	cmp	r2, r3
 800552c:	d242      	bcs.n	80055b4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	623b      	str	r3, [r7, #32]
   return(result);
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005552:	633a      	str	r2, [r7, #48]	@ 0x30
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e3      	bne.n	800552e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800556a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	60fb      	str	r3, [r7, #12]
   return(result);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f043 0320 	orr.w	r3, r3, #32
 8005580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	617b      	str	r3, [r7, #20]
   return(result);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e4      	bne.n	800556c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055a2:	e007      	b.n	80055b4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0208 	orr.w	r2, r2, #8
 80055b2:	619a      	str	r2, [r3, #24]
}
 80055b4:	bf00      	nop
 80055b6:	37b8      	adds	r7, #184	@ 0xb8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40008000 	.word	0x40008000
 80055c0:	08004d45 	.word	0x08004d45

080055c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_UARTEx_DisableFifoMode+0x16>
 8005612:	2302      	movs	r3, #2
 8005614:	e027      	b.n	8005666 <HAL_UARTEx_DisableFifoMode+0x66>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2224      	movs	r2, #36	@ 0x24
 8005622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005644:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005686:	2302      	movs	r3, #2
 8005688:	e02d      	b.n	80056e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2224      	movs	r2, #36	@ 0x24
 8005696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f850 	bl	800576c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005702:	2302      	movs	r3, #2
 8005704:	e02d      	b.n	8005762 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2224      	movs	r2, #36	@ 0x24
 8005712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0201 	bic.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f812 	bl	800576c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005778:	2b00      	cmp	r3, #0
 800577a:	d108      	bne.n	800578e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800578c:	e031      	b.n	80057f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800578e:	2308      	movs	r3, #8
 8005790:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005792:	2308      	movs	r3, #8
 8005794:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	0e5b      	lsrs	r3, r3, #25
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	0f5b      	lsrs	r3, r3, #29
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057b6:	7bbb      	ldrb	r3, [r7, #14]
 80057b8:	7b3a      	ldrb	r2, [r7, #12]
 80057ba:	4911      	ldr	r1, [pc, #68]	@ (8005800 <UARTEx_SetNbDataToProcess+0x94>)
 80057bc:	5c8a      	ldrb	r2, [r1, r2]
 80057be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057c2:	7b3a      	ldrb	r2, [r7, #12]
 80057c4:	490f      	ldr	r1, [pc, #60]	@ (8005804 <UARTEx_SetNbDataToProcess+0x98>)
 80057c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	7b7a      	ldrb	r2, [r7, #13]
 80057d8:	4909      	ldr	r1, [pc, #36]	@ (8005800 <UARTEx_SetNbDataToProcess+0x94>)
 80057da:	5c8a      	ldrb	r2, [r1, r2]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057e0:	7b7a      	ldrb	r2, [r7, #13]
 80057e2:	4908      	ldr	r1, [pc, #32]	@ (8005804 <UARTEx_SetNbDataToProcess+0x98>)
 80057e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	080058b8 	.word	0x080058b8
 8005804:	080058c0 	.word	0x080058c0

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4d0d      	ldr	r5, [pc, #52]	@ (8005850 <__libc_init_array+0x38>)
 800581c:	4c0d      	ldr	r4, [pc, #52]	@ (8005854 <__libc_init_array+0x3c>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	2600      	movs	r6, #0
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	4d0b      	ldr	r5, [pc, #44]	@ (8005858 <__libc_init_array+0x40>)
 800582a:	4c0c      	ldr	r4, [pc, #48]	@ (800585c <__libc_init_array+0x44>)
 800582c:	f000 f818 	bl	8005860 <_init>
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	2600      	movs	r6, #0
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	080058d0 	.word	0x080058d0
 8005854:	080058d0 	.word	0x080058d0
 8005858:	080058d0 	.word	0x080058d0
 800585c:	080058d4 	.word	0x080058d4

08005860 <_init>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	bf00      	nop
 8005864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005866:	bc08      	pop	{r3}
 8005868:	469e      	mov	lr, r3
 800586a:	4770      	bx	lr

0800586c <_fini>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	bf00      	nop
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr
