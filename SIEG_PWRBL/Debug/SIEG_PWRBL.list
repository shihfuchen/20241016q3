
SIEG_PWRBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004810  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a08  08004a08  00006094  2**0
                  CONTENTS
  4 .ARM          00000000  08004a08  08004a08  00006094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a08  08004a08  00006094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a08  08004a08  00005a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a0c  08004a0c  00005a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08004a10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000094  08004aa4  00006094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004aa4  00006208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd08  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002485  00000000  00000000  00011dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00014258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000866  00000000  00000000  00014da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024aab  00000000  00000000  0001560e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c49c  00000000  00000000  0003a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e63ac  00000000  00000000  00046555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c68  00000000  00000000  0012c944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000094 	.word	0x20000094
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080049d0 	.word	0x080049d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000098 	.word	0x20000098
 8000214:	080049d0 	.word	0x080049d0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 ff4c 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f939 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fa0d 	bl	8000644 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f9a5 	bl	8000578 <MX_FDCAN1_Init>
  MX_CRC_Init();
 800022e:	f000 f981 	bl	8000534 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  SCB->VTOR = FLASH_BASE | 0x00000000;
 8000232:	4b8a      	ldr	r3, [pc, #552]	@ (800045c <main+0x244>)
 8000234:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000238:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800023a:	b662      	cpsie	i
}
 800023c:	bf00      	nop
  __enable_irq();
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800023e:	4b88      	ldr	r3, [pc, #544]	@ (8000460 <main+0x248>)
 8000240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000242:	4a87      	ldr	r2, [pc, #540]	@ (8000460 <main+0x248>)
 8000244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000248:	6593      	str	r3, [r2, #88]	@ 0x58
 800024a:	4b85      	ldr	r3, [pc, #532]	@ (8000460 <main+0x248>)
 800024c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800024e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 8000256:	f003 f969 	bl	800352c <HAL_PWR_EnableBkUpAccess>
  FDCAN_Fil1.IdType = FDCAN_STANDARD_ID;
 800025a:	4b82      	ldr	r3, [pc, #520]	@ (8000464 <main+0x24c>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
  FDCAN_Fil1.FilterIndex = 0;
 8000260:	4b80      	ldr	r3, [pc, #512]	@ (8000464 <main+0x24c>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  FDCAN_Fil1.FilterType = FDCAN_FILTER_RANGE;
 8000266:	4b7f      	ldr	r3, [pc, #508]	@ (8000464 <main+0x24c>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  FDCAN_Fil1.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800026c:	4b7d      	ldr	r3, [pc, #500]	@ (8000464 <main+0x24c>)
 800026e:	2201      	movs	r2, #1
 8000270:	60da      	str	r2, [r3, #12]
  FDCAN_Fil1.FilterID1 = 0x000;
 8000272:	4b7c      	ldr	r3, [pc, #496]	@ (8000464 <main+0x24c>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  FDCAN_Fil1.FilterID2 = 0x200;
 8000278:	4b7a      	ldr	r3, [pc, #488]	@ (8000464 <main+0x24c>)
 800027a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800027e:	615a      	str	r2, [r3, #20]

  TxHeader.Identifier = 0x100; //id
 8000280:	4b79      	ldr	r3, [pc, #484]	@ (8000468 <main+0x250>)
 8000282:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000286:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000288:	4b77      	ldr	r3, [pc, #476]	@ (8000468 <main+0x250>)
 800028a:	2200      	movs	r2, #0
 800028c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800028e:	4b76      	ldr	r3, [pc, #472]	@ (8000468 <main+0x250>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000294:	4b74      	ldr	r3, [pc, #464]	@ (8000468 <main+0x250>)
 8000296:	2208      	movs	r2, #8
 8000298:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800029a:	4b73      	ldr	r3, [pc, #460]	@ (8000468 <main+0x250>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_FRAME_FD_NO_BRS; //FDCAN_FRAME_FD_NO_BRS; //FDCAN_BRS_ON;
 80002a0:	4b71      	ldr	r3, [pc, #452]	@ (8000468 <main+0x250>)
 80002a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002a6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN; //FDCAN_FD_CAN;
 80002a8:	4b6f      	ldr	r3, [pc, #444]	@ (8000468 <main+0x250>)
 80002aa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002ae:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80002b0:	4b6d      	ldr	r3, [pc, #436]	@ (8000468 <main+0x250>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80002b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000468 <main+0x250>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]

  HAL_FDCAN_ConfigFilter(&hfdcan1,&FDCAN_Fil1);
 80002bc:	4969      	ldr	r1, [pc, #420]	@ (8000464 <main+0x24c>)
 80002be:	486b      	ldr	r0, [pc, #428]	@ (800046c <main+0x254>)
 80002c0:	f001 fc87 	bl	8001bd2 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT, DISABLE, DISABLE);
 80002c4:	2300      	movs	r3, #0
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2300      	movs	r3, #0
 80002ca:	2202      	movs	r2, #2
 80002cc:	2100      	movs	r1, #0
 80002ce:	4867      	ldr	r0, [pc, #412]	@ (800046c <main+0x254>)
 80002d0:	f001 fcd9 	bl	8001c86 <HAL_FDCAN_ConfigGlobalFilter>
//  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
//  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80002d4:	2200      	movs	r2, #0
 80002d6:	2101      	movs	r1, #1
 80002d8:	4864      	ldr	r0, [pc, #400]	@ (800046c <main+0x254>)
 80002da:	f001 ff57 	bl	800218c <HAL_FDCAN_ActivateNotification>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <main+0xd0>
  {
    Error_Handler();
 80002e4:	f000 fda8 	bl	8000e38 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 5, 0) != HAL_OK)
 80002e8:	2200      	movs	r2, #0
 80002ea:	2105      	movs	r1, #5
 80002ec:	485f      	ldr	r0, [pc, #380]	@ (800046c <main+0x254>)
 80002ee:	f001 fcfb 	bl	8001ce8 <HAL_FDCAN_ConfigTxDelayCompensation>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <main+0xe4>
  {
    Error_Handler();
 80002f8:	f000 fd9e 	bl	8000e38 <Error_Handler>
  }
  if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 80002fc:	485b      	ldr	r0, [pc, #364]	@ (800046c <main+0x254>)
 80002fe:	f001 fd15 	bl	8001d2c <HAL_FDCAN_EnableTxDelayCompensation>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <main+0xf4>
  {
    Error_Handler();
 8000308:	f000 fd96 	bl	8000e38 <Error_Handler>
  }
  HAL_FDCAN_Start(&hfdcan1);
 800030c:	4857      	ldr	r0, [pc, #348]	@ (800046c <main+0x254>)
 800030e:	f001 fd2e 	bl	8001d6e <HAL_FDCAN_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000318:	4855      	ldr	r0, [pc, #340]	@ (8000470 <main+0x258>)
 800031a:	f003 f88f 	bl	800343c <HAL_GPIO_WritePin>
  // Check if the system has resumed from StandBy mode
  //if ( __HAL_PWR_GET_FLAG(PWR_FLAG_WUF2) !=  2 || READ_REG( TAMP->BKP14R) == 0xBEEFBEEF) {
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET)  || (READ_REG(TAMP->BKP14R) == 0xBEEFBEEF))//只要是上電復位或是剛剛在standby mode就再進去一次
 800031e:	4b50      	ldr	r3, [pc, #320]	@ (8000460 <main+0x248>)
 8000320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000328:	2b00      	cmp	r3, #0
 800032a:	d105      	bne.n	8000338 <main+0x120>
 800032c:	4b51      	ldr	r3, [pc, #324]	@ (8000474 <main+0x25c>)
 800032e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000332:	4a51      	ldr	r2, [pc, #324]	@ (8000478 <main+0x260>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d10d      	bne.n	8000354 <main+0x13c>
  {
	  WRITE_REG(TAMP->BKP14R, 0x00000000);
 8000338:	4b4e      	ldr	r3, [pc, #312]	@ (8000474 <main+0x25c>)
 800033a:	2200      	movs	r2, #0
 800033c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	  __HAL_RCC_CLEAR_RESET_FLAGS();//清除當前的復位標誌，所以不用加參數
 8000340:	4b47      	ldr	r3, [pc, #284]	@ (8000460 <main+0x248>)
 8000342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000346:	4a46      	ldr	r2, [pc, #280]	@ (8000460 <main+0x248>)
 8000348:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800034c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
		{
		  Error_Handler();
		}
	HAL_Delay(200);*/
      //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
      Standby(); //enter again  //不要用__HAL_PWR_GET_FLAG(PWR_FLAG_WUF2)
 8000350:	f000 fcde 	bl	8000d10 <Standby>
  		{
  		  Error_Handler();
  		}
  HAL_Delay(200);*/
  //if(*(volatile uint32_t*)Ram_Flag != 0xBEEFBEEF){
  if (READ_REG( TAMP->BKP15R ) != 0xBEEFBEEF)//不是standby
 8000354:	4b47      	ldr	r3, [pc, #284]	@ (8000474 <main+0x25c>)
 8000356:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800035a:	4a47      	ldr	r2, [pc, #284]	@ (8000478 <main+0x260>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d009      	beq.n	8000374 <main+0x15c>
/*		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Txtest1) != HAL_OK) //write rear will receive error message
		{
		  Error_Handler();
		}
	HAL_Delay(200);*/
	  MX_IWDG_Init();//在這裡才init所以記得在ioc設定關掉自動生成iwdg call
 8000360:	f000 f952 	bl	8000608 <MX_IWDG_Init>
	  if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)//Refresh IWDG: reload counter
 8000364:	4845      	ldr	r0, [pc, #276]	@ (800047c <main+0x264>)
 8000366:	f003 f8d0 	bl	800350a <HAL_IWDG_Refresh>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <main+0x15c>
	  {
	    Error_Handler();// Refresh Error
 8000370:	f000 fd62 	bl	8000e38 <Error_Handler>
	  }
  }
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET))
 8000374:	4b3a      	ldr	r3, [pc, #232]	@ (8000460 <main+0x248>)
 8000376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800037a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800037e:	2b00      	cmp	r3, #0
 8000380:	d014      	beq.n	80003ac <main+0x194>
  {
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 8000382:	4b37      	ldr	r3, [pc, #220]	@ (8000460 <main+0x248>)
 8000384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000388:	4a35      	ldr	r2, [pc, #212]	@ (8000460 <main+0x248>)
 800038a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800038e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, IWDGError) != HAL_OK) //write rear will receive error message
 8000392:	4a3b      	ldr	r2, [pc, #236]	@ (8000480 <main+0x268>)
 8000394:	4934      	ldr	r1, [pc, #208]	@ (8000468 <main+0x250>)
 8000396:	4835      	ldr	r0, [pc, #212]	@ (800046c <main+0x254>)
 8000398:	f001 fd81 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <main+0x18e>
	  {
	    Error_Handler();
 80003a2:	f000 fd49 	bl	8000e38 <Error_Handler>
	  }
	  HAL_Delay(100);
 80003a6:	2064      	movs	r0, #100	@ 0x64
 80003a8:	f000 ff2c 	bl	8001204 <HAL_Delay>
	      {
	        Error_Handler();
	      }*/
	  	//*(volatile uint32_t*)Ram_Flag = 0xDEADDAAD;
		  //if(*(volatile uint32_t*)Ram_Flag == 0xDEADBEEF){//16進制不分大小寫
	      if (READ_REG( TAMP->BKP15R) == 0xDEADBEEF)
 80003ac:	4b31      	ldr	r3, [pc, #196]	@ (8000474 <main+0x25c>)
 80003ae:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80003b2:	4a34      	ldr	r2, [pc, #208]	@ (8000484 <main+0x26c>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d114      	bne.n	80003e2 <main+0x1ca>
	      {
			  load_APP_flag = 0;
 80003b8:	4b33      	ldr	r3, [pc, #204]	@ (8000488 <main+0x270>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
			  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxBL) != HAL_OK) //write rear will receive error message
 80003be:	4a33      	ldr	r2, [pc, #204]	@ (800048c <main+0x274>)
 80003c0:	4929      	ldr	r1, [pc, #164]	@ (8000468 <main+0x250>)
 80003c2:	482a      	ldr	r0, [pc, #168]	@ (800046c <main+0x254>)
 80003c4:	f001 fd6b 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <main+0x1ba>
			  {
				Error_Handler();
 80003ce:	f000 fd33 	bl	8000e38 <Error_Handler>
			  }
			  WRITE_REG( TAMP->BKP15R, 0x00000000);
 80003d2:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <main+0x25c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
			  HAL_Delay(100);
 80003da:	2064      	movs	r0, #100	@ 0x64
 80003dc:	f000 ff12 	bl	8001204 <HAL_Delay>
 80003e0:	e033      	b.n	800044a <main+0x232>
			  //*(volatile uint32_t*)Ram_Flag = 0x00000000;

		  }
		  //else if(*(volatile uint32_t*)Ram_Flag == 0xBEEFBEEF){
		  else if (READ_REG( TAMP->BKP15R) == 0xBEEFBEEF)
 80003e2:	4b24      	ldr	r3, [pc, #144]	@ (8000474 <main+0x25c>)
 80003e4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80003e8:	4a23      	ldr	r2, [pc, #140]	@ (8000478 <main+0x260>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d116      	bne.n	800041c <main+0x204>
		  {
			  //*(volatile uint32_t*)Ram_Flag = 0x00000000;
			  load_APP_flag = 0;
 80003ee:	4b26      	ldr	r3, [pc, #152]	@ (8000488 <main+0x270>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
			  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
			  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Txstandby) != HAL_OK) //write rear will receive error message
 80003f4:	4a26      	ldr	r2, [pc, #152]	@ (8000490 <main+0x278>)
 80003f6:	491c      	ldr	r1, [pc, #112]	@ (8000468 <main+0x250>)
 80003f8:	481c      	ldr	r0, [pc, #112]	@ (800046c <main+0x254>)
 80003fa:	f001 fd50 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <main+0x1f0>
			  {
				Error_Handler();
 8000404:	f000 fd18 	bl	8000e38 <Error_Handler>
		      }
			  //*(volatile uint32_t*)Ram_Flag = 0x00000000;
		      WRITE_REG( TAMP->BKP15R, 0x00000000);
 8000408:	4b1a      	ldr	r3, [pc, #104]	@ (8000474 <main+0x25c>)
 800040a:	2200      	movs	r2, #0
 800040c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
			  HAL_Delay(100);
 8000410:	2064      	movs	r0, #100	@ 0x64
 8000412:	f000 fef7 	bl	8001204 <HAL_Delay>
			  Standby();
 8000416:	f000 fc7b 	bl	8000d10 <Standby>
 800041a:	e016      	b.n	800044a <main+0x232>
		  }
		  //else if(load_APP_flag == 1 && *(volatile uint32_t*)Ram_Flag != 0xDEADBEEF && *(volatile uint32_t*)Ram_Flag != 0xBEEFBEEF){
		  else if (load_APP_flag == 1 && READ_REG( TAMP->BKP15R) != 0xDEADBEEF && READ_REG( TAMP->BKP15R) != 0xBEEFBEEF)
 800041c:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <main+0x270>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	b2db      	uxtb	r3, r3
 8000422:	2b01      	cmp	r3, #1
 8000424:	d111      	bne.n	800044a <main+0x232>
 8000426:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <main+0x25c>)
 8000428:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800042c:	4a15      	ldr	r2, [pc, #84]	@ (8000484 <main+0x26c>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d00b      	beq.n	800044a <main+0x232>
 8000432:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <main+0x25c>)
 8000434:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8000438:	4a0f      	ldr	r2, [pc, #60]	@ (8000478 <main+0x260>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d005      	beq.n	800044a <main+0x232>
		  {
			  load_APP_flag = 0;
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <main+0x270>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
			  Iap_Load_App(FLASH_APP_ADDR);
 8000444:	4813      	ldr	r0, [pc, #76]	@ (8000494 <main+0x27c>)
 8000446:	f000 fa59 	bl	80008fc <Iap_Load_App>
		  }
		  else
		  {
		  }
		  if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)//Refresh IWDG: reload counter
 800044a:	480c      	ldr	r0, [pc, #48]	@ (800047c <main+0x264>)
 800044c:	f003 f85d 	bl	800350a <HAL_IWDG_Refresh>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0aa      	beq.n	80003ac <main+0x194>
		  {
		      Error_Handler();// Refresh Error
 8000456:	f000 fcef 	bl	8000e38 <Error_Handler>
	      if (READ_REG( TAMP->BKP15R) == 0xDEADBEEF)
 800045a:	e7a7      	b.n	80003ac <main+0x194>
 800045c:	e000ed00 	.word	0xe000ed00
 8000460:	40021000 	.word	0x40021000
 8000464:	200001e8 	.word	0x200001e8
 8000468:	200001c4 	.word	0x200001c4
 800046c:	200000d4 	.word	0x200000d4
 8000470:	48001400 	.word	0x48001400
 8000474:	40002400 	.word	0x40002400
 8000478:	beefbeef 	.word	0xbeefbeef
 800047c:	20000138 	.word	0x20000138
 8000480:	20000060 	.word	0x20000060
 8000484:	deadbeef 	.word	0xdeadbeef
 8000488:	20000004 	.word	0x20000004
 800048c:	20000028 	.word	0x20000028
 8000490:	20000030 	.word	0x20000030
 8000494:	08008000 	.word	0x08008000

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b094      	sub	sp, #80	@ 0x50
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	2238      	movs	r2, #56	@ 0x38
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f004 fa66 	bl	8004978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004ba:	2000      	movs	r0, #0
 80004bc:	f003 f8a6 	bl	800360c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004c0:	230a      	movs	r3, #10
 80004c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ca:	2340      	movs	r3, #64	@ 0x40
 80004cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d6:	2302      	movs	r3, #2
 80004d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004da:	2301      	movs	r3, #1
 80004dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80004de:	2314      	movs	r3, #20
 80004e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fafc 	bl	8003af0 <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004fe:	f000 fc9b 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2303      	movs	r3, #3
 8000508:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2104      	movs	r1, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fdfa 	bl	8004114 <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000526:	f000 fc87 	bl	8000e38 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3750      	adds	r7, #80	@ 0x50
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_CRC_Init+0x3c>)
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <MX_CRC_Init+0x40>)
 800053c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_CRC_Init+0x3c>)
 8000540:	2200      	movs	r2, #0
 8000542:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_CRC_Init+0x3c>)
 8000546:	2200      	movs	r2, #0
 8000548:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_CRC_Init+0x3c>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_CRC_Init+0x3c>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_CRC_Init+0x3c>)
 8000558:	2201      	movs	r2, #1
 800055a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <MX_CRC_Init+0x3c>)
 800055e:	f000 ffb5 	bl	80014cc <HAL_CRC_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000568:	f000 fc66 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000b0 	.word	0x200000b0
 8000574:	40023000 	.word	0x40023000

08000578 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800057c:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 800057e:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <MX_FDCAN1_Init+0x8c>)
 8000580:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV8;
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 8000584:	2204      	movs	r2, #4
 8000586:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000588:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 800058a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800058e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000590:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000596:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 8000598:	2200      	movs	r2, #0
 800059a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 800059e:	2201      	movs	r2, #1
 80005a0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005b6:	220f      	movs	r2, #15
 80005b8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005bc:	2204      	movs	r2, #4
 80005be:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005ce:	220f      	movs	r2, #15
 80005d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005d4:	2204      	movs	r2, #4
 80005d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005da:	2200      	movs	r2, #0
 80005dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_FDCAN1_Init+0x88>)
 80005ec:	f001 f974 	bl	80018d8 <HAL_FDCAN_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80005f6:	f000 fc1f 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000d4 	.word	0x200000d4
 8000604:	40006400 	.word	0x40006400

08000608 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_IWDG_Init+0x34>)
 800060e:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <MX_IWDG_Init+0x38>)
 8000610:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <MX_IWDG_Init+0x34>)
 8000614:	2205      	movs	r2, #5
 8000616:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_IWDG_Init+0x34>)
 800061a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800061e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1250;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_IWDG_Init+0x34>)
 8000622:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000626:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_IWDG_Init+0x34>)
 800062a:	f002 ff1f 	bl	800346c <HAL_IWDG_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000634:	f000 fc00 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000138 	.word	0x20000138
 8000640:	40003000 	.word	0x40003000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_GPIO_Init+0xac>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <MX_GPIO_Init+0xac>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_GPIO_Init+0xac>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_GPIO_Init+0xac>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	@ (80006f0 <MX_GPIO_Init+0xac>)
 8000678:	f043 0320 	orr.w	r3, r3, #32
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_GPIO_Init+0xac>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0320 	and.w	r3, r3, #32
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_GPIO_Init+0xac>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <MX_GPIO_Init+0xac>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_GPIO_Init+0xac>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006a8:	4812      	ldr	r0, [pc, #72]	@ (80006f4 <MX_GPIO_Init+0xb0>)
 80006aa:	f002 fec7 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_GPIO_Init+0xb4>)
 80006c6:	f002 fc55 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_GPIO_Init+0xb0>)
 80006e4:	f002 fc46 	bl	8002f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48001400 	.word	0x48001400
 80006f8:	48000800 	.word	0x48000800

080006fc <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcanRx1, uint32_t RxFifo0ITs)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af02      	add	r7, sp, #8
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_GetRxMessage(hfdcanRx1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000706:	4b6d      	ldr	r3, [pc, #436]	@ (80008bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8000708:	4a6d      	ldr	r2, [pc, #436]	@ (80008c0 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800070a:	2140      	movs	r1, #64	@ 0x40
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f001 fc35 	bl	8001f7c <HAL_FDCAN_GetRxMessage>
	switch(RxHeader.Identifier)
 8000712:	4b6b      	ldr	r3, [pc, #428]	@ (80008c0 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b10      	cmp	r3, #16
 8000718:	d82a      	bhi.n	8000770 <HAL_FDCAN_RxFifo0Callback+0x74>
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 80b6 	beq.w	800088c <HAL_FDCAN_RxFifo0Callback+0x190>
 8000720:	3b01      	subs	r3, #1
 8000722:	2b0f      	cmp	r3, #15
 8000724:	f200 80b2 	bhi.w	800088c <HAL_FDCAN_RxFifo0Callback+0x190>
 8000728:	a201      	add	r2, pc, #4	@ (adr r2, 8000730 <HAL_FDCAN_RxFifo0Callback+0x34>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	0800077b 	.word	0x0800077b
 8000734:	0800088d 	.word	0x0800088d
 8000738:	0800088d 	.word	0x0800088d
 800073c:	0800088d 	.word	0x0800088d
 8000740:	08000793 	.word	0x08000793
 8000744:	080007d7 	.word	0x080007d7
 8000748:	08000807 	.word	0x08000807
 800074c:	0800088d 	.word	0x0800088d
 8000750:	0800088d 	.word	0x0800088d
 8000754:	0800088d 	.word	0x0800088d
 8000758:	0800088d 	.word	0x0800088d
 800075c:	0800088d 	.word	0x0800088d
 8000760:	0800088d 	.word	0x0800088d
 8000764:	0800088d 	.word	0x0800088d
 8000768:	0800088d 	.word	0x0800088d
 800076c:	08000855 	.word	0x08000855
 8000770:	f240 1211 	movw	r2, #273	@ 0x111
 8000774:	4293      	cmp	r3, r2
 8000776:	d04a      	beq.n	800080e <HAL_FDCAN_RxFifo0Callback+0x112>
 8000778:	e088      	b.n	800088c <HAL_FDCAN_RxFifo0Callback+0x190>
	{
		case 0x01:
	        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxFW) != HAL_OK)
 800077a:	4a52      	ldr	r2, [pc, #328]	@ (80008c4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800077c:	4952      	ldr	r1, [pc, #328]	@ (80008c8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800077e:	4853      	ldr	r0, [pc, #332]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000780:	f001 fb8d 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	f000 808b 	beq.w	80008a2 <HAL_FDCAN_RxFifo0Callback+0x1a6>
	        {
	          Error_Handler();
 800078c:	f000 fb54 	bl	8000e38 <Error_Handler>
	        }
			break;
 8000790:	e087      	b.n	80008a2 <HAL_FDCAN_RxFifo0Callback+0x1a6>
		case 0x05:
	    	load_APP_flag = 0;
 8000792:	4b4f      	ldr	r3, [pc, #316]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	    	Iap_Write_AppBin(RxData, 64, CountAddr, APPLength, 8);
 8000798:	4b4e      	ldr	r3, [pc, #312]	@ (80008d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b4e      	ldr	r3, [pc, #312]	@ (80008d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2108      	movs	r1, #8
 80007a2:	9100      	str	r1, [sp, #0]
 80007a4:	2140      	movs	r1, #64	@ 0x40
 80007a6:	4845      	ldr	r0, [pc, #276]	@ (80008bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80007a8:	f000 f976 	bl	8000a98 <Iap_Write_AppBin>
	    	CountAddr += 64;
 80007ac:	4b49      	ldr	r3, [pc, #292]	@ (80008d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3340      	adds	r3, #64	@ 0x40
 80007b2:	4a48      	ldr	r2, [pc, #288]	@ (80008d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80007b4:	6013      	str	r3, [r2, #0]
	        APPLength += 64;       //RxHeader.DataLength不是64不要用這個  #define FDCAN_DLC_BYTES_64 ((uint32_t)0x0000000FU) 所以只有byte==8時才可以用
 80007b6:	4b48      	ldr	r3, [pc, #288]	@ (80008d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3340      	adds	r3, #64	@ 0x40
 80007bc:	4a46      	ldr	r2, [pc, #280]	@ (80008d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80007be:	6013      	str	r3, [r2, #0]
	        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxACK) != HAL_OK)
 80007c0:	4a46      	ldr	r2, [pc, #280]	@ (80008dc <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80007c2:	4941      	ldr	r1, [pc, #260]	@ (80008c8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80007c4:	4841      	ldr	r0, [pc, #260]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80007c6:	f001 fb6a 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d06a      	beq.n	80008a6 <HAL_FDCAN_RxFifo0Callback+0x1aa>
	        {
	          Error_Handler();
 80007d0:	f000 fb32 	bl	8000e38 <Error_Handler>
	        }
			break;
 80007d4:	e067      	b.n	80008a6 <HAL_FDCAN_RxFifo0Callback+0x1aa>
		case 0x06:
	    	load_APP_flag = 1;
 80007d6:	4b3e      	ldr	r3, [pc, #248]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
	    	Iap_Write_AppBin(RxData, 64, CountAddr, APPLength, 8);//
 80007dc:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b3d      	ldr	r3, [pc, #244]	@ (80008d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2108      	movs	r1, #8
 80007e6:	9100      	str	r1, [sp, #0]
 80007e8:	2140      	movs	r1, #64	@ 0x40
 80007ea:	4834      	ldr	r0, [pc, #208]	@ (80008bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80007ec:	f000 f954 	bl	8000a98 <Iap_Write_AppBin>
			CountAddr += 64;
 80007f0:	4b38      	ldr	r3, [pc, #224]	@ (80008d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3340      	adds	r3, #64	@ 0x40
 80007f6:	4a37      	ldr	r2, [pc, #220]	@ (80008d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80007f8:	6013      	str	r3, [r2, #0]
	        APPLength += 64;
 80007fa:	4b37      	ldr	r3, [pc, #220]	@ (80008d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3340      	adds	r3, #64	@ 0x40
 8000800:	4a35      	ldr	r2, [pc, #212]	@ (80008d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8000802:	6013      	str	r3, [r2, #0]
			break;
 8000804:	e056      	b.n	80008b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>
		case 0x07:
			load_APP_flag = 1;
 8000806:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
			break;
 800080c:	e052      	b.n	80008b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>
/*		case 0x08:
			WRITE_REG( TAMP->BKP14R, 0xBEEFBEEF);
			WRITE_REG( TAMP->BKP15R, 0xBEEFBEEF);
			break;*/
		case 0x111:
			if(RxData[0]==14)
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b0e      	cmp	r3, #14
 8000814:	d104      	bne.n	8000820 <HAL_FDCAN_RxFifo0Callback+0x124>
			{
		        //*(volatile uint32_t*)Ram_Flag = 0xBEEFBEEF;
		        WRITE_REG( TAMP->BKP15R, 0xBEEFBEEF);
 8000816:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8000818:	4a32      	ldr	r2, [pc, #200]	@ (80008e4 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800081a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxCommandError) != HAL_OK)
				{
				  Error_Handler();
				}
			}
	        break;
 800081e:	e044      	b.n	80008aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
			else if(RxData[0]==3)
 8000820:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d10a      	bne.n	800083e <HAL_FDCAN_RxFifo0Callback+0x142>
		        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxHW) != HAL_OK)
 8000828:	4a2f      	ldr	r2, [pc, #188]	@ (80008e8 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 800082a:	4927      	ldr	r1, [pc, #156]	@ (80008c8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800082c:	4827      	ldr	r0, [pc, #156]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800082e:	f001 fb36 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d038      	beq.n	80008aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
		          Error_Handler();
 8000838:	f000 fafe 	bl	8000e38 <Error_Handler>
	        break;
 800083c:	e035      	b.n	80008aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxCommandError) != HAL_OK)
 800083e:	4a2b      	ldr	r2, [pc, #172]	@ (80008ec <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8000840:	4921      	ldr	r1, [pc, #132]	@ (80008c8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8000842:	4822      	ldr	r0, [pc, #136]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000844:	f001 fb2b 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d02d      	beq.n	80008aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
				  Error_Handler();
 800084e:	f000 faf3 	bl	8000e38 <Error_Handler>
	        break;
 8000852:	e02a      	b.n	80008aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
		case 0x10:
	        uint32_t u32TxFifoRqst = HAL_FDCAN_GetLatestTxFifoQRequestBuffer(&hfdcan1);
 8000854:	481d      	ldr	r0, [pc, #116]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000856:	f001 fb66 	bl	8001f26 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>
 800085a:	60f8      	str	r0, [r7, #12]
	        HAL_FDCAN_AbortTxRequest(&hfdcan1, u32TxFifoRqst);
 800085c:	68f9      	ldr	r1, [r7, #12]
 800085e:	481b      	ldr	r0, [pc, #108]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000860:	f001 fb6d 	bl	8001f3e <HAL_FDCAN_AbortTxRequest>
			load_APP_flag = 0;
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
			CountAddr = FLASH_APP_ADDR;
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800086c:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 800086e:	601a      	str	r2, [r3, #0]
	        APPLength = 0;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
	        //WRITE_REG( TAMP->BKP15R, 0x00000000);
	        //*(volatile uint32_t*)Ram_Flag = 0x00000000;//不能清，清了會直接跳到APP
	        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxRstOK) != HAL_OK)
 8000876:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8000878:	4913      	ldr	r1, [pc, #76]	@ (80008c8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800087a:	4814      	ldr	r0, [pc, #80]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800087c:	f001 fb0f 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d013      	beq.n	80008ae <HAL_FDCAN_RxFifo0Callback+0x1b2>
	        {
	          Error_Handler();
 8000886:	f000 fad7 	bl	8000e38 <Error_Handler>
	        }
			break;
 800088a:	e010      	b.n	80008ae <HAL_FDCAN_RxFifo0Callback+0x1b2>
		default:
	        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxIDerror) != HAL_OK)
 800088c:	4a1a      	ldr	r2, [pc, #104]	@ (80008f8 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 800088e:	490e      	ldr	r1, [pc, #56]	@ (80008c8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8000890:	480e      	ldr	r0, [pc, #56]	@ (80008cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000892:	f001 fb04 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00a      	beq.n	80008b2 <HAL_FDCAN_RxFifo0Callback+0x1b6>
	        {
	          Error_Handler();
 800089c:	f000 facc 	bl	8000e38 <Error_Handler>
	        }
	        break;
 80008a0:	e007      	b.n	80008b2 <HAL_FDCAN_RxFifo0Callback+0x1b6>
			break;
 80008a2:	bf00      	nop
 80008a4:	e006      	b.n	80008b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>
			break;
 80008a6:	bf00      	nop
 80008a8:	e004      	b.n	80008b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>
	        break;
 80008aa:	bf00      	nop
 80008ac:	e002      	b.n	80008b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>
			break;
 80008ae:	bf00      	nop
 80008b0:	e000      	b.n	80008b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>
	        break;
 80008b2:	bf00      	nop
	}*/
/*	if(RxHeader.Identifier == 0x02)
	{
		test_standby_flag = 1;
	}*/
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000015c 	.word	0x2000015c
 80008c0:	2000019c 	.word	0x2000019c
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200001c4 	.word	0x200001c4
 80008cc:	200000d4 	.word	0x200000d4
 80008d0:	20000004 	.word	0x20000004
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000148 	.word	0x20000148
 80008dc:	20000018 	.word	0x20000018
 80008e0:	40002400 	.word	0x40002400
 80008e4:	beefbeef 	.word	0xbeefbeef
 80008e8:	20000010 	.word	0x20000010
 80008ec:	20000058 	.word	0x20000058
 80008f0:	08008000 	.word	0x08008000
 80008f4:	20000038 	.word	0x20000038
 80008f8:	20000050 	.word	0x20000050

080008fc <Iap_Load_App>:
void Iap_Load_App(uint32_t appxaddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	//HAL_Delay(2000);
	uint32_t Length_Addr = *(uint32_t*)LENGTH_ADDR;//存在08008024 uint32_t代表只讀4個bytes
 8000904:	4b54      	ldr	r3, [pc, #336]	@ (8000a58 <Iap_Load_App+0x15c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	61bb      	str	r3, [r7, #24]
		//uint32_t crccrc = 0;
	if( Length_Addr != 0xFFFFFFFF && Length_Addr != 0x00000000 )
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000910:	f000 8090 	beq.w	8000a34 <Iap_Load_App+0x138>
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	2b00      	cmp	r3, #0
 8000918:	f000 808c 	beq.w	8000a34 <Iap_Load_App+0x138>
	{  //  *STM32_FLASH_TAIL will error  because  is number not address 一次拿32個bit LENGTH_ADDR
		//uint32_t crc_value_2 = Do_CRC_Table( ( uint8_t*)FLASH_APP_ADDR , Length_Addr); this line is ok
		uint32_t crc_value_2 = HAL_CRC_Calculate(&hcrc, (uint32_t*)FLASH_APP_ADDR, Length_Addr)^0xFFFFFFFF;
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	494f      	ldr	r1, [pc, #316]	@ (8000a5c <Iap_Load_App+0x160>)
 8000920:	484f      	ldr	r0, [pc, #316]	@ (8000a60 <Iap_Load_App+0x164>)
 8000922:	f000 fe37 	bl	8001594 <HAL_CRC_Calculate>
 8000926:	4603      	mov	r3, r0
 8000928:	43db      	mvns	r3, r3
 800092a:	617b      	str	r3, [r7, #20]
		if( *( uint32_t*)(FLASH_APP_ADDR + Length_Addr) != crc_value_2)
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000932:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	429a      	cmp	r2, r3
 800093c:	d00d      	beq.n	800095a <Iap_Load_App+0x5e>
				test_value = Length_Addr % 10;
				TxData[k] = test_value;
				Length_Addr /= 10;
				k++;
			}*/
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxCRCerror) != HAL_OK)
 800093e:	4a49      	ldr	r2, [pc, #292]	@ (8000a64 <Iap_Load_App+0x168>)
 8000940:	4949      	ldr	r1, [pc, #292]	@ (8000a68 <Iap_Load_App+0x16c>)
 8000942:	484a      	ldr	r0, [pc, #296]	@ (8000a6c <Iap_Load_App+0x170>)
 8000944:	f001 faab 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <Iap_Load_App+0x56>
			{
			  Error_Handler();
 800094e:	f000 fa73 	bl	8000e38 <Error_Handler>
			}
			HAL_Delay(100);
 8000952:	2064      	movs	r0, #100	@ 0x64
 8000954:	f000 fc56 	bl	8001204 <HAL_Delay>
			return;
 8000958:	e07a      	b.n	8000a50 <Iap_Load_App+0x154>
		}
		else
		{
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxGoToAPP) != HAL_OK) //if write rear will receive error mesage
 800095a:	4a45      	ldr	r2, [pc, #276]	@ (8000a70 <Iap_Load_App+0x174>)
 800095c:	4942      	ldr	r1, [pc, #264]	@ (8000a68 <Iap_Load_App+0x16c>)
 800095e:	4843      	ldr	r0, [pc, #268]	@ (8000a6c <Iap_Load_App+0x170>)
 8000960:	f001 fa9d 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <Iap_Load_App+0x72>
			{
			  Error_Handler();
 800096a:	f000 fa65 	bl	8000e38 <Error_Handler>
			}
			HAL_Delay(100);
 800096e:	2064      	movs	r0, #100	@ 0x64
 8000970:	f000 fc48 	bl	8001204 <HAL_Delay>
		    if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)//Refresh IWDG: reload counter
 8000974:	483f      	ldr	r0, [pc, #252]	@ (8000a74 <Iap_Load_App+0x178>)
 8000976:	f002 fdc8 	bl	800350a <HAL_IWDG_Refresh>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <Iap_Load_App+0x88>
		    {
		      Error_Handler();// Refresh Error
 8000980:	f000 fa5a 	bl	8000e38 <Error_Handler>
		    }
			//if(((*(volatile uint32_t*)appxaddr)&0x2FFE0000)==0x20000000)	//
			//{
		        /* */
			jump2app=(iapfun)*(volatile uint32_t*)(appxaddr+4);//appxaddr = 0x08008000                                           //(iapfun)函數指針 (vu32*)是轉型態 *取出該地址的內容
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3304      	adds	r3, #4
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a78 <Iap_Load_App+0x17c>)
 800098e:	601a      	str	r2, [r3, #0]
			 /* Disable all interrupts */
			HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
 8000990:	2015      	movs	r0, #21
 8000992:	f000 fd80 	bl	8001496 <HAL_NVIC_DisableIRQ>
			HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8000996:	2101      	movs	r1, #1
 8000998:	4834      	ldr	r0, [pc, #208]	@ (8000a6c <Iap_Load_App+0x170>)
 800099a:	f001 fcdd 	bl	8002358 <HAL_FDCAN_DeactivateNotification>
			HAL_FDCAN_DeInit(&hfdcan1);
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <Iap_Load_App+0x170>)
 80009a0:	f001 f8f4 	bl	8001b8c <HAL_FDCAN_DeInit>
			HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 80009a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a8:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <Iap_Load_App+0x180>)
 80009aa:	f002 fc65 	bl	8003278 <HAL_GPIO_DeInit>
			HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 80009ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b2:	4833      	ldr	r0, [pc, #204]	@ (8000a80 <Iap_Load_App+0x184>)
 80009b4:	f002 fc60 	bl	8003278 <HAL_GPIO_DeInit>
			//HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
			//HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
			//HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
			HAL_PWR_DisableBkUpAccess();
 80009b8:	f002 fdc8 	bl	800354c <HAL_PWR_DisableBkUpAccess>
			__HAL_RCC_PWR_CLK_DISABLE();
 80009bc:	4b31      	ldr	r3, [pc, #196]	@ (8000a84 <Iap_Load_App+0x188>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c0:	4a30      	ldr	r2, [pc, #192]	@ (8000a84 <Iap_Load_App+0x188>)
 80009c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	6593      	str	r3, [r2, #88]	@ 0x58
			//HAL_RTC_DeInit(&hrtc);
			//HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
			//HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1);
			HAL_DeInit();
 80009c8:	f000 fb90 	bl	80010ec <HAL_DeInit>
			//__disable_irq();//Daniel doesn't like it.
																											//__set_PRIMASK(1); //__disable_irq();
			/* Set the clock to the default state */
			HAL_RCC_DeInit();
 80009cc:	f003 f80e 	bl	80039ec <HAL_RCC_DeInit>
			//HAL_SuspendTick();//SysTick->CTRL我認為和SysTick->CTRL一樣的意思
			/* Disable Systick timer */
			SysTick->CTRL = 0;//0: counter disabled 1: counter enabled.
 80009d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <Iap_Load_App+0x18c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
			SysTick->LOAD = 0;
 80009d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <Iap_Load_App+0x18c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
			SysTick->VAL = 0;
 80009dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <Iap_Load_App+0x18c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
			/* Clear Interrupt Enable Register & Interrupt Pending Register */
			for (uint16_t i = 0; i < sizeof(NVIC->ICER)/sizeof(NVIC->ICER[0]); i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	83fb      	strh	r3, [r7, #30]
 80009e6:	e010      	b.n	8000a0a <Iap_Load_App+0x10e>
			{
				NVIC->ICER[i]=0xFFFFFFFF;
 80009e8:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <Iap_Load_App+0x190>)
 80009ea:	8bfb      	ldrh	r3, [r7, #30]
 80009ec:	3320      	adds	r3, #32
 80009ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				NVIC->ICPR[i]=0xFFFFFFFF;
 80009f6:	4a25      	ldr	r2, [pc, #148]	@ (8000a8c <Iap_Load_App+0x190>)
 80009f8:	8bfb      	ldrh	r3, [r7, #30]
 80009fa:	3360      	adds	r3, #96	@ 0x60
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint16_t i = 0; i < sizeof(NVIC->ICER)/sizeof(NVIC->ICER[0]); i++)
 8000a04:	8bfb      	ldrh	r3, [r7, #30]
 8000a06:	3301      	adds	r3, #1
 8000a08:	83fb      	strh	r3, [r7, #30]
 8000a0a:	8bfb      	ldrh	r3, [r7, #30]
 8000a0c:	2b07      	cmp	r3, #7
 8000a0e:	d9eb      	bls.n	80009e8 <Iap_Load_App+0xec>
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f383 8814 	msr	CONTROL, r3
}
 8000a1a:	bf00      	nop
			}
																											  /* Re-enable all interrupts */
																									 // __enable_irq();		        //__set_PRIMASK(0);
			/*  RTOS Set the MSP*/
			__set_CONTROL(0);
			__set_MSP(*(volatile uint32_t*)appxaddr);					// Set the MSP
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	f383 8808 	msr	MSP, r3
}
 8000a28:	bf00      	nop
			jump2app();									//
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <Iap_Load_App+0x17c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4798      	blx	r3
			while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Iap_Load_App+0x134>
			//}
		}
	}
	else
	{
        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxNoCRC) != HAL_OK)
 8000a34:	4a16      	ldr	r2, [pc, #88]	@ (8000a90 <Iap_Load_App+0x194>)
 8000a36:	490c      	ldr	r1, [pc, #48]	@ (8000a68 <Iap_Load_App+0x16c>)
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <Iap_Load_App+0x170>)
 8000a3a:	f001 fa30 	bl	8001e9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <Iap_Load_App+0x14c>
        {
          Error_Handler();
 8000a44:	f000 f9f8 	bl	8000e38 <Error_Handler>
        }
        HAL_Delay(100);
 8000a48:	2064      	movs	r0, #100	@ 0x64
 8000a4a:	f000 fbdb 	bl	8001204 <HAL_Delay>
		return;
 8000a4e:	bf00      	nop
	}

}
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08008024 	.word	0x08008024
 8000a5c:	08008000 	.word	0x08008000
 8000a60:	200000b0 	.word	0x200000b0
 8000a64:	20000048 	.word	0x20000048
 8000a68:	200001c4 	.word	0x200001c4
 8000a6c:	200000d4 	.word	0x200000d4
 8000a70:	20000020 	.word	0x20000020
 8000a74:	20000138 	.word	0x20000138
 8000a78:	20000200 	.word	0x20000200
 8000a7c:	48001400 	.word	0x48001400
 8000a80:	48000800 	.word	0x48000800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	e000e010 	.word	0xe000e010
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	20000040 	.word	0x20000040
 8000a94:	00000000 	.word	0x00000000

08000a98 <Iap_Write_AppBin>:
void Iap_Write_AppBin(uint8_t *pBuffer, uint16_t NumtoWrite, uint32_t WriteAddr, uint32_t WriteAPPLength, uint8_t WriteToFlashSize)//each byte one address
{
 8000a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a9c:	b094      	sub	sp, #80	@ 0x50
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000aa2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	877b      	strh	r3, [r7, #58]	@ 0x3a
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
    if (WriteAddr < STM32_FLASH_BASE || (WriteAddr >= STM32_FLASH_TAIL))
 8000aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000ab0:	f0c0 811a 	bcc.w	8000ce8 <Iap_Write_AppBin+0x250>
 8000ab4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ab6:	4b92      	ldr	r3, [pc, #584]	@ (8000d00 <Iap_Write_AppBin+0x268>)
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	f080 8115 	bcs.w	8000ce8 <Iap_Write_AppBin+0x250>
    	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    	//HAL_Delay(2000);
        //printf("stack overflow\r\n");
        return;
    }
	if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)//Refresh IWDG: reload counter
 8000abe:	4891      	ldr	r0, [pc, #580]	@ (8000d04 <Iap_Write_AppBin+0x26c>)
 8000ac0:	f002 fd23 	bl	800350a <HAL_IWDG_Refresh>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <Iap_Write_AppBin+0x36>
	{
	    Error_Handler();// Refresh Error
 8000aca:	f000 f9b5 	bl	8000e38 <Error_Handler>
	}
    uint32_t PageError = 0; ////设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
 8000ace:	2300      	movs	r3, #0
 8000ad0:	643b      	str	r3, [r7, #64]	@ 0x40
    //uint32_t FirstPage = 0, NbOfPages = 0, BankNumber = 0;
    //uint32_t Address = 0, PageError = 0; ////设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
    /*One page (2 Kbytes)STM32G474  有双 Bank 功能，且默认情况下 Option Bytes 中的 DBANK =1*/
    //crc = HAL_CRC_Calculate(&hcrc, (u32 *)pBuffer, NumToWrite)^0x00000000;//word size=32bits

    HAL_FLASH_Unlock();
 8000ad2:	f002 f803 	bl	8002adc <HAL_FLASH_Unlock>
    if ((WriteAPPLength % 2048) == 0)
 8000ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d134      	bne.n	8000b4a <Iap_Write_AppBin+0xb2>
    { //two page FLASH_PAGE_SIZE==2048
    	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
  	    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000ae0:	4a89      	ldr	r2, [pc, #548]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	6013      	str	r3, [r2, #0]
  	    EraseInitStruct.NbPages     = 1;
 8000ae6:	4a88      	ldr	r2, [pc, #544]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000ae8:	2301      	movs	r3, #1
 8000aea:	60d3      	str	r3, [r2, #12]
        if (WriteAddr < 0x08040000)
 8000aec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000aee:	4b87      	ldr	r3, [pc, #540]	@ (8000d0c <Iap_Write_AppBin+0x274>)
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d814      	bhi.n	8000b1e <Iap_Write_AppBin+0x86>
        {
        	//FLASH_PageErase( (WriteAddr-FLASH_APP_ADDR)/2048, FLASH_BANK_1); //FLASH_ErasePage法二 //error
  		    EraseInitStruct.Page = (WriteAddr-STM32_FLASH_BASE)/FLASH_PAGE_SIZE;
 8000af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000af6:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000afa:	0ada      	lsrs	r2, r3, #11
 8000afc:	4b82      	ldr	r3, [pc, #520]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000afe:	609a      	str	r2, [r3, #8]
  		    EraseInitStruct.Banks = FLASH_BANK_1;
 8000b00:	4a81      	ldr	r2, [pc, #516]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000b02:	2301      	movs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
        	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000b06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	487e      	ldr	r0, [pc, #504]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000b0e:	f002 f8cf 	bl	8002cb0 <HAL_FLASHEx_Erase>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d018      	beq.n	8000b4a <Iap_Write_AppBin+0xb2>
        	{
        		Error_Handler();
 8000b18:	f000 f98e 	bl	8000e38 <Error_Handler>
 8000b1c:	e015      	b.n	8000b4a <Iap_Write_AppBin+0xb2>
        	}
        }
        else
        {
  		    EraseInitStruct.Page = (WriteAddr-0x08040000)/FLASH_PAGE_SIZE;
 8000b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b20:	f103 4377 	add.w	r3, r3, #4143972352	@ 0xf7000000
 8000b24:	f503 037c 	add.w	r3, r3, #16515072	@ 0xfc0000
 8000b28:	0ada      	lsrs	r2, r3, #11
 8000b2a:	4b77      	ldr	r3, [pc, #476]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000b2c:	609a      	str	r2, [r3, #8]
  		    EraseInitStruct.Banks = FLASH_BANK_2;
 8000b2e:	4a76      	ldr	r2, [pc, #472]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000b30:	2302      	movs	r3, #2
 8000b32:	6053      	str	r3, [r2, #4]
        	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000b34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4873      	ldr	r0, [pc, #460]	@ (8000d08 <Iap_Write_AppBin+0x270>)
 8000b3c:	f002 f8b8 	bl	8002cb0 <HAL_FLASHEx_Erase>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <Iap_Write_AppBin+0xb2>
        	{
        		Error_Handler();
 8000b46:	f000 f977 	bl	8000e38 <Error_Handler>
        		Error_Handler();
        	}
        }*/                                                                                                                 //close
    }
    //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
    uint64_t merge_pBuffer = 0;
 8000b4a:	f04f 0200 	mov.w	r2, #0
 8000b4e:	f04f 0300 	mov.w	r3, #0
 8000b52:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    for (uint16_t i = 0; i < NumtoWrite; i += WriteToFlashSize)
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000b5c:	e0bb      	b.n	8000cd6 <Iap_Write_AppBin+0x23e>
    {//(Address < FLASH_USER_END_ADDR) write 8 byte every time
//    	if (WriteToFlashSize==8)
//    	{
    		merge_pBuffer = 0;
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        	for (uint16_t j=0; j < WriteToFlashSize; j++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8000b70:	e02c      	b.n	8000bcc <Iap_Write_AppBin+0x134>
        	{
        		merge_pBuffer |= (uint64_t)*(pBuffer + j);
 8000b72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2200      	movs	r2, #0
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000b84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	61b9      	str	r1, [r7, #24]
 8000b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b90:	430b      	orrs	r3, r1
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000b98:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        		if (j < (WriteToFlashSize-1))
 8000b9c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000ba0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	da0b      	bge.n	8000bc2 <Iap_Write_AppBin+0x12a>
        		{
        			merge_pBuffer <<= 8; //8 is bit not byte
 8000baa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	f04f 0100 	mov.w	r1, #0
 8000bb6:	0219      	lsls	r1, r3, #8
 8000bb8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000bbc:	0210      	lsls	r0, r2, #8
 8000bbe:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
        	for (uint16_t j=0; j < WriteToFlashSize; j++)
 8000bc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8000bcc:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d3cb      	bcc.n	8000b72 <Iap_Write_AppBin+0xda>
        		}
        	}
        	merge_pBuffer = ((merge_pBuffer << 8) & (0xFF00FF00FF00FF00) ) | ((merge_pBuffer >> 8) & (0x00FF00FF00FF00FF) ); //must have add uint64_t because CPU do 32bit
 8000bda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	f04f 0100 	mov.w	r1, #0
 8000be6:	0219      	lsls	r1, r3, #8
 8000be8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000bec:	0210      	lsls	r0, r2, #8
 8000bee:	f000 23ff 	and.w	r3, r0, #4278255360	@ 0xff00ff00
 8000bf2:	623b      	str	r3, [r7, #32]
 8000bf4:	f001 23ff 	and.w	r3, r1, #4278255360	@ 0xff00ff00
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	f04f 0100 	mov.w	r1, #0
 8000c06:	0a10      	lsrs	r0, r2, #8
 8000c08:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c0c:	0a19      	lsrs	r1, r3, #8
 8000c0e:	f000 1aff 	and.w	sl, r0, #16711935	@ 0xff00ff
 8000c12:	f001 1bff 	and.w	fp, r1, #16711935	@ 0xff00ff
 8000c16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	ea43 030a 	orr.w	r3, r3, sl
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4613      	mov	r3, r2
 8000c24:	ea43 030b 	orr.w	r3, r3, fp
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c2e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        	merge_pBuffer = ((merge_pBuffer << 16) &  (0xFFFF0000FFFF0000) ) | ((merge_pBuffer >> 16) &  (0x0000FFFF0000FFFF) );
 8000c32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	f04f 0100 	mov.w	r1, #0
 8000c3e:	0419      	lsls	r1, r3, #16
 8000c40:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8000c44:	0410      	lsls	r0, r2, #16
 8000c46:	a32c      	add	r3, pc, #176	@ (adr r3, 8000cf8 <Iap_Write_AppBin+0x260>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	ea00 0802 	and.w	r8, r0, r2
 8000c50:	ea01 0903 	and.w	r9, r1, r3
 8000c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	f04f 0100 	mov.w	r1, #0
 8000c60:	0c10      	lsrs	r0, r2, #16
 8000c62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c66:	0c19      	lsrs	r1, r3, #16
 8000c68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c70:	ea00 0402 	and.w	r4, r0, r2
 8000c74:	ea01 0503 	and.w	r5, r1, r3
 8000c78:	ea48 0304 	orr.w	r3, r8, r4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	ea49 0305 	orr.w	r3, r9, r5
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c88:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        	merge_pBuffer = (merge_pBuffer << 32) | (merge_pBuffer >> 32);
 8000c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c98:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
//        	if(WriteAddr != 0x08008020){//關掉保留給crc的位置，因為crc是離線燒進去的
            	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WriteAddr, merge_pBuffer) != HAL_OK)//write 8bytes *(pointer+0)=a[0]
 8000c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000ca0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f001 feae 	bl	8002a04 <HAL_FLASH_Program>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <Iap_Write_AppBin+0x21a>
            	{
            		Error_Handler();
 8000cae:	f000 f8c3 	bl	8000e38 <Error_Handler>
    	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WriteCRCAddr, merge_pBuffer) != HAL_OK)//write 8bytes *(pointer+0)=a[0]
    	{
    		//CRC_BUF = CRC_BUF + i;  重複使用crc_buf
    	}
*/                                                                                                                 //close
    	pBuffer = pBuffer + WriteToFlashSize;
 8000cb2:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8000cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cb8:	4413      	add	r3, r2
 8000cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    	WriteAddr = WriteAddr + WriteToFlashSize;
 8000cbc:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8000cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc2:	4413      	add	r3, r2
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
    for (uint16_t i = 0; i < NumtoWrite; i += WriteToFlashSize)
 8000cc6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000cd0:	4413      	add	r3, r2
 8000cd2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000cd6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8000cda:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f4ff af3e 	bcc.w	8000b5e <Iap_Write_AppBin+0xc6>
		uint64_t crc_value = Do_CRC_Table( ( uint8_t*)FLASH_APP_ADDR , WriteAPPLength);//先寫再算crc，才不會crc error
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WriteAddr, crc_value) != HAL_OK){  //WriteAddr前面已經加了
			Error_Handler();
		}
	}*/
    HAL_FLASH_Lock();
 8000ce2:	f001 ff1d 	bl	8002b20 <HAL_FLASH_Lock>
 8000ce6:	e000      	b.n	8000cea <Iap_Write_AppBin+0x252>
        return;
 8000ce8:	bf00      	nop
}
 8000cea:	3750      	adds	r7, #80	@ 0x50
 8000cec:	46bd      	mov	sp, r7
 8000cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	ffff0000 	.word	0xffff0000
 8000cfc:	ffff0000 	.word	0xffff0000
 8000d00:	0807f000 	.word	0x0807f000
 8000d04:	20000138 	.word	0x20000138
 8000d08:	2000014c 	.word	0x2000014c
 8000d0c:	0803ffff 	.word	0x0803ffff

08000d10 <Standby>:
    {
        crc = (crc >> 8) ^ crc_table[(crc ^ *ptr++) & 0xff];
    }
    return (crc);
}*/
void Standby(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
	HAL_PWREx_EnablePullUpPullDownConfig();//standby mode專用，因為進standby modegpio都會設成類比
 8000d14:	f002 fe4a 	bl	80039ac <HAL_PWREx_EnablePullUpPullDownConfig>
	HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_F, GPIO_PIN_15);
 8000d18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f002 fd19 	bl	8003754 <HAL_PWREx_EnableGPIOPullUp>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_F, PWR_GPIO_BIT_12);
 8000d22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d26:	2005      	movs	r0, #5
 8000d28:	f002 fdaa 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_6);
 8000d2c:	2140      	movs	r1, #64	@ 0x40
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f002 fda6 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>

	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_4);
 8000d34:	2110      	movs	r1, #16
 8000d36:	2001      	movs	r0, #1
 8000d38:	f002 fda2 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_5);
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f002 fd9e 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_9);
 8000d44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f002 fd99 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_0);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2004      	movs	r0, #4
 8000d52:	f002 fd95 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_1);
 8000d56:	2102      	movs	r1, #2
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f002 fd91 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_2);
 8000d5e:	2104      	movs	r1, #4
 8000d60:	2004      	movs	r0, #4
 8000d62:	f002 fd8d 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_3);
 8000d66:	2108      	movs	r1, #8
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f002 fd89 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_F, PWR_GPIO_BIT_9);
 8000d6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d72:	2005      	movs	r0, #5
 8000d74:	f002 fd84 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_F, PWR_GPIO_BIT_10);
 8000d78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f002 fd7f 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_F, PWR_GPIO_BIT_14);
 8000d82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d86:	2005      	movs	r0, #5
 8000d88:	f002 fd7a 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_6);
 8000d8c:	2140      	movs	r1, #64	@ 0x40
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f002 fd76 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_7);
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	2002      	movs	r0, #2
 8000d98:	f002 fd72 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_8);
 8000d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fd6d 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_10);
 8000da6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000daa:	2002      	movs	r0, #2
 8000dac:	f002 fd68 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_11);
 8000db0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000db4:	2002      	movs	r0, #2
 8000db6:	f002 fd63 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_12);
 8000dba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f002 fd5e 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_8);
 8000dc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc8:	2004      	movs	r0, #4
 8000dca:	f002 fd59 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_9);
 8000dce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f002 fd54 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_10);
 8000dd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f002 fd4f 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_11);
 8000de2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000de6:	2004      	movs	r0, #4
 8000de8:	f002 fd4a 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_12);
 8000dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df0:	2004      	movs	r0, #4
 8000df2:	f002 fd45 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_E, PWR_GPIO_BIT_13);
 8000df6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f002 fd40 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_D, PWR_GPIO_BIT_0);
 8000e00:	2101      	movs	r1, #1
 8000e02:	2003      	movs	r0, #3
 8000e04:	f002 fd3c 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_D, PWR_GPIO_BIT_1);
 8000e08:	2102      	movs	r1, #2
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f002 fd38 	bl	8003880 <HAL_PWREx_EnableGPIOPullDown>

//	HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_C, GPIO_PIN_13);

//	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2_LOW);
	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f002 fbcb 	bl	80035ac <HAL_PWR_DisableWakeUpPin>

	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR , ENABLE);//我不用開rcc
	//HAL_PWR_EnableBkUpAccess();
	/* Clear all related wakeup flags */
//	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF2);
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <Standby+0x124>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <Standby+0x124>)
 8000e1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e22:	619a      	str	r2, [r3, #24]
	//HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH);
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_LOW);
 8000e24:	2042      	movs	r0, #66	@ 0x42
 8000e26:	f002 fba1 	bl	800356c <HAL_PWR_EnableWakeUpPin>
	//PWR_WakeUpPinCmd (ENABLE);
	HAL_PWR_EnterSTANDBYMode();
 8000e2a:	f002 fbd5 	bl	80035d8 <HAL_PWR_EnterSTANDBYMode>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40007000 	.word	0x40007000

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e7a:	f002 fda7 	bl	80039cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_CRC_MspInit+0x38>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_CRC_MspInit+0x3c>)
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <HAL_CRC_MspInit+0x3c>)
 8000ea4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_CRC_MspInit+0x3c>)
 8000eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023000 	.word	0x40023000
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09e      	sub	sp, #120	@ 0x78
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2254      	movs	r2, #84	@ 0x54
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fd43 	bl	8004978 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a24      	ldr	r2, [pc, #144]	@ (8000f88 <HAL_FDCAN_MspInit+0xbc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d141      	bne.n	8000f80 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f06:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 fae5 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000f18:	f7ff ff8e 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <HAL_FDCAN_MspInit+0xc0>)
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f20:	4a1a      	ldr	r2, [pc, #104]	@ (8000f8c <HAL_FDCAN_MspInit+0xc0>)
 8000f22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_FDCAN_MspInit+0xc0>)
 8000f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_FDCAN_MspInit+0xc0>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f38:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <HAL_FDCAN_MspInit+0xc0>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_FDCAN_MspInit+0xc0>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f5e:	2309      	movs	r3, #9
 8000f60:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f002 f802 	bl	8002f74 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2015      	movs	r0, #21
 8000f76:	f000 fa66 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f7a:	2015      	movs	r0, #21
 8000f7c:	f000 fa7d 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3778      	adds	r7, #120	@ 0x78
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40006400 	.word	0x40006400
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_FDCAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(hfdcan->Instance==FDCAN1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <HAL_FDCAN_MspDeInit+0x38>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10e      	bne.n	8000fc0 <HAL_FDCAN_MspDeInit+0x30>
  {
  /* USER CODE BEGIN FDCAN1_MspDeInit 0 */

  /* USER CODE END FDCAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <HAL_FDCAN_MspDeInit+0x3c>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <HAL_FDCAN_MspDeInit+0x3c>)
 8000fa8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000fac:	6593      	str	r3, [r2, #88]	@ 0x58

    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8000fae:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f002 f95f 	bl	8003278 <HAL_GPIO_DeInit>

    /* FDCAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
 8000fba:	2015      	movs	r0, #21
 8000fbc:	f000 fa6b 	bl	8001496 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN FDCAN1_MspDeInit 1 */

  /* USER CODE END FDCAN1_MspDeInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40006400 	.word	0x40006400
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f8cf 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <FDCAN1_IT0_IRQHandler+0x10>)
 8001036:	f001 fa6f 	bl	8002518 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000d4 	.word	0x200000d4

08001044 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001068:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 fc77 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff f8bd 	bl	8000218 <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   r0, =_estack
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80010ac:	08004a10 	.word	0x08004a10
  ldr r2, =_sbss
 80010b0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80010b4:	20000208 	.word	0x20000208

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>

080010ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f9b3 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f842 	bl	8001154 <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff feb2 	bl	8000e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]

}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_DeInit>:
  * @brief  This function de-initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_DeInit+0x54>)
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010f6:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_DeInit+0x54>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	639a      	str	r2, [r3, #56]	@ 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <HAL_DeInit+0x54>)
 8001100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001104:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_DeInit+0x54>)
 8001108:	2200      	movs	r2, #0
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <HAL_DeInit+0x54>)
 800110e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_DeInit+0x54>)
 8001116:	2200      	movs	r2, #0
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_DeInit+0x54>)
 800111c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <HAL_DeInit+0x54>)
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_DeInit+0x54>)
 800112a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_DeInit+0x54>)
 8001132:	2200      	movs	r2, #0
 8001134:	631a      	str	r2, [r3, #48]	@ 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001136:	f000 f805 	bl	8001144 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_InitTick+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d022      	beq.n	80011ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_InitTick+0x6c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_InitTick+0x68>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001174:	fbb1 f3f3 	udiv	r3, r1, r3
 8001178:	fbb2 f3f3 	udiv	r3, r2, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f998 	bl	80014b2 <HAL_SYSTICK_Config>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10f      	bne.n	80011a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b0f      	cmp	r3, #15
 800118c:	d809      	bhi.n	80011a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118e:	2200      	movs	r2, #0
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001196:	f000 f956 	bl	8001446 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <HAL_InitTick+0x70>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e007      	b.n	80011b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e004      	b.n	80011b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e001      	b.n	80011b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000070 	.word	0x20000070
 80011c0:	20000068 	.word	0x20000068
 80011c4:	2000006c 	.word	0x2000006c

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_IncTick+0x20>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a03      	ldr	r2, [pc, #12]	@ (80011e4 <HAL_IncTick+0x1c>)
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	20000204 	.word	0x20000204
 80011e8:	20000070 	.word	0x20000070

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000204 	.word	0x20000204

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800121c:	d004      	beq.n	8001228 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <HAL_Delay+0x40>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001228:	bf00      	nop
 800122a:	f7ff ffdf 	bl	80011ec <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d8f7      	bhi.n	800122a <HAL_Delay+0x26>
  {
  }
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000070 	.word	0x20000070

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	@ (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	@ (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db12      	blt.n	8001320 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	490a      	ldr	r1, [pc, #40]	@ (800132c <__NVIC_DisableIRQ+0x44>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	3320      	adds	r3, #32
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001314:	f3bf 8f4f 	dsb	sy
}
 8001318:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800131a:	f3bf 8f6f 	isb	sy
}
 800131e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	@ (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	@ (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	@ 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	@ 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	@ (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff05 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff1c 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff90 	bl	8001384 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5f 	bl	8001330 <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff0f 	bl	80012ac <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff1f 	bl	80012e8 <__NVIC_DisableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff96 	bl	80013ec <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e054      	b.n	8001588 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7f5b      	ldrb	r3, [r3, #29]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fccc 	bl	8000e8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	791b      	ldrb	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <HAL_CRC_Init+0xc4>)
 8001508:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0218 	bic.w	r2, r2, #24
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	e00c      	b.n	8001536 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6899      	ldr	r1, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	461a      	mov	r2, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f948 	bl	80017bc <HAL_CRCEx_Polynomial_Set>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e028      	b.n	8001588 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	795b      	ldrb	r3, [r3, #5]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	e004      	b.n	8001554 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6912      	ldr	r2, [r2, #16]
 8001552:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	04c11db7 	.word	0x04c11db7

08001594 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2202      	movs	r2, #2
 80015a8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d006      	beq.n	80015d0 <HAL_CRC_Calculate+0x3c>
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d829      	bhi.n	800161a <HAL_CRC_Calculate+0x86>
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d019      	beq.n	80015fe <HAL_CRC_Calculate+0x6a>
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d01e      	beq.n	800160c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80015ce:	e024      	b.n	800161a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e00a      	b.n	80015ec <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	441a      	add	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3f0      	bcc.n	80015d6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	613b      	str	r3, [r7, #16]
      break;
 80015fc:	e00e      	b.n	800161c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f812 	bl	800162c <CRC_Handle_8>
 8001608:	6138      	str	r0, [r7, #16]
      break;
 800160a:	e007      	b.n	800161c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f899 	bl	8001748 <CRC_Handle_16>
 8001616:	6138      	str	r0, [r7, #16]
      break;
 8001618:	e000      	b.n	800161c <HAL_CRC_Calculate+0x88>
      break;
 800161a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001622:	693b      	ldr	r3, [r7, #16]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	e023      	b.n	8001686 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	3301      	adds	r3, #1
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	440b      	add	r3, r1
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001658:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	440b      	add	r3, r1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001668:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	3303      	adds	r3, #3
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	440b      	add	r3, r1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800167c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800167e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3301      	adds	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	d3d6      	bcc.n	800163e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d04d      	beq.n	8001736 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d116      	bne.n	80016ec <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	3301      	adds	r3, #1
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	440b      	add	r3, r1
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21b      	sxth	r3, r3
 80016de:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	8b7a      	ldrh	r2, [r7, #26]
 80016ea:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d11f      	bne.n	8001736 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	3301      	adds	r3, #1
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21b      	sxth	r3, r3
 8001716:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	8b7a      	ldrh	r2, [r7, #26]
 8001722:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3724      	adds	r7, #36	@ 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e013      	b.n	8001782 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	4413      	add	r3, r2
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	440b      	add	r3, r1
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3e6      	bcc.n	800175a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	4413      	add	r3, r2
 80017a4:	881a      	ldrh	r2, [r3, #0]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80017cc:	231f      	movs	r3, #31
 80017ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	e063      	b.n	80018a8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80017e0:	bf00      	nop
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	613a      	str	r2, [r7, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d009      	beq.n	8001800 <HAL_CRCEx_Polynomial_Set+0x44>
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b18      	cmp	r3, #24
 8001804:	d846      	bhi.n	8001894 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001806:	a201      	add	r2, pc, #4	@ (adr r2, 800180c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	0800189b 	.word	0x0800189b
 8001810:	08001895 	.word	0x08001895
 8001814:	08001895 	.word	0x08001895
 8001818:	08001895 	.word	0x08001895
 800181c:	08001895 	.word	0x08001895
 8001820:	08001895 	.word	0x08001895
 8001824:	08001895 	.word	0x08001895
 8001828:	08001895 	.word	0x08001895
 800182c:	08001889 	.word	0x08001889
 8001830:	08001895 	.word	0x08001895
 8001834:	08001895 	.word	0x08001895
 8001838:	08001895 	.word	0x08001895
 800183c:	08001895 	.word	0x08001895
 8001840:	08001895 	.word	0x08001895
 8001844:	08001895 	.word	0x08001895
 8001848:	08001895 	.word	0x08001895
 800184c:	0800187d 	.word	0x0800187d
 8001850:	08001895 	.word	0x08001895
 8001854:	08001895 	.word	0x08001895
 8001858:	08001895 	.word	0x08001895
 800185c:	08001895 	.word	0x08001895
 8001860:	08001895 	.word	0x08001895
 8001864:	08001895 	.word	0x08001895
 8001868:	08001895 	.word	0x08001895
 800186c:	08001871 	.word	0x08001871
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b06      	cmp	r3, #6
 8001874:	d913      	bls.n	800189e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800187a:	e010      	b.n	800189e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b07      	cmp	r3, #7
 8001880:	d90f      	bls.n	80018a2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001886:	e00c      	b.n	80018a2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	d90b      	bls.n	80018a6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001892:	e008      	b.n	80018a6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	75fb      	strb	r3, [r7, #23]
        break;
 8001898:	e006      	b.n	80018a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800189a:	bf00      	nop
 800189c:	e004      	b.n	80018a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800189e:	bf00      	nop
 80018a0:	e002      	b.n	80018a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80018a6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10d      	bne.n	80018ca <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 0118 	bic.w	r1, r3, #24
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e147      	b.n	8001b7a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fae4 	bl	8000ecc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0210 	bic.w	r2, r2, #16
 8001912:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001914:	f7ff fc6a 	bl	80011ec <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800191a:	e012      	b.n	8001942 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800191c:	f7ff fc66 	bl	80011ec <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d90b      	bls.n	8001942 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2203      	movs	r2, #3
 800193a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e11b      	b.n	8001b7a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b08      	cmp	r3, #8
 800194e:	d0e5      	beq.n	800191c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001960:	f7ff fc44 	bl	80011ec <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001966:	e012      	b.n	800198e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001968:	f7ff fc40 	bl	80011ec <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b0a      	cmp	r3, #10
 8001974:	d90b      	bls.n	800198e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0f5      	b.n	8001b7a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0e5      	beq.n	8001968 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0202 	orr.w	r2, r2, #2
 80019aa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a74      	ldr	r2, [pc, #464]	@ (8001b84 <HAL_FDCAN_Init+0x2ac>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d103      	bne.n	80019be <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80019b6:	4a74      	ldr	r2, [pc, #464]	@ (8001b88 <HAL_FDCAN_Init+0x2b0>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7c1b      	ldrb	r3, [r3, #16]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019d4:	619a      	str	r2, [r3, #24]
 80019d6:	e007      	b.n	80019e8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7c5b      	ldrb	r3, [r3, #17]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019fe:	619a      	str	r2, [r3, #24]
 8001a00:	e007      	b.n	8001a12 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a10:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7c9b      	ldrb	r3, [r3, #18]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a28:	619a      	str	r2, [r3, #24]
 8001a2a:	e007      	b.n	8001a3c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a3a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001a60:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0210 	bic.w	r2, r2, #16
 8001a70:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0204 	orr.w	r2, r2, #4
 8001a88:	619a      	str	r2, [r3, #24]
 8001a8a:	e02c      	b.n	8001ae6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d028      	beq.n	8001ae6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d01c      	beq.n	8001ad6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001aaa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0210 	orr.w	r2, r2, #16
 8001aba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d110      	bne.n	8001ae6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	619a      	str	r2, [r3, #24]
 8001ad4:	e007      	b.n	8001ae6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001af6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001afe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b0e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b10:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b1a:	d115      	bne.n	8001b48 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b26:	3b01      	subs	r3, #1
 8001b28:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b2a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	3b01      	subs	r3, #1
 8001b32:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b34:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b44:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b46:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fe68 	bl	8002834 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40006400 	.word	0x40006400
 8001b88:	40006500 	.word	0x40006500

08001b8c <HAL_FDCAN_DeInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeInit(FDCAN_HandleTypeDef *hfdcan)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_FDCAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e015      	b.n	8001bca <HAL_FDCAN_DeInit+0x3e>

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));

  /* Stop the FDCAN module: return value is voluntary ignored */
  (void)HAL_FDCAN_Stop(hfdcan);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f90d 	bl	8001dbe <HAL_FDCAN_Stop>

  /* Disable Interrupt lines */
  CLEAR_BIT(hfdcan->Instance->ILE, (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0203 	bic.w	r2, r2, #3
 8001bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* DeInit the low level hardware: CLOCK, NVIC */
  hfdcan->MspDeInitCallback(hfdcan);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_FDCAN_MspDeInit(hfdcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff f9eb 	bl	8000f90 <HAL_FDCAN_MspDeInit>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Reset the FDCAN ErrorCode */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_RESET;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b087      	sub	sp, #28
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001be2:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d002      	beq.n	8001bf0 <HAL_FDCAN_ConfigFilter+0x1e>
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d13d      	bne.n	8001c6c <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d119      	bne.n	8001c2c <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001c04:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001c0c:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	075a      	lsls	r2, r3, #29
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	079a      	lsls	r2, r3, #30
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e006      	b.n	8001c7a <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c70:	f043 0202 	orr.w	r2, r3, #2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d116      	bne.n	8001cce <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	011a      	lsls	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e006      	b.n	8001cdc <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	f043 0204 	orr.w	r2, r3, #4
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
  }
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d108      	bne.n	8001d12 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	0219      	lsls	r1, r3, #8
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e006      	b.n	8001d20 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d16:	f043 0204 	orr.w	r2, r3, #4
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d109      	bne.n	8001d54 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d4e:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e006      	b.n	8001d62 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d110      	bne.n	8001da4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e006      	b.n	8001db2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d156      	bne.n	8001e84 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001de6:	e011      	b.n	8001e0c <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d90b      	bls.n	8001e06 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e045      	b.n	8001e92 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0e6      	beq.n	8001de8 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0210 	bic.w	r2, r2, #16
 8001e2c:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e2e:	e011      	b.n	8001e54 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	d90b      	bls.n	8001e4e <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e021      	b.n	8001e92 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d0e6      	beq.n	8001e30 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0202 	orr.w	r2, r2, #2
 8001e70:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e006      	b.n	8001e92 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e88:	f043 0208 	orr.w	r2, r3, #8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d12c      	bne.n	8001f10 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e023      	b.n	8001f1e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001ede:	0c1b      	lsrs	r3, r3, #16
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fd0d 	bl	800290c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001f02:	2201      	movs	r2, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e006      	b.n	8001f1e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f14:	f043 0208 	orr.w	r2, r3, #8
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>:
  * @retval Tx buffer index of last Tx FIFO/Queue request
  *          - Any value of @arg FDCAN_Tx_location if Tx request has been submitted.
  *          - 0 if no Tx FIFO/Queue request have been submitted.
  */
uint32_t HAL_FDCAN_GetLatestTxFifoQRequestBuffer(const FDCAN_HandleTypeDef *hfdcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Return Last Tx FIFO/Queue Request Buffer */
  return hfdcan->LatestTxFifoQRequest;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_FDCAN_AbortTxRequest>:
  * @param  BufferIndex buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AbortTxRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndex));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d106      	bne.n	8001f62 <HAL_FDCAN_AbortTxRequest+0x24>
  {
    /* Add cancellation request */
    hfdcan->Instance->TXBCR = BufferIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    /* Return function status */
    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e006      	b.n	8001f70 <HAL_FDCAN_AbortTxRequest+0x32>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f66:	f043 0208 	orr.w	r2, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
  }
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b08b      	sub	sp, #44	@ 0x2c
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f94:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001f96:	7efb      	ldrb	r3, [r7, #27]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	f040 80e8 	bne.w	800216e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b40      	cmp	r3, #64	@ 0x40
 8001fa2:	d137      	bne.n	8002014 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0db      	b.n	800217c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	0e1b      	lsrs	r3, r3, #24
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10a      	bne.n	8001fec <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fde:	0a5b      	lsrs	r3, r3, #9
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
 8002012:	e036      	b.n	8002082 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002028:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0a3      	b.n	800217c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800203c:	0e1b      	lsrs	r3, r3, #24
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d10a      	bne.n	800205c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002058:	2301      	movs	r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e005      	b.n	80020b2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	3304      	adds	r3, #4
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	f003 020f 	and.w	r2, r3, #15
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e1b      	lsrs	r3, r3, #24
 8002106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0fda      	lsrs	r2, r3, #31
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	3304      	adds	r3, #4
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	e00a      	b.n	800213e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	441a      	add	r2, r3
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	440b      	add	r3, r1
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	3301      	adds	r3, #1
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	461a      	mov	r2, r3
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	4293      	cmp	r3, r2
 800214c:	d3ec      	bcc.n	8002128 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d105      	bne.n	8002160 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800215e:	e004      	b.n	800216a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e006      	b.n	800217c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f043 0208 	orr.w	r2, r3, #8
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
  }
}
 800217c:	4618      	mov	r0, r3
 800217e:	372c      	adds	r7, #44	@ 0x2c
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	080049f8 	.word	0x080049f8

0800218c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800219e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d003      	beq.n	80021ae <HAL_FDCAN_ActivateNotification+0x22>
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	f040 80c8 	bne.w	800233e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d03b      	beq.n	8002242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d031      	beq.n	8002242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d027      	beq.n	8002242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01d      	beq.n	8002242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d013      	beq.n	8002242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00c      	beq.n	8002252 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d13b      	bne.n	80022de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d131      	bne.n	80022de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d127      	bne.n	80022de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11d      	bne.n	80022de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d113      	bne.n	80022de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0202 	orr.w	r2, r2, #2
 80022ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	430a      	orrs	r2, r1
 8002308:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	430a      	orrs	r2, r1
 8002326:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	430a      	orrs	r2, r1
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e006      	b.n	800234c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_FDCAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg FDCAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeactivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t InactiveITs)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002368:	75fb      	strb	r3, [r7, #23]
  uint32_t ITs_lines_selection;

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(InactiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d003      	beq.n	8002378 <HAL_FDCAN_DeactivateNotification+0x20>
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b02      	cmp	r3, #2
 8002374:	f040 80c3 	bne.w	80024fe <HAL_FDCAN_DeactivateNotification+0x1a6>
  {
    /* Disable the selected interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, InactiveITs);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	43da      	mvns	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	400a      	ands	r2, r1
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((InactiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_FDCAN_DeactivateNotification+0x46>
    {
      /* Disable Tx Buffer Transmission Interrupts */
      CLEAR_REG(hfdcan->Instance->TXBTIE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((InactiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <HAL_FDCAN_DeactivateNotification+0x5a>
    {
      /* Disable Tx Buffer Cancellation Finished Interrupt */
      CLEAR_REG(hfdcan->Instance->TXBCIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Get interrupts enabled and interrupts line selection */
    ITs_enabled = hfdcan->Instance->IE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	613b      	str	r3, [r7, #16]
    ITs_lines_selection = hfdcan->Instance->ILS;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	60fb      	str	r3, [r7, #12]

    /* Check if some interrupts are still enabled on interrupt line 0 */
    if ((((ITs_enabled & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <HAL_FDCAN_DeactivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d043      	beq.n	800245e <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_FDCAN_DeactivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d039      	beq.n	800245e <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_SMSG)           != 0U)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_FDCAN_DeactivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d02f      	beq.n	800245e <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <HAL_FDCAN_DeactivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d025      	beq.n	800245e <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_MISC)           != 0U)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_FDCAN_DeactivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01b      	beq.n	800245e <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_FDCAN_DeactivateNotification+0xe2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d011      	beq.n	800245e <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_FDCAN_DeactivateNotification+0xf6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_FDCAN_DeactivateNotification+0x106>
      /* Do nothing */
    }
    else /* no more interrupts enabled on interrupt line 0 */
    {
      /* Disable interrupt line 0 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Check if some interrupts are still enabled on interrupt line 1 */
    if ((((ITs_enabled & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	2b00      	cmp	r3, #0
 8002466:	d004      	beq.n	8002472 <HAL_FDCAN_DeactivateNotification+0x11a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d143      	bne.n	80024fa <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_FDCAN_DeactivateNotification+0x12e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d139      	bne.n	80024fa <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_SMSG)           != 0U)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_FDCAN_DeactivateNotification+0x142>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d12f      	bne.n	80024fa <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_FDCAN_DeactivateNotification+0x156>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d125      	bne.n	80024fa <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_MISC)           != 0U)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_FDCAN_DeactivateNotification+0x16a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11b      	bne.n	80024fa <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_FDCAN_DeactivateNotification+0x17e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d111      	bne.n	80024fa <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_FDCAN_DeactivateNotification+0x192>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d107      	bne.n	80024fa <HAL_FDCAN_DeactivateNotification+0x1a2>
      /* Do nothing */
    }
    else /* no more interrupts enabled on interrupt line 1 */
    {
      /* Disable interrupt line 1 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0202 	bic.w	r2, r2, #2
 80024f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e006      	b.n	800250c <HAL_FDCAN_DeactivateNotification+0x1b4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
  }
}
 800250c:	4618      	mov	r0, r3
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	@ 0x30
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002526:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002534:	4013      	ands	r3, r2
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800254c:	4013      	ands	r3, r2
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002564:	4013      	ands	r3, r2
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002572:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	6a3a      	ldr	r2, [r7, #32]
 800257c:	4013      	ands	r3, r2
 800257e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002586:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800258a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	4013      	ands	r3, r2
 8002596:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2240      	movs	r2, #64	@ 0x40
 80025c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f916 	bl	80027f6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d019      	beq.n	8002608 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d014      	beq.n	8002608 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025e6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8d8 	bl	80027b8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002614:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8a2 	bl	8002762 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800261e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800262a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800262c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe f864 	bl	80006fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002640:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f897 	bl	8002778 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002666:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f890 	bl	800278e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d013      	beq.n	80026aa <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800268a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f87c 	bl	80027a2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f880 	bl	80027ce <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f878 	bl	80027e2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00f      	beq.n	800271c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800270e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002714:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800272a:	69f9      	ldr	r1, [r7, #28]
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f876 	bl	800281e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6a3a      	ldr	r2, [r7, #32]
 800273e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f858 	bl	800280a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800275a:	bf00      	nop
 800275c:	3730      	adds	r7, #48	@ 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800283c:	4b30      	ldr	r3, [pc, #192]	@ (8002900 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800283e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2f      	ldr	r2, [pc, #188]	@ (8002904 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d103      	bne.n	8002852 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002850:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d103      	bne.n	8002864 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8002862:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002872:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287a:	041a      	lsls	r2, r3, #16
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002898:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	061a      	lsls	r2, r3, #24
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e005      	b.n	80028e6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3304      	adds	r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d3f3      	bcc.n	80028da <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	4000a400 	.word	0x4000a400
 8002904:	40006800 	.word	0x40006800
 8002908:	40006c00 	.word	0x40006c00

0800290c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800292a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002932:	4313      	orrs	r3, r2
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	e00a      	b.n	800294e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002940:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002946:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002948:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800294c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002958:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800295e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002964:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	3304      	adds	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	3304      	adds	r3, #4
 8002998:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e020      	b.n	80029e2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3303      	adds	r3, #3
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3302      	adds	r3, #2
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	440b      	add	r3, r1
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029b8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	440b      	add	r3, r1
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80029c6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	440a      	add	r2, r1
 80029ce:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80029d0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	3304      	adds	r3, #4
 80029da:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3304      	adds	r3, #4
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4a06      	ldr	r2, [pc, #24]	@ (8002a00 <FDCAN_CopyMessageToRAM+0xf4>)
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	461a      	mov	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d3d6      	bcc.n	80029a0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80029f2:	bf00      	nop
 80029f4:	bf00      	nop
 80029f6:	3724      	adds	r7, #36	@ 0x24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	080049f8 	.word	0x080049f8

08002a04 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a16:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad4 <HAL_FLASH_Program+0xd0>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_FLASH_Program+0x1e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e053      	b.n	8002aca <HAL_FLASH_Program+0xc6>
 8002a22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <HAL_FLASH_Program+0xd0>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a2c:	f000 f892 	bl	8002b54 <FLASH_WaitForLastOperation>
 8002a30:	4603      	mov	r3, r0
 8002a32:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d143      	bne.n	8002ac2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ad4 <HAL_FLASH_Program+0xd0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002a40:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_FLASH_Program+0xd4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_FLASH_Program+0xd4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a21      	ldr	r2, [pc, #132]	@ (8002ad8 <HAL_FLASH_Program+0xd4>)
 8002a52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a56:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002a58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <HAL_FLASH_Program+0xd0>)
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	771a      	strb	r2, [r3, #28]
 8002a5e:	e002      	b.n	8002a66 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002a60:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <HAL_FLASH_Program+0xd0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a70:	68b8      	ldr	r0, [r7, #8]
 8002a72:	f000 f8c1 	bl	8002bf8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002a76:	2301      	movs	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	e010      	b.n	8002a9e <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d002      	beq.n	8002a88 <HAL_FLASH_Program+0x84>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d10a      	bne.n	8002a9e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	68b8      	ldr	r0, [r7, #8]
 8002a8e:	f000 f8d9 	bl	8002c44 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d102      	bne.n	8002a9e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002a98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a9c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aa2:	f000 f857 	bl	8002b54 <FLASH_WaitForLastOperation>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002ab0:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_FLASH_Program+0xd4>)
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4907      	ldr	r1, [pc, #28]	@ (8002ad8 <HAL_FLASH_Program+0xd4>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002abe:	f000 fa0f 	bl	8002ee0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ac2:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <HAL_FLASH_Program+0xd0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000074 	.word	0x20000074
 8002ad8:	40022000 	.word	0x40022000

08002adc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_FLASH_Unlock+0x38>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da0b      	bge.n	8002b06 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_FLASH_Unlock+0x38>)
 8002af0:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_FLASH_Unlock+0x3c>)
 8002af2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002af4:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <HAL_FLASH_Unlock+0x38>)
 8002af6:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <HAL_FLASH_Unlock+0x40>)
 8002af8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_FLASH_Unlock+0x38>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da01      	bge.n	8002b06 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002b06:	79fb      	ldrb	r3, [r7, #7]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40022000 	.word	0x40022000
 8002b18:	45670123 	.word	0x45670123
 8002b1c:	cdef89ab 	.word	0xcdef89ab

08002b20 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_FLASH_Lock+0x30>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <HAL_FLASH_Lock+0x30>)
 8002b30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b34:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_FLASH_Lock+0x30>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da01      	bge.n	8002b42 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002b42:	79fb      	ldrb	r3, [r7, #7]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40022000 	.word	0x40022000

08002b54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7fe fb46 	bl	80011ec <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002b62:	e009      	b.n	8002b78 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002b64:	f7fe fb42 	bl	80011ec <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d201      	bcs.n	8002b78 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e037      	b.n	8002be8 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002b78:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <FLASH_WaitForLastOperation+0x9c>)
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b84:	d0ee      	beq.n	8002b64 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <FLASH_WaitForLastOperation+0x9c>)
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002b8e:	4013      	ands	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01d      	beq.n	8002bd4 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8002b98:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <FLASH_WaitForLastOperation+0xa0>)
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <FLASH_WaitForLastOperation+0xa0>)
 8002ba2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002baa:	d307      	bcc.n	8002bbc <FLASH_WaitForLastOperation+0x68>
 8002bac:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <FLASH_WaitForLastOperation+0x9c>)
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002bb6:	490e      	ldr	r1, [pc, #56]	@ (8002bf0 <FLASH_WaitForLastOperation+0x9c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	618b      	str	r3, [r1, #24]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <FLASH_WaitForLastOperation+0x7c>
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <FLASH_WaitForLastOperation+0x9c>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002bce:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e009      	b.n	8002be8 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <FLASH_WaitForLastOperation+0x9c>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <FLASH_WaitForLastOperation+0x9c>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	20000074 	.word	0x20000074

08002bf8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <FLASH_Program_DoubleWord+0x48>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <FLASH_Program_DoubleWord+0x48>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002c16:	f3bf 8f6f 	isb	sy
}
 8002c1a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	000a      	movs	r2, r1
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	3104      	adds	r1, #4
 8002c30:	4613      	mov	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40022000 	.word	0x40022000

08002c44 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002c4e:	2340      	movs	r3, #64	@ 0x40
 8002c50:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002c5a:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <FLASH_Program_Fast+0x68>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <FLASH_Program_Fast+0x68>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c66:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c6c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c70:	b672      	cpsid	i
}
 8002c72:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3304      	adds	r3, #4
 8002c86:	617b      	str	r3, [r7, #20]
    row_index--;
 8002c88:	7ffb      	ldrb	r3, [r7, #31]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8002c8e:	7ffb      	ldrb	r3, [r7, #31]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ef      	bne.n	8002c74 <FLASH_Program_Fast+0x30>
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002ca0:	bf00      	nop
 8002ca2:	3724      	adds	r7, #36	@ 0x24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40022000 	.word	0x40022000

08002cb0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cba:	4b49      	ldr	r3, [pc, #292]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_FLASHEx_Erase+0x16>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e087      	b.n	8002dd6 <HAL_FLASHEx_Erase+0x126>
 8002cc6:	4b46      	ldr	r3, [pc, #280]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ccc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cd0:	f7ff ff40 	bl	8002b54 <FLASH_WaitForLastOperation>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d177      	bne.n	8002dce <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cde:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002cfc:	4b39      	ldr	r3, [pc, #228]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a38      	ldr	r2, [pc, #224]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d06:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002d08:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	771a      	strb	r2, [r3, #28]
 8002d0e:	e016      	b.n	8002d3e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002d10:	4b33      	ldr	r3, [pc, #204]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	771a      	strb	r2, [r3, #28]
 8002d16:	e012      	b.n	8002d3e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002d18:	4b32      	ldr	r3, [pc, #200]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002d24:	4b2f      	ldr	r3, [pc, #188]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d2e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002d30:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002d32:	2202      	movs	r2, #2
 8002d34:	771a      	strb	r2, [r3, #28]
 8002d36:	e002      	b.n	8002d3e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002d38:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d113      	bne.n	8002d6e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f84c 	bl	8002de8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d54:	f7ff fefe 	bl	8002b54 <FLASH_WaitForLastOperation>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002d5c:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002d66:	f023 0304 	bic.w	r3, r3, #4
 8002d6a:	6153      	str	r3, [r2, #20]
 8002d6c:	e02d      	b.n	8002dca <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d74:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	e01d      	b.n	8002dba <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4619      	mov	r1, r3
 8002d84:	68b8      	ldr	r0, [r7, #8]
 8002d86:	f000 f867 	bl	8002e58 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d8e:	f7ff fee1 	bl	8002b54 <FLASH_WaitForLastOperation>
 8002d92:	4603      	mov	r3, r0
 8002d94:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002d96:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <HAL_FLASHEx_Erase+0x134>)
 8002d9c:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8002da0:	f023 0302 	bic.w	r3, r3, #2
 8002da4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	601a      	str	r2, [r3, #0]
          break;
 8002db2:	e00a      	b.n	8002dca <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d3d9      	bcc.n	8002d7e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002dca:	f000 f889 	bl	8002ee0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002dce:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <HAL_FLASHEx_Erase+0x130>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]

  return status;
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000074 	.word	0x20000074
 8002de4:	40022000 	.word	0x40022000

08002de8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002e06:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00e      	beq.n	8002e3a <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e26:	6153      	str	r3, [r2, #20]
 8002e28:	e007      	b.n	8002e3a <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	4a09      	ldr	r2, [pc, #36]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <FLASH_MassErase+0x6c>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e44:	6153      	str	r3, [r2, #20]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40022000 	.word	0x40022000

08002e58 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002e62:	4b1e      	ldr	r3, [pc, #120]	@ (8002edc <FLASH_PageErase+0x84>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <FLASH_PageErase+0x84>)
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <FLASH_PageErase+0x84>)
 8002e74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e78:	6153      	str	r3, [r2, #20]
 8002e7a:	e011      	b.n	8002ea0 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <FLASH_PageErase+0x84>)
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <FLASH_PageErase+0x84>)
 8002e8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e90:	6153      	str	r3, [r2, #20]
 8002e92:	e005      	b.n	8002ea0 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <FLASH_PageErase+0x84>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	4a10      	ldr	r2, [pc, #64]	@ (8002edc <FLASH_PageErase+0x84>)
 8002e9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e9e:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <FLASH_PageErase+0x84>)
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002eb0:	490a      	ldr	r1, [pc, #40]	@ (8002edc <FLASH_PageErase+0x84>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002eb6:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <FLASH_PageErase+0x84>)
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <FLASH_PageErase+0x84>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <FLASH_PageErase+0x84>)
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <FLASH_PageErase+0x84>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ecc:	6153      	str	r3, [r2, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000

08002ee0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <FLASH_FlushCaches+0x8c>)
 8002ee8:	7f1b      	ldrb	r3, [r3, #28]
 8002eea:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <FLASH_FlushCaches+0x18>
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d117      	bne.n	8002f28 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002efe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002f04:	4b1a      	ldr	r3, [pc, #104]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a19      	ldr	r2, [pc, #100]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b17      	ldr	r3, [pc, #92]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f1c:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a13      	ldr	r2, [pc, #76]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f26:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d002      	beq.n	8002f34 <FLASH_FlushCaches+0x54>
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d111      	bne.n	8002f58 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002f34:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f4a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a07      	ldr	r2, [pc, #28]	@ (8002f70 <FLASH_FlushCaches+0x90>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f56:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <FLASH_FlushCaches+0x8c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	771a      	strb	r2, [r3, #28]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000074 	.word	0x20000074
 8002f70:	40022000 	.word	0x40022000

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f82:	e15a      	b.n	800323a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 814c 	beq.w	8003234 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d005      	beq.n	8002fb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d130      	bne.n	8003016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fea:	2201      	movs	r2, #1
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 0201 	and.w	r2, r3, #1
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d017      	beq.n	8003052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d123      	bne.n	80030a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	220f      	movs	r2, #15
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	08da      	lsrs	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3208      	adds	r2, #8
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0203 	and.w	r2, r3, #3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80a6 	beq.w	8003234 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003258 <HAL_GPIO_Init+0x2e4>)
 80030ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003258 <HAL_GPIO_Init+0x2e4>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80030f4:	4b58      	ldr	r3, [pc, #352]	@ (8003258 <HAL_GPIO_Init+0x2e4>)
 80030f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003100:	4a56      	ldr	r2, [pc, #344]	@ (800325c <HAL_GPIO_Init+0x2e8>)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800312a:	d01f      	beq.n	800316c <HAL_GPIO_Init+0x1f8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a4c      	ldr	r2, [pc, #304]	@ (8003260 <HAL_GPIO_Init+0x2ec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d019      	beq.n	8003168 <HAL_GPIO_Init+0x1f4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a4b      	ldr	r2, [pc, #300]	@ (8003264 <HAL_GPIO_Init+0x2f0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_GPIO_Init+0x1f0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a4a      	ldr	r2, [pc, #296]	@ (8003268 <HAL_GPIO_Init+0x2f4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00d      	beq.n	8003160 <HAL_GPIO_Init+0x1ec>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a49      	ldr	r2, [pc, #292]	@ (800326c <HAL_GPIO_Init+0x2f8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d007      	beq.n	800315c <HAL_GPIO_Init+0x1e8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a48      	ldr	r2, [pc, #288]	@ (8003270 <HAL_GPIO_Init+0x2fc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_GPIO_Init+0x1e4>
 8003154:	2305      	movs	r3, #5
 8003156:	e00a      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003158:	2306      	movs	r3, #6
 800315a:	e008      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 800315c:	2304      	movs	r3, #4
 800315e:	e006      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003160:	2303      	movs	r3, #3
 8003162:	e004      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003164:	2302      	movs	r3, #2
 8003166:	e002      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 800316c:	2300      	movs	r3, #0
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317e:	4937      	ldr	r1, [pc, #220]	@ (800325c <HAL_GPIO_Init+0x2e8>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800318c:	4b39      	ldr	r3, [pc, #228]	@ (8003274 <HAL_GPIO_Init+0x300>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b0:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <HAL_GPIO_Init+0x300>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003274 <HAL_GPIO_Init+0x300>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031da:	4a26      	ldr	r2, [pc, #152]	@ (8003274 <HAL_GPIO_Init+0x300>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031e0:	4b24      	ldr	r3, [pc, #144]	@ (8003274 <HAL_GPIO_Init+0x300>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003204:	4a1b      	ldr	r2, [pc, #108]	@ (8003274 <HAL_GPIO_Init+0x300>)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800320a:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <HAL_GPIO_Init+0x300>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800322e:	4a11      	ldr	r2, [pc, #68]	@ (8003274 <HAL_GPIO_Init+0x300>)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f ae9d 	bne.w	8002f84 <HAL_GPIO_Init+0x10>
  }
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000
 8003260:	48000400 	.word	0x48000400
 8003264:	48000800 	.word	0x48000800
 8003268:	48000c00 	.word	0x48000c00
 800326c:	48001000 	.word	0x48001000
 8003270:	48001400 	.word	0x48001400
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003286:	e0bd      	b.n	8003404 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003288:	2201      	movs	r2, #1
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80b0 	beq.w	80033fe <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800329e:	4a60      	ldr	r2, [pc, #384]	@ (8003420 <HAL_GPIO_DeInit+0x1a8>)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032c6:	d01f      	beq.n	8003308 <HAL_GPIO_DeInit+0x90>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a56      	ldr	r2, [pc, #344]	@ (8003424 <HAL_GPIO_DeInit+0x1ac>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d019      	beq.n	8003304 <HAL_GPIO_DeInit+0x8c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a55      	ldr	r2, [pc, #340]	@ (8003428 <HAL_GPIO_DeInit+0x1b0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_GPIO_DeInit+0x88>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a54      	ldr	r2, [pc, #336]	@ (800342c <HAL_GPIO_DeInit+0x1b4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00d      	beq.n	80032fc <HAL_GPIO_DeInit+0x84>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a53      	ldr	r2, [pc, #332]	@ (8003430 <HAL_GPIO_DeInit+0x1b8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <HAL_GPIO_DeInit+0x80>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a52      	ldr	r2, [pc, #328]	@ (8003434 <HAL_GPIO_DeInit+0x1bc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_GPIO_DeInit+0x7c>
 80032f0:	2305      	movs	r3, #5
 80032f2:	e00a      	b.n	800330a <HAL_GPIO_DeInit+0x92>
 80032f4:	2306      	movs	r3, #6
 80032f6:	e008      	b.n	800330a <HAL_GPIO_DeInit+0x92>
 80032f8:	2304      	movs	r3, #4
 80032fa:	e006      	b.n	800330a <HAL_GPIO_DeInit+0x92>
 80032fc:	2303      	movs	r3, #3
 80032fe:	e004      	b.n	800330a <HAL_GPIO_DeInit+0x92>
 8003300:	2302      	movs	r3, #2
 8003302:	e002      	b.n	800330a <HAL_GPIO_DeInit+0x92>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_GPIO_DeInit+0x92>
 8003308:	2300      	movs	r3, #0
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	f002 0203 	and.w	r2, r2, #3
 8003310:	0092      	lsls	r2, r2, #2
 8003312:	4093      	lsls	r3, r2
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	429a      	cmp	r2, r3
 8003318:	d132      	bne.n	8003380 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800331a:	4b47      	ldr	r3, [pc, #284]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	4945      	ldr	r1, [pc, #276]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 8003324:	4013      	ands	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003328:	4b43      	ldr	r3, [pc, #268]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	4941      	ldr	r1, [pc, #260]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 8003332:	4013      	ands	r3, r2
 8003334:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003336:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	493e      	ldr	r1, [pc, #248]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 8003340:	4013      	ands	r3, r2
 8003342:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003344:	4b3c      	ldr	r3, [pc, #240]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	493a      	ldr	r1, [pc, #232]	@ (8003438 <HAL_GPIO_DeInit+0x1c0>)
 800334e:	4013      	ands	r3, r2
 8003350:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003362:	4a2f      	ldr	r2, [pc, #188]	@ (8003420 <HAL_GPIO_DeInit+0x1a8>)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43da      	mvns	r2, r3
 8003372:	482b      	ldr	r0, [pc, #172]	@ (8003420 <HAL_GPIO_DeInit+0x1a8>)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	400a      	ands	r2, r1
 800337a:	3302      	adds	r3, #2
 800337c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2103      	movs	r1, #3
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	08d2      	lsrs	r2, r2, #3
 80033b4:	4019      	ands	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2103      	movs	r1, #3
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	401a      	ands	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	2101      	movs	r1, #1
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2103      	movs	r1, #3
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	401a      	ands	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f af3b 	bne.w	8003288 <HAL_GPIO_DeInit+0x10>
  }
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40010000 	.word	0x40010000
 8003424:	48000400 	.word	0x48000400
 8003428:	48000800 	.word	0x48000800
 800342c:	48000c00 	.word	0x48000c00
 8003430:	48001000 	.word	0x48001000
 8003434:	48001400 	.word	0x48001400
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003458:	e002      	b.n	8003460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e041      	b.n	8003502 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003486:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003490:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6892      	ldr	r2, [r2, #8]
 80034a4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80034a6:	f7fd fea1 	bl	80011ec <HAL_GetTick>
 80034aa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80034ac:	e00f      	b.n	80034ce <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80034ae:	f7fd fe9d 	bl	80011ec <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b31      	cmp	r3, #49	@ 0x31
 80034ba:	d908      	bls.n	80034ce <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e019      	b.n	8003502 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e8      	bne.n	80034ae <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d005      	beq.n	80034f6 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68d2      	ldr	r2, [r2, #12]
 80034f2:	611a      	str	r2, [r3, #16]
 80034f4:	e004      	b.n	8003500 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800351a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000

0800354c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003556:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40007000 	.word	0x40007000

0800356c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8003574:	4b0c      	ldr	r3, [pc, #48]	@ (80035a8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	43db      	mvns	r3, r3
 8003580:	401a      	ands	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800358c:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	4904      	ldr	r1, [pc, #16]	@ (80035a8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]


}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40007000 	.word	0x40007000

080035ac <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80035b4:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <HAL_PWR_DisableWakeUpPin+0x28>)
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	43db      	mvns	r3, r3
 80035c0:	4904      	ldr	r1, [pc, #16]	@ (80035d4 <HAL_PWR_DisableWakeUpPin+0x28>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40007000 	.word	0x40007000

080035d8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80035dc:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 0307 	bic.w	r3, r3, #7
 80035e4:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80035e6:	f043 0303 	orr.w	r3, r3, #3
 80035ea:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035ec:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	4a05      	ldr	r2, [pc, #20]	@ (8003608 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80035f2:	f043 0304 	orr.w	r3, r3, #4
 80035f6:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80035f8:	bf30      	wfi
}
 80035fa:	bf00      	nop
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40007000 	.word	0x40007000
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d141      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800361a:	4b4b      	ldr	r3, [pc, #300]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	d131      	bne.n	800368c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003628:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800362e:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003634:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003638:	4b43      	ldr	r3, [pc, #268]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003640:	4a41      	ldr	r2, [pc, #260]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003646:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003648:	4b40      	ldr	r3, [pc, #256]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2232      	movs	r2, #50	@ 0x32
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	4a3f      	ldr	r2, [pc, #252]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	0c9b      	lsrs	r3, r3, #18
 800365a:	3301      	adds	r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800365e:	e002      	b.n	8003666 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3b01      	subs	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003666:	4b38      	ldr	r3, [pc, #224]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003672:	d102      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f2      	bne.n	8003660 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800367a:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d158      	bne.n	800373a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e057      	b.n	800373c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800368c:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003692:	4a2d      	ldr	r2, [pc, #180]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003698:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800369c:	e04d      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a4:	d141      	bne.n	800372a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036a6:	4b28      	ldr	r3, [pc, #160]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d131      	bne.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b4:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ba:	4a23      	ldr	r2, [pc, #140]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c4:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2232      	movs	r2, #50	@ 0x32
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	4a1c      	ldr	r2, [pc, #112]	@ (8003750 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	0c9b      	lsrs	r3, r3, #18
 80036e6:	3301      	adds	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ea:	e002      	b.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f2:	4b15      	ldr	r3, [pc, #84]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fe:	d102      	bne.n	8003706 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f2      	bne.n	80036ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003712:	d112      	bne.n	800373a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e011      	b.n	800373c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003724:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003728:	e007      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800372a:	4b07      	ldr	r3, [pc, #28]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003732:	4a05      	ldr	r2, [pc, #20]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003738:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40007000 	.word	0x40007000
 800374c:	20000068 	.word	0x20000068
 8003750:	431bde83 	.word	0x431bde83

08003754 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b06      	cmp	r3, #6
 8003766:	d87f      	bhi.n	8003868 <HAL_PWREx_EnableGPIOPullUp+0x114>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	0800378d 	.word	0x0800378d
 8003774:	080037b1 	.word	0x080037b1
 8003778:	080037d1 	.word	0x080037d1
 800377c:	080037ed 	.word	0x080037ed
 8003780:	08003809 	.word	0x08003809
 8003784:	08003825 	.word	0x08003825
 8003788:	08003845 	.word	0x08003845
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 800378c:	4b3b      	ldr	r3, [pc, #236]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003796:	4939      	ldr	r1, [pc, #228]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003798:	4313      	orrs	r3, r2
 800379a:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 800379c:	4b37      	ldr	r3, [pc, #220]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800379e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80037a6:	43db      	mvns	r3, r3
 80037a8:	4934      	ldr	r1, [pc, #208]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	624b      	str	r3, [r1, #36]	@ 0x24
       break;
 80037ae:	e05e      	b.n	800386e <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 80037b0:	4b32      	ldr	r3, [pc, #200]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037b4:	4931      	ldr	r1, [pc, #196]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	628b      	str	r3, [r1, #40]	@ 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80037bc:	4b2f      	ldr	r3, [pc, #188]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	43db      	mvns	r3, r3
 80037c8:	492c      	ldr	r1, [pc, #176]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
       break;
 80037ce:	e04e      	b.n	800386e <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 80037d0:	4b2a      	ldr	r3, [pc, #168]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d4:	4929      	ldr	r1, [pc, #164]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	@ 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80037dc:	4b27      	ldr	r3, [pc, #156]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	4925      	ldr	r1, [pc, #148]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	634b      	str	r3, [r1, #52]	@ 0x34
       break;
 80037ea:	e040      	b.n	800386e <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 80037ec:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037f0:	4922      	ldr	r1, [pc, #136]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	638b      	str	r3, [r1, #56]	@ 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80037f8:	4b20      	ldr	r3, [pc, #128]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80037fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	43db      	mvns	r3, r3
 8003800:	491e      	ldr	r1, [pc, #120]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003802:	4013      	ands	r3, r2
 8003804:	63cb      	str	r3, [r1, #60]	@ 0x3c
       break;
 8003806:	e032      	b.n	800386e <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 8003808:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800380a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800380c:	491b      	ldr	r1, [pc, #108]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	640b      	str	r3, [r1, #64]	@ 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	43db      	mvns	r3, r3
 800381c:	4917      	ldr	r1, [pc, #92]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800381e:	4013      	ands	r3, r2
 8003820:	644b      	str	r3, [r1, #68]	@ 0x44
       break;
 8003822:	e024      	b.n	800386e <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 8003824:	4b15      	ldr	r3, [pc, #84]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003826:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	4913      	ldr	r1, [pc, #76]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800382e:	4313      	orrs	r3, r2
 8003830:	648b      	str	r3, [r1, #72]	@ 0x48
       CLEAR_BIT(PWR->PDCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 8003832:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003834:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	490f      	ldr	r1, [pc, #60]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800383e:	4013      	ands	r3, r2
 8003840:	64cb      	str	r3, [r1, #76]	@ 0x4c
       break;
 8003842:	e014      	b.n	800386e <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, (GPIONumber & PWR_PORTG_AVAILABLE_PINS));
 8003844:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003846:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384e:	490b      	ldr	r1, [pc, #44]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003850:	4313      	orrs	r3, r2
 8003852:	650b      	str	r3, [r1, #80]	@ 0x50
       CLEAR_BIT(PWR->PDCRG, ((GPIONumber & PWR_PORTG_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_10))));
 8003854:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003856:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800385e:	43db      	mvns	r3, r3
 8003860:	4906      	ldr	r1, [pc, #24]	@ (800387c <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003862:	4013      	ands	r3, r2
 8003864:	654b      	str	r3, [r1, #84]	@ 0x54
       break;
 8003866:	e002      	b.n	800386e <HAL_PWREx_EnableGPIOPullUp+0x11a>
    default:
      status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      break;
 800386c:	bf00      	nop
  }

  return status;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40007000 	.word	0x40007000

08003880 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d87f      	bhi.n	8003994 <HAL_PWREx_EnableGPIOPullDown+0x114>
 8003894:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038b9 	.word	0x080038b9
 80038a0:	080038dd 	.word	0x080038dd
 80038a4:	080038fd 	.word	0x080038fd
 80038a8:	08003919 	.word	0x08003919
 80038ac:	08003935 	.word	0x08003935
 80038b0:	08003951 	.word	0x08003951
 80038b4:	08003971 	.word	0x08003971
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80038b8:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80038c2:	4939      	ldr	r1, [pc, #228]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	624b      	str	r3, [r1, #36]	@ 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80038c8:	4b37      	ldr	r3, [pc, #220]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d2:	43db      	mvns	r3, r3
 80038d4:	4934      	ldr	r1, [pc, #208]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	620b      	str	r3, [r1, #32]
       break;
 80038da:	e05e      	b.n	800399a <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80038dc:	4b32      	ldr	r3, [pc, #200]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	4930      	ldr	r1, [pc, #192]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80038ec:	4b2e      	ldr	r3, [pc, #184]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	492c      	ldr	r1, [pc, #176]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	628b      	str	r3, [r1, #40]	@ 0x28
       break;
 80038fa:	e04e      	b.n	800399a <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80038fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003900:	4929      	ldr	r1, [pc, #164]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	4313      	orrs	r3, r2
 8003906:	634b      	str	r3, [r1, #52]	@ 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8003908:	4b27      	ldr	r3, [pc, #156]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800390a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	43db      	mvns	r3, r3
 8003910:	4925      	ldr	r1, [pc, #148]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003912:	4013      	ands	r3, r2
 8003914:	630b      	str	r3, [r1, #48]	@ 0x30
       break;
 8003916:	e040      	b.n	800399a <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8003918:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800391a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800391c:	4922      	ldr	r1, [pc, #136]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	63cb      	str	r3, [r1, #60]	@ 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	43db      	mvns	r3, r3
 800392c:	491e      	ldr	r1, [pc, #120]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800392e:	4013      	ands	r3, r2
 8003930:	638b      	str	r3, [r1, #56]	@ 0x38
       break;
 8003932:	e032      	b.n	800399a <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 8003934:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003938:	491b      	ldr	r1, [pc, #108]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	644b      	str	r3, [r1, #68]	@ 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8003940:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	43db      	mvns	r3, r3
 8003948:	4917      	ldr	r1, [pc, #92]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800394a:	4013      	ands	r3, r2
 800394c:	640b      	str	r3, [r1, #64]	@ 0x40
       break;
 800394e:	e024      	b.n	800399a <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 8003950:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	4913      	ldr	r1, [pc, #76]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800395a:	4313      	orrs	r3, r2
 800395c:	64cb      	str	r3, [r1, #76]	@ 0x4c
       CLEAR_BIT(PWR->PUCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003960:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	490f      	ldr	r1, [pc, #60]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800396a:	4013      	ands	r3, r2
 800396c:	648b      	str	r3, [r1, #72]	@ 0x48
       break;
 800396e:	e014      	b.n	800399a <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, ((GPIONumber & PWR_PORTG_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_10))));
 8003970:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003972:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800397a:	490b      	ldr	r1, [pc, #44]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800397c:	4313      	orrs	r3, r2
 800397e:	654b      	str	r3, [r1, #84]	@ 0x54
       CLEAR_BIT(PWR->PUCRG, (GPIONumber & PWR_PORTG_AVAILABLE_PINS));
 8003980:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003982:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398a:	43db      	mvns	r3, r3
 800398c:	4906      	ldr	r1, [pc, #24]	@ (80039a8 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800398e:	4013      	ands	r3, r2
 8003990:	650b      	str	r3, [r1, #80]	@ 0x50
       break;
 8003992:	e002      	b.n	800399a <HAL_PWREx_EnableGPIOPullDown+0x11a>
    default:
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	bf00      	nop
  }

  return status;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40007000 	.word	0x40007000

080039ac <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a04      	ldr	r2, [pc, #16]	@ (80039c8 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ba:	6093      	str	r3, [r2, #8]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40007000 	.word	0x40007000

080039cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a04      	ldr	r2, [pc, #16]	@ (80039e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039da:	6093      	str	r3, [r2, #8]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039f2:	f7fd fbfb 	bl	80011ec <HAL_GetTick>
 80039f6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80039f8:	4b39      	ldr	r3, [pc, #228]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a38      	ldr	r2, [pc, #224]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 80039fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a02:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fd fbf1 	bl	80011ec <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e05f      	b.n	8003ad8 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a18:	4b31      	ldr	r3, [pc, #196]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8003a24:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003a2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a2e:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a30:	f7fd fbdc 	bl	80011ec <HAL_GetTick>
 8003a34:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8003a36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3e:	f7fd fbd5 	bl	80011ec <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e041      	b.n	8003ad8 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003a54:	4b22      	ldr	r3, [pc, #136]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d1ee      	bne.n	8003a3e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003a60:	4b20      	ldr	r3, [pc, #128]	@ (8003ae4 <HAL_RCC_DeInit+0xf8>)
 8003a62:	4a21      	ldr	r2, [pc, #132]	@ (8003ae8 <HAL_RCC_DeInit+0xfc>)
 8003a64:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a66:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <HAL_RCC_DeInit+0x100>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fb72 	bl	8001154 <HAL_InitTick>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e02e      	b.n	8003ad8 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003a7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003a7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a80:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003a82:	4b17      	ldr	r3, [pc, #92]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a88:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a8a:	f7fd fbaf 	bl	80011ec <HAL_GetTick>
 8003a8e:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fd fbab 	bl	80011ec <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e019      	b.n	8003ad8 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003ab2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003ac6:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <HAL_RCC_DeInit+0xf4>)
 8003ace:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ad2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	20000068 	.word	0x20000068
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	2000006c 	.word	0x2000006c

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e2fe      	b.n	8004100 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d075      	beq.n	8003bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0e:	4b97      	ldr	r3, [pc, #604]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b18:	4b94      	ldr	r3, [pc, #592]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d102      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3e>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCC_OscConfig+0x44>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	4b8d      	ldr	r3, [pc, #564]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05b      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x108>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d157      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e2d9      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x74>
 8003b56:	4b85      	ldr	r3, [pc, #532]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a84      	ldr	r2, [pc, #528]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e01d      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x98>
 8003b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7e      	ldr	r2, [pc, #504]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b88:	4b78      	ldr	r3, [pc, #480]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a77      	ldr	r2, [pc, #476]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b75      	ldr	r3, [pc, #468]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a74      	ldr	r2, [pc, #464]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fb20 	bl	80011ec <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fb1c 	bl	80011ec <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	@ 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e29e      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xc0>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fb0c 	bl	80011ec <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fb08 	bl	80011ec <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e28a      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bea:	4b60      	ldr	r3, [pc, #384]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xe8>
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d075      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c06:	4b59      	ldr	r3, [pc, #356]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c10:	4b56      	ldr	r3, [pc, #344]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d102      	bne.n	8003c26 <HAL_RCC_OscConfig+0x136>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d002      	beq.n	8003c2c <HAL_RCC_OscConfig+0x13c>
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d11f      	bne.n	8003c6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_OscConfig+0x154>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e25d      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b49      	ldr	r3, [pc, #292]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	4946      	ldr	r1, [pc, #280]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c58:	4b45      	ldr	r3, [pc, #276]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fa79 	bl	8001154 <HAL_InitTick>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d043      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e249      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d023      	beq.n	8003cbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c74:	4b3d      	ldr	r3, [pc, #244]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3c      	ldr	r2, [pc, #240]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fd fab4 	bl	80011ec <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fd fab0 	bl	80011ec <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e232      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9a:	4b34      	ldr	r3, [pc, #208]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b31      	ldr	r3, [pc, #196]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	492d      	ldr	r1, [pc, #180]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
 8003cba:	e01a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003cc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fa90 	bl	80011ec <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fd fa8c 	bl	80011ec <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e20e      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce2:	4b22      	ldr	r3, [pc, #136]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1e0>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d041      	beq.n	8003d82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d06:	4b19      	ldr	r3, [pc, #100]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0c:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd fa69 	bl	80011ec <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fd fa65 	bl	80011ec <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1e7      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d30:	4b0e      	ldr	r3, [pc, #56]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ef      	beq.n	8003d1e <HAL_RCC_OscConfig+0x22e>
 8003d3e:	e020      	b.n	8003d82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d46:	4a09      	ldr	r2, [pc, #36]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fd fa4c 	bl	80011ec <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d56:	e00d      	b.n	8003d74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d58:	f7fd fa48 	bl	80011ec <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d906      	bls.n	8003d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1ca      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	2000006c 	.word	0x2000006c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d74:	4b8c      	ldr	r3, [pc, #560]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ea      	bne.n	8003d58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80a6 	beq.w	8003edc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d94:	4b84      	ldr	r3, [pc, #528]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2b4>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x2b6>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003daa:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dae:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db6:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc6:	4b79      	ldr	r3, [pc, #484]	@ (8003fac <HAL_RCC_OscConfig+0x4bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d118      	bne.n	8003e04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd2:	4b76      	ldr	r3, [pc, #472]	@ (8003fac <HAL_RCC_OscConfig+0x4bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a75      	ldr	r2, [pc, #468]	@ (8003fac <HAL_RCC_OscConfig+0x4bc>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7fd fa05 	bl	80011ec <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fd fa01 	bl	80011ec <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e183      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df8:	4b6c      	ldr	r3, [pc, #432]	@ (8003fac <HAL_RCC_OscConfig+0x4bc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d108      	bne.n	8003e1e <HAL_RCC_OscConfig+0x32e>
 8003e0c:	4b66      	ldr	r3, [pc, #408]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	4a65      	ldr	r2, [pc, #404]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e1c:	e024      	b.n	8003e68 <HAL_RCC_OscConfig+0x378>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d110      	bne.n	8003e48 <HAL_RCC_OscConfig+0x358>
 8003e26:	4b60      	ldr	r3, [pc, #384]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e36:	4b5c      	ldr	r3, [pc, #368]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e46:	e00f      	b.n	8003e68 <HAL_RCC_OscConfig+0x378>
 8003e48:	4b57      	ldr	r3, [pc, #348]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	4a56      	ldr	r2, [pc, #344]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e58:	4b53      	ldr	r3, [pc, #332]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	4a52      	ldr	r2, [pc, #328]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d016      	beq.n	8003e9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fd f9bc 	bl	80011ec <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fd f9b8 	bl	80011ec <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e138      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8e:	4b46      	ldr	r3, [pc, #280]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ed      	beq.n	8003e78 <HAL_RCC_OscConfig+0x388>
 8003e9c:	e015      	b.n	8003eca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fd f9a5 	bl	80011ec <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fd f9a1 	bl	80011ec <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e121      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ed      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed0:	4b35      	ldr	r3, [pc, #212]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	4a34      	ldr	r2, [pc, #208]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03c      	beq.n	8003f62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd f974 	bl	80011ec <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f08:	f7fd f970 	bl	80011ec <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0f2      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f1a:	4b23      	ldr	r3, [pc, #140]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ef      	beq.n	8003f08 <HAL_RCC_OscConfig+0x418>
 8003f28:	e01b      	b.n	8003f62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f30:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fd f957 	bl	80011ec <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f42:	f7fd f953 	bl	80011ec <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e0d5      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f54:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ef      	bne.n	8003f42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80c9 	beq.w	80040fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	f000 8083 	beq.w	8004080 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d15e      	bne.n	8004040 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a08      	ldr	r2, [pc, #32]	@ (8003fa8 <HAL_RCC_OscConfig+0x4b8>)
 8003f88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd f92d 	bl	80011ec <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f94:	e00c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fd f929 	bl	80011ec <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d905      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e0ab      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb0:	4b55      	ldr	r3, [pc, #340]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ec      	bne.n	8003f96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fbc:	4b52      	ldr	r3, [pc, #328]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	4b52      	ldr	r3, [pc, #328]	@ (800410c <HAL_RCC_OscConfig+0x61c>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6a11      	ldr	r1, [r2, #32]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fd6:	0212      	lsls	r2, r2, #8
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0552      	lsls	r2, r2, #21
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fea:	0852      	lsrs	r2, r2, #1
 8003fec:	3a01      	subs	r2, #1
 8003fee:	0652      	lsls	r2, r2, #25
 8003ff0:	4311      	orrs	r1, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ff6:	06d2      	lsls	r2, r2, #27
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	4943      	ldr	r1, [pc, #268]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a40      	ldr	r2, [pc, #256]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800400c:	4b3e      	ldr	r3, [pc, #248]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a3d      	ldr	r2, [pc, #244]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004016:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd f8e8 	bl	80011ec <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd f8e4 	bl	80011ec <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e066      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	4b35      	ldr	r3, [pc, #212]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x530>
 800403e:	e05e      	b.n	80040fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004040:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a30      	ldr	r2, [pc, #192]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd f8ce 	bl	80011ec <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd f8ca 	bl	80011ec <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04c      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004066:	4b28      	ldr	r3, [pc, #160]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004072:	4b25      	ldr	r3, [pc, #148]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	4924      	ldr	r1, [pc, #144]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 8004078:	4b25      	ldr	r3, [pc, #148]	@ (8004110 <HAL_RCC_OscConfig+0x620>)
 800407a:	4013      	ands	r3, r2
 800407c:	60cb      	str	r3, [r1, #12]
 800407e:	e03e      	b.n	80040fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e039      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800408c:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <HAL_RCC_OscConfig+0x618>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0203 	and.w	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	429a      	cmp	r2, r3
 800409e:	d12c      	bne.n	80040fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	3b01      	subs	r3, #1
 80040ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d123      	bne.n	80040fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d11b      	bne.n	80040fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d113      	bne.n	80040fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	3b01      	subs	r3, #1
 80040e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d109      	bne.n	80040fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	3b01      	subs	r3, #1
 80040f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	019f800c 	.word	0x019f800c
 8004110:	feeefffc 	.word	0xfeeefffc

08004114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e11e      	b.n	800436a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b91      	ldr	r3, [pc, #580]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b8e      	ldr	r3, [pc, #568]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 020f 	bic.w	r2, r3, #15
 8004142:	498c      	ldr	r1, [pc, #560]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b8a      	ldr	r3, [pc, #552]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e106      	b.n	800436a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d073      	beq.n	8004250 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d129      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004170:	4b81      	ldr	r3, [pc, #516]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0f4      	b.n	800436a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004180:	f000 f966 	bl	8004450 <RCC_GetSysClockFreqFromPLLSource>
 8004184:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4a7c      	ldr	r2, [pc, #496]	@ (800437c <HAL_RCC_ClockConfig+0x268>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d93f      	bls.n	800420e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800418e:	4b7a      	ldr	r3, [pc, #488]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d033      	beq.n	800420e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d12f      	bne.n	800420e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041ae:	4b72      	ldr	r3, [pc, #456]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041b6:	4a70      	ldr	r2, [pc, #448]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 80041b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041be:	2380      	movs	r3, #128	@ 0x80
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e024      	b.n	800420e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0c6      	b.n	800436a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041dc:	4b66      	ldr	r3, [pc, #408]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0be      	b.n	800436a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041ec:	f000 f8ce 	bl	800438c <HAL_RCC_GetSysClockFreq>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4a61      	ldr	r2, [pc, #388]	@ (800437c <HAL_RCC_ClockConfig+0x268>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d909      	bls.n	800420e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004202:	4a5d      	ldr	r2, [pc, #372]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004208:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800420a:	2380      	movs	r3, #128	@ 0x80
 800420c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b5a      	ldr	r3, [pc, #360]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4957      	ldr	r1, [pc, #348]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fc ffe4 	bl	80011ec <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fc ffe0 	bl	80011ec <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e095      	b.n	800436a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b4e      	ldr	r3, [pc, #312]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a42      	ldr	r2, [pc, #264]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800426e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004272:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004280:	4b3d      	ldr	r3, [pc, #244]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004288:	4a3b      	ldr	r2, [pc, #236]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800428a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800428e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4936      	ldr	r1, [pc, #216]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b80      	cmp	r3, #128	@ 0x80
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042aa:	4b33      	ldr	r3, [pc, #204]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	4a32      	ldr	r2, [pc, #200]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 80042b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d21d      	bcs.n	8004300 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f023 020f 	bic.w	r2, r3, #15
 80042cc:	4929      	ldr	r1, [pc, #164]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042d4:	f7fc ff8a 	bl	80011ec <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fc ff86 	bl	80011ec <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e03b      	b.n	800436a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_RCC_ClockConfig+0x260>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1ed      	bne.n	80042dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800430c:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4917      	ldr	r1, [pc, #92]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432a:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	490f      	ldr	r1, [pc, #60]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800433e:	f000 f825 	bl	800438c <HAL_RCC_GetSysClockFreq>
 8004342:	4602      	mov	r2, r0
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <HAL_RCC_ClockConfig+0x264>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	490c      	ldr	r1, [pc, #48]	@ (8004380 <HAL_RCC_ClockConfig+0x26c>)
 8004350:	5ccb      	ldrb	r3, [r1, r3]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	fa22 f303 	lsr.w	r3, r2, r3
 800435a:	4a0a      	ldr	r2, [pc, #40]	@ (8004384 <HAL_RCC_ClockConfig+0x270>)
 800435c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800435e:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <HAL_RCC_ClockConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc fef6 	bl	8001154 <HAL_InitTick>
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40022000 	.word	0x40022000
 8004378:	40021000 	.word	0x40021000
 800437c:	04c4b400 	.word	0x04c4b400
 8004380:	080049e8 	.word	0x080049e8
 8004384:	20000068 	.word	0x20000068
 8004388:	2000006c 	.word	0x2000006c

0800438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004392:	4b2c      	ldr	r3, [pc, #176]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d102      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800439e:	4b2a      	ldr	r3, [pc, #168]	@ (8004448 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e047      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043a4:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d102      	bne.n	80043b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b0:	4b26      	ldr	r3, [pc, #152]	@ (800444c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	e03e      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043b6:	4b23      	ldr	r3, [pc, #140]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d136      	bne.n	8004430 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c2:	4b20      	ldr	r3, [pc, #128]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3301      	adds	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043e0:	4a1a      	ldr	r2, [pc, #104]	@ (800444c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	4a16      	ldr	r2, [pc, #88]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ea:	68d2      	ldr	r2, [r2, #12]
 80043ec:	0a12      	lsrs	r2, r2, #8
 80043ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]
      break;
 80043f8:	e00c      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043fa:	4a13      	ldr	r2, [pc, #76]	@ (8004448 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	4a10      	ldr	r2, [pc, #64]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	0a12      	lsrs	r2, r2, #8
 8004408:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
      break;
 8004412:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004414:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0e5b      	lsrs	r3, r3, #25
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	3301      	adds	r3, #1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e001      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004434:	693b      	ldr	r3, [r7, #16]
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
 8004448:	00f42400 	.word	0x00f42400
 800444c:	007a1200 	.word	0x007a1200

08004450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004456:	4b1e      	ldr	r3, [pc, #120]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d10c      	bne.n	800448e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004474:	4a17      	ldr	r2, [pc, #92]	@ (80044d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	4a14      	ldr	r2, [pc, #80]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800447e:	68d2      	ldr	r2, [r2, #12]
 8004480:	0a12      	lsrs	r2, r2, #8
 8004482:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	617b      	str	r3, [r7, #20]
    break;
 800448c:	e00c      	b.n	80044a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800448e:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	4a0e      	ldr	r2, [pc, #56]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	0a12      	lsrs	r2, r2, #8
 800449c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]
    break;
 80044a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0e5b      	lsrs	r3, r3, #25
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044c2:	687b      	ldr	r3, [r7, #4]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40021000 	.word	0x40021000
 80044d4:	007a1200 	.word	0x007a1200
 80044d8:	00f42400 	.word	0x00f42400

080044dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e4:	2300      	movs	r3, #0
 80044e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8098 	beq.w	800462a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b43      	ldr	r3, [pc, #268]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b40      	ldr	r3, [pc, #256]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	4a3f      	ldr	r2, [pc, #252]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004514:	6593      	str	r3, [r2, #88]	@ 0x58
 8004516:	4b3d      	ldr	r3, [pc, #244]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004526:	4b3a      	ldr	r3, [pc, #232]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a39      	ldr	r2, [pc, #228]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004532:	f7fc fe5b 	bl	80011ec <HAL_GetTick>
 8004536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004538:	e009      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fc fe57 	bl	80011ec <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d902      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	74fb      	strb	r3, [r7, #19]
        break;
 800454c:	e005      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454e:	4b30      	ldr	r3, [pc, #192]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ef      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d159      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004560:	4b2a      	ldr	r3, [pc, #168]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01e      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	429a      	cmp	r2, r3
 800457a:	d019      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800457c:	4b23      	ldr	r3, [pc, #140]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004588:	4b20      	ldr	r3, [pc, #128]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004598:	4b1c      	ldr	r3, [pc, #112]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459e:	4a1b      	ldr	r2, [pc, #108]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045a8:	4a18      	ldr	r2, [pc, #96]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fc fe17 	bl	80011ec <HAL_GetTick>
 80045be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c0:	e00b      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fc fe13 	bl	80011ec <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d902      	bls.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	74fb      	strb	r3, [r7, #19]
            break;
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045da:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0ec      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ee:	4b07      	ldr	r3, [pc, #28]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fc:	4903      	ldr	r1, [pc, #12]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004604:	e008      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	74bb      	strb	r3, [r7, #18]
 800460a:	e005      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800460c:	40021000 	.word	0x40021000
 8004610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004618:	7c7b      	ldrb	r3, [r7, #17]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461e:	4ba7      	ldr	r3, [pc, #668]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004622:	4aa6      	ldr	r2, [pc, #664]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004628:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004636:	4ba1      	ldr	r3, [pc, #644]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463c:	f023 0203 	bic.w	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	499d      	ldr	r1, [pc, #628]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004658:	4b98      	ldr	r3, [pc, #608]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f023 020c 	bic.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4995      	ldr	r1, [pc, #596]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467a:	4b90      	ldr	r3, [pc, #576]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	498c      	ldr	r1, [pc, #560]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800469c:	4b87      	ldr	r3, [pc, #540]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	4984      	ldr	r1, [pc, #528]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046be:	4b7f      	ldr	r3, [pc, #508]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	497b      	ldr	r1, [pc, #492]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046e0:	4b76      	ldr	r3, [pc, #472]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	4973      	ldr	r1, [pc, #460]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004702:	4b6e      	ldr	r3, [pc, #440]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004708:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	496a      	ldr	r1, [pc, #424]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004724:	4b65      	ldr	r3, [pc, #404]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4962      	ldr	r1, [pc, #392]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004746:	4b5d      	ldr	r3, [pc, #372]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	4959      	ldr	r1, [pc, #356]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004768:	4b54      	ldr	r3, [pc, #336]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	4951      	ldr	r1, [pc, #324]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478a:	4b4c      	ldr	r3, [pc, #304]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004790:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	4948      	ldr	r1, [pc, #288]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d015      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ac:	4b43      	ldr	r3, [pc, #268]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ba:	4940      	ldr	r1, [pc, #256]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ca:	d105      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047cc:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a3a      	ldr	r2, [pc, #232]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d015      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047e4:	4b35      	ldr	r3, [pc, #212]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f2:	4932      	ldr	r1, [pc, #200]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004802:	d105      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004804:	4b2d      	ldr	r3, [pc, #180]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a2c      	ldr	r2, [pc, #176]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800480e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d015      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	4924      	ldr	r1, [pc, #144]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800483a:	d105      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800483c:	4b1f      	ldr	r3, [pc, #124]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004846:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004854:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004862:	4916      	ldr	r1, [pc, #88]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004872:	d105      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004874:	4b11      	ldr	r3, [pc, #68]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4a10      	ldr	r2, [pc, #64]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800487e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d019      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	4908      	ldr	r1, [pc, #32]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048aa:	d109      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ac:	4b03      	ldr	r3, [pc, #12]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a02      	ldr	r2, [pc, #8]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b6:	60d3      	str	r3, [r2, #12]
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d015      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048cc:	4b29      	ldr	r3, [pc, #164]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	4926      	ldr	r1, [pc, #152]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ea:	d105      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048ec:	4b21      	ldr	r3, [pc, #132]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a20      	ldr	r2, [pc, #128]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d015      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004904:	4b1b      	ldr	r3, [pc, #108]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004912:	4918      	ldr	r1, [pc, #96]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004922:	d105      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004924:	4b13      	ldr	r3, [pc, #76]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a12      	ldr	r2, [pc, #72]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800493c:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800493e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004942:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800495a:	d105      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a04      	ldr	r2, [pc, #16]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004966:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004968:	7cbb      	ldrb	r3, [r7, #18]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000

08004978 <memset>:
 8004978:	4402      	add	r2, r0
 800497a:	4603      	mov	r3, r0
 800497c:	4293      	cmp	r3, r2
 800497e:	d100      	bne.n	8004982 <memset+0xa>
 8004980:	4770      	bx	lr
 8004982:	f803 1b01 	strb.w	r1, [r3], #1
 8004986:	e7f9      	b.n	800497c <memset+0x4>

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	@ (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	@ (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	@ (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	@ (80049cc <__libc_init_array+0x44>)
 800499c:	f000 f818 	bl	80049d0 <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08004a08 	.word	0x08004a08
 80049c4:	08004a08 	.word	0x08004a08
 80049c8:	08004a08 	.word	0x08004a08
 80049cc:	08004a0c 	.word	0x08004a0c

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
