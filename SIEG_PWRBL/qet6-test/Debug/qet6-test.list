
qet6-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000463c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004834  08004834  00006078  2**0
                  CONTENTS
  4 .ARM          00000000  08004834  08004834  00006078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004834  08004834  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004834  08004834  00005834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004838  08004838  00005838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800483c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000078  080048b4  00006078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080048b4  000061ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba10  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002337  00000000  00000000  00011ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00013df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000854  00000000  00000000  00014910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247aa  00000000  00000000  00015164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbaf  00000000  00000000  0003990e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5d73  00000000  00000000  000454bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf0  00000000  00000000  0012b274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012de64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080047fc 	.word	0x080047fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	080047fc 	.word	0x080047fc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fed2 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8e7 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f99b 	bl	8000560 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f951 	bl	80004d0 <MX_FDCAN1_Init>
  MX_CRC_Init();
 800022e:	f000 f92d 	bl	800048c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  SCB->VTOR = FLASH_BASE | 0x00000000;
 8000232:	4b63      	ldr	r3, [pc, #396]	@ (80003c0 <main+0x1a8>)
 8000234:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000238:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800023a:	b662      	cpsie	i
}
 800023c:	bf00      	nop
  __enable_irq();
  __HAL_RCC_PWR_CLK_ENABLE();
 800023e:	4b61      	ldr	r3, [pc, #388]	@ (80003c4 <main+0x1ac>)
 8000240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000242:	4a60      	ldr	r2, [pc, #384]	@ (80003c4 <main+0x1ac>)
 8000244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000248:	6593      	str	r3, [r2, #88]	@ 0x58
 800024a:	4b5e      	ldr	r3, [pc, #376]	@ (80003c4 <main+0x1ac>)
 800024c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800024e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 8000256:	f003 f88f 	bl	8003378 <HAL_PWR_EnableBkUpAccess>
  FDCAN_Fil1.IdType = FDCAN_STANDARD_ID;
 800025a:	4b5b      	ldr	r3, [pc, #364]	@ (80003c8 <main+0x1b0>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
  FDCAN_Fil1.FilterIndex = 0;
 8000260:	4b59      	ldr	r3, [pc, #356]	@ (80003c8 <main+0x1b0>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  FDCAN_Fil1.FilterType = FDCAN_FILTER_RANGE;
 8000266:	4b58      	ldr	r3, [pc, #352]	@ (80003c8 <main+0x1b0>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  FDCAN_Fil1.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800026c:	4b56      	ldr	r3, [pc, #344]	@ (80003c8 <main+0x1b0>)
 800026e:	2201      	movs	r2, #1
 8000270:	60da      	str	r2, [r3, #12]
  FDCAN_Fil1.FilterID1 = 0x000;
 8000272:	4b55      	ldr	r3, [pc, #340]	@ (80003c8 <main+0x1b0>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  FDCAN_Fil1.FilterID2 = 0x200;
 8000278:	4b53      	ldr	r3, [pc, #332]	@ (80003c8 <main+0x1b0>)
 800027a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800027e:	615a      	str	r2, [r3, #20]

  TxHeader.Identifier = 0x100; //id
 8000280:	4b52      	ldr	r3, [pc, #328]	@ (80003cc <main+0x1b4>)
 8000282:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000286:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000288:	4b50      	ldr	r3, [pc, #320]	@ (80003cc <main+0x1b4>)
 800028a:	2200      	movs	r2, #0
 800028c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800028e:	4b4f      	ldr	r3, [pc, #316]	@ (80003cc <main+0x1b4>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000294:	4b4d      	ldr	r3, [pc, #308]	@ (80003cc <main+0x1b4>)
 8000296:	2208      	movs	r2, #8
 8000298:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800029a:	4b4c      	ldr	r3, [pc, #304]	@ (80003cc <main+0x1b4>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_FRAME_FD_NO_BRS; //FDCAN_FRAME_FD_NO_BRS; //FDCAN_BRS_ON;
 80002a0:	4b4a      	ldr	r3, [pc, #296]	@ (80003cc <main+0x1b4>)
 80002a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002a6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN; //FDCAN_FD_CAN;
 80002a8:	4b48      	ldr	r3, [pc, #288]	@ (80003cc <main+0x1b4>)
 80002aa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002ae:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80002b0:	4b46      	ldr	r3, [pc, #280]	@ (80003cc <main+0x1b4>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80002b6:	4b45      	ldr	r3, [pc, #276]	@ (80003cc <main+0x1b4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]

  HAL_FDCAN_ConfigFilter(&hfdcan1,&FDCAN_Fil1);
 80002bc:	4942      	ldr	r1, [pc, #264]	@ (80003c8 <main+0x1b0>)
 80002be:	4844      	ldr	r0, [pc, #272]	@ (80003d0 <main+0x1b8>)
 80002c0:	f001 fc0d 	bl	8001ade <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT, DISABLE, DISABLE);
 80002c4:	2300      	movs	r3, #0
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2300      	movs	r3, #0
 80002ca:	2202      	movs	r2, #2
 80002cc:	2100      	movs	r1, #0
 80002ce:	4840      	ldr	r0, [pc, #256]	@ (80003d0 <main+0x1b8>)
 80002d0:	f001 fc5f 	bl	8001b92 <HAL_FDCAN_ConfigGlobalFilter>
//  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
//  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80002d4:	2200      	movs	r2, #0
 80002d6:	2101      	movs	r1, #1
 80002d8:	483d      	ldr	r0, [pc, #244]	@ (80003d0 <main+0x1b8>)
 80002da:	f001 fedd 	bl	8002098 <HAL_FDCAN_ActivateNotification>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <main+0xd0>
  {
    Error_Handler();
 80002e4:	f000 fd2e 	bl	8000d44 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 5, 0) != HAL_OK)
 80002e8:	2200      	movs	r2, #0
 80002ea:	2105      	movs	r1, #5
 80002ec:	4838      	ldr	r0, [pc, #224]	@ (80003d0 <main+0x1b8>)
 80002ee:	f001 fc81 	bl	8001bf4 <HAL_FDCAN_ConfigTxDelayCompensation>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <main+0xe4>
  {
    Error_Handler();
 80002f8:	f000 fd24 	bl	8000d44 <Error_Handler>
  }
  if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 80002fc:	4834      	ldr	r0, [pc, #208]	@ (80003d0 <main+0x1b8>)
 80002fe:	f001 fc9b 	bl	8001c38 <HAL_FDCAN_EnableTxDelayCompensation>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <main+0xf4>
  {
    Error_Handler();
 8000308:	f000 fd1c 	bl	8000d44 <Error_Handler>
  }
  HAL_FDCAN_Start(&hfdcan1);
 800030c:	4830      	ldr	r0, [pc, #192]	@ (80003d0 <main+0x1b8>)
 800030e:	f001 fcb4 	bl	8001c7a <HAL_FDCAN_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000318:	482e      	ldr	r0, [pc, #184]	@ (80003d4 <main+0x1bc>)
 800031a:	f003 f815 	bl	8003348 <HAL_GPIO_WritePin>
		    Error_Handler();
		  }
		  HAL_Delay(1000);
		  Standby();
	  }*/
      if (READ_REG( TAMP->BKP15R) == 0xDEADBEEF)
 800031e:	4b2e      	ldr	r3, [pc, #184]	@ (80003d8 <main+0x1c0>)
 8000320:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8000324:	4a2d      	ldr	r2, [pc, #180]	@ (80003dc <main+0x1c4>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d114      	bne.n	8000354 <main+0x13c>
      {
		  load_APP_flag = 0;
 800032a:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <main+0x1c8>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxBL) != HAL_OK) //write rear will receive error message
 8000330:	4a2c      	ldr	r2, [pc, #176]	@ (80003e4 <main+0x1cc>)
 8000332:	4926      	ldr	r1, [pc, #152]	@ (80003cc <main+0x1b4>)
 8000334:	4826      	ldr	r0, [pc, #152]	@ (80003d0 <main+0x1b8>)
 8000336:	f001 fd38 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <main+0x12c>
		  {
			Error_Handler();
 8000340:	f000 fd00 	bl	8000d44 <Error_Handler>
		  }
		  WRITE_REG( TAMP->BKP15R, 0x00000000);
 8000344:	4b24      	ldr	r3, [pc, #144]	@ (80003d8 <main+0x1c0>)
 8000346:	2200      	movs	r2, #0
 8000348:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		  HAL_Delay(100);
 800034c:	2064      	movs	r0, #100	@ 0x64
 800034e:	f000 fedf 	bl	8001110 <HAL_Delay>
 8000352:	e7e4      	b.n	800031e <main+0x106>
		  //*(volatile uint32_t*)Ram_Flag = 0x00000000;

	  }
	  //else if(*(volatile uint32_t*)Ram_Flag == 0xBEEFBEEF){
	  else if (READ_REG( TAMP->BKP15R) == 0xBEEFBEEF)
 8000354:	4b20      	ldr	r3, [pc, #128]	@ (80003d8 <main+0x1c0>)
 8000356:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800035a:	4a23      	ldr	r2, [pc, #140]	@ (80003e8 <main+0x1d0>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d116      	bne.n	800038e <main+0x176>
	  {
		  //*(volatile uint32_t*)Ram_Flag = 0x00000000;
		  load_APP_flag = 0;
 8000360:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <main+0x1c8>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
		  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Txstandby) != HAL_OK) //write rear will receive error message
 8000366:	4a21      	ldr	r2, [pc, #132]	@ (80003ec <main+0x1d4>)
 8000368:	4918      	ldr	r1, [pc, #96]	@ (80003cc <main+0x1b4>)
 800036a:	4819      	ldr	r0, [pc, #100]	@ (80003d0 <main+0x1b8>)
 800036c:	f001 fd1d 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <main+0x162>
		  {
			Error_Handler();
 8000376:	f000 fce5 	bl	8000d44 <Error_Handler>
	      }
		  //*(volatile uint32_t*)Ram_Flag = 0x00000000;
	      WRITE_REG( TAMP->BKP15R, 0x00000000);
 800037a:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <main+0x1c0>)
 800037c:	2200      	movs	r2, #0
 800037e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		  HAL_Delay(100);
 8000382:	2064      	movs	r0, #100	@ 0x64
 8000384:	f000 fec4 	bl	8001110 <HAL_Delay>
		  Standby();
 8000388:	f000 fcba 	bl	8000d00 <Standby>
 800038c:	e7c7      	b.n	800031e <main+0x106>
	  }
	  //else if(load_APP_flag == 1 && *(volatile uint32_t*)Ram_Flag != 0xDEADBEEF && *(volatile uint32_t*)Ram_Flag != 0xBEEFBEEF){
	  else if (load_APP_flag == 1 && READ_REG( TAMP->BKP15R) != 0xDEADBEEF && READ_REG( TAMP->BKP15R) != 0xBEEFBEEF)
 800038e:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <main+0x1c8>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b01      	cmp	r3, #1
 8000396:	d1c2      	bne.n	800031e <main+0x106>
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <main+0x1c0>)
 800039a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800039e:	4a0f      	ldr	r2, [pc, #60]	@ (80003dc <main+0x1c4>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d0bc      	beq.n	800031e <main+0x106>
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <main+0x1c0>)
 80003a6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80003aa:	4a0f      	ldr	r2, [pc, #60]	@ (80003e8 <main+0x1d0>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d0b6      	beq.n	800031e <main+0x106>
	  {
		  load_APP_flag = 0;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <main+0x1c8>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
		  iap_load_app(FLASH_APP_ADDR);
 80003b6:	480e      	ldr	r0, [pc, #56]	@ (80003f0 <main+0x1d8>)
 80003b8:	f000 fa2c 	bl	8000814 <iap_load_app>
      if (READ_REG( TAMP->BKP15R) == 0xDEADBEEF)
 80003bc:	e7af      	b.n	800031e <main+0x106>
 80003be:	bf00      	nop
 80003c0:	e000ed00 	.word	0xe000ed00
 80003c4:	40021000 	.word	0x40021000
 80003c8:	200001cc 	.word	0x200001cc
 80003cc:	200001a8 	.word	0x200001a8
 80003d0:	200000b8 	.word	0x200000b8
 80003d4:	48001400 	.word	0x48001400
 80003d8:	40002400 	.word	0x40002400
 80003dc:	deadbeef 	.word	0xdeadbeef
 80003e0:	20000130 	.word	0x20000130
 80003e4:	2000003c 	.word	0x2000003c
 80003e8:	beefbeef 	.word	0xbeefbeef
 80003ec:	20000044 	.word	0x20000044
 80003f0:	08008000 	.word	0x08008000

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b094      	sub	sp, #80	@ 0x50
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0318 	add.w	r3, r7, #24
 80003fe:	2238      	movs	r2, #56	@ 0x38
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f004 f9ce 	bl	80047a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000416:	2000      	movs	r0, #0
 8000418:	f003 f80e 	bl	8003438 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041c:	2302      	movs	r3, #2
 800041e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000424:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	2340      	movs	r3, #64	@ 0x40
 8000428:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800042e:	2302      	movs	r3, #2
 8000430:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000432:	2301      	movs	r3, #1
 8000434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000436:	2314      	movs	r3, #20
 8000438:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800043a:	2302      	movs	r3, #2
 800043c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800043e:	2302      	movs	r3, #2
 8000440:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000442:	2302      	movs	r3, #2
 8000444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f107 0318 	add.w	r3, r7, #24
 800044a:	4618      	mov	r0, r3
 800044c:	f003 fa66 	bl	800391c <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000456:	f000 fc75 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045a:	230f      	movs	r3, #15
 800045c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045e:	2303      	movs	r3, #3
 8000460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2104      	movs	r1, #4
 8000472:	4618      	mov	r0, r3
 8000474:	f003 fd64 	bl	8003f40 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800047e:	f000 fc61 	bl	8000d44 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3750      	adds	r7, #80	@ 0x50
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000490:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <MX_CRC_Init+0x3c>)
 8000492:	4a0e      	ldr	r2, [pc, #56]	@ (80004cc <MX_CRC_Init+0x40>)
 8000494:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <MX_CRC_Init+0x3c>)
 8000498:	2200      	movs	r2, #0
 800049a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800049c:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <MX_CRC_Init+0x3c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <MX_CRC_Init+0x3c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <MX_CRC_Init+0x3c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <MX_CRC_Init+0x3c>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004b4:	4804      	ldr	r0, [pc, #16]	@ (80004c8 <MX_CRC_Init+0x3c>)
 80004b6:	f000 ff8f 	bl	80013d8 <HAL_CRC_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80004c0:	f000 fc40 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000094 	.word	0x20000094
 80004cc:	40023000 	.word	0x40023000

080004d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004d4:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 80004d6:	4a21      	ldr	r2, [pc, #132]	@ (800055c <MX_FDCAN1_Init+0x8c>)
 80004d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV8;
 80004da:	4b1f      	ldr	r3, [pc, #124]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 80004dc:	2204      	movs	r2, #4
 80004de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80004e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 80004e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80004f4:	4b18      	ldr	r3, [pc, #96]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80004fa:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000500:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000502:	2201      	movs	r2, #1
 8000504:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000506:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000508:	2201      	movs	r2, #1
 800050a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 800050e:	220f      	movs	r2, #15
 8000510:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000514:	2204      	movs	r2, #4
 8000516:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 800051a:	2201      	movs	r2, #1
 800051c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000520:	2201      	movs	r2, #1
 8000522:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000526:	220f      	movs	r2, #15
 8000528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 800052c:	2204      	movs	r2, #4
 800052e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000532:	220a      	movs	r2, #10
 8000534:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000538:	2200      	movs	r2, #0
 800053a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 800053e:	2200      	movs	r2, #0
 8000540:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <MX_FDCAN1_Init+0x88>)
 8000544:	f001 f94e 	bl	80017e4 <HAL_FDCAN_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800054e:	f000 fbf9 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000b8 	.word	0x200000b8
 800055c:	40006400 	.word	0x40006400

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b25      	ldr	r3, [pc, #148]	@ (800060c <MX_GPIO_Init+0xac>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a24      	ldr	r2, [pc, #144]	@ (800060c <MX_GPIO_Init+0xac>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b22      	ldr	r3, [pc, #136]	@ (800060c <MX_GPIO_Init+0xac>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <MX_GPIO_Init+0xac>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a1e      	ldr	r2, [pc, #120]	@ (800060c <MX_GPIO_Init+0xac>)
 8000594:	f043 0320 	orr.w	r3, r3, #32
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <MX_GPIO_Init+0xac>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0320 	and.w	r3, r3, #32
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <MX_GPIO_Init+0xac>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a18      	ldr	r2, [pc, #96]	@ (800060c <MX_GPIO_Init+0xac>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <MX_GPIO_Init+0xac>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c4:	4812      	ldr	r0, [pc, #72]	@ (8000610 <MX_GPIO_Init+0xb0>)
 80005c6:	f002 febf 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005d4:	2302      	movs	r3, #2
 80005d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <MX_GPIO_Init+0xb4>)
 80005e0:	f002 fc4e 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <MX_GPIO_Init+0xb0>)
 80005fe:	f002 fc3f 	bl	8002e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	bf00      	nop
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	48001400 	.word	0x48001400
 8000614:	48000800 	.word	0x48000800

08000618 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcanRx1, uint32_t RxFifo0ITs)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_GetRxMessage(hfdcanRx1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000622:	4b6d      	ldr	r3, [pc, #436]	@ (80007d8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8000624:	4a6d      	ldr	r2, [pc, #436]	@ (80007dc <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8000626:	2140      	movs	r1, #64	@ 0x40
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f001 fc2d 	bl	8001e88 <HAL_FDCAN_GetRxMessage>
	switch(RxHeader.Identifier){
 800062e:	4b6b      	ldr	r3, [pc, #428]	@ (80007dc <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b10      	cmp	r3, #16
 8000634:	d82a      	bhi.n	800068c <HAL_FDCAN_RxFifo0Callback+0x74>
 8000636:	2b00      	cmp	r3, #0
 8000638:	f000 80b6 	beq.w	80007a8 <HAL_FDCAN_RxFifo0Callback+0x190>
 800063c:	3b01      	subs	r3, #1
 800063e:	2b0f      	cmp	r3, #15
 8000640:	f200 80b2 	bhi.w	80007a8 <HAL_FDCAN_RxFifo0Callback+0x190>
 8000644:	a201      	add	r2, pc, #4	@ (adr r2, 800064c <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	08000697 	.word	0x08000697
 8000650:	080007a9 	.word	0x080007a9
 8000654:	080007a9 	.word	0x080007a9
 8000658:	080007a9 	.word	0x080007a9
 800065c:	080006af 	.word	0x080006af
 8000660:	080006f3 	.word	0x080006f3
 8000664:	08000723 	.word	0x08000723
 8000668:	080007a9 	.word	0x080007a9
 800066c:	080007a9 	.word	0x080007a9
 8000670:	080007a9 	.word	0x080007a9
 8000674:	080007a9 	.word	0x080007a9
 8000678:	080007a9 	.word	0x080007a9
 800067c:	080007a9 	.word	0x080007a9
 8000680:	080007a9 	.word	0x080007a9
 8000684:	080007a9 	.word	0x080007a9
 8000688:	08000771 	.word	0x08000771
 800068c:	f240 1211 	movw	r2, #273	@ 0x111
 8000690:	4293      	cmp	r3, r2
 8000692:	d04a      	beq.n	800072a <HAL_FDCAN_RxFifo0Callback+0x112>
 8000694:	e088      	b.n	80007a8 <HAL_FDCAN_RxFifo0Callback+0x190>
		case 0x01:
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxFW) != HAL_OK)
 8000696:	4a52      	ldr	r2, [pc, #328]	@ (80007e0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8000698:	4952      	ldr	r1, [pc, #328]	@ (80007e4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800069a:	4853      	ldr	r0, [pc, #332]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800069c:	f001 fb85 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 808b 	beq.w	80007be <HAL_FDCAN_RxFifo0Callback+0x1a6>
			{
			  Error_Handler();
 80006a8:	f000 fb4c 	bl	8000d44 <Error_Handler>
			}
			break;
 80006ac:	e087      	b.n	80007be <HAL_FDCAN_RxFifo0Callback+0x1a6>
		case 0x05:
	    	load_APP_flag = 0;
 80006ae:	4b4f      	ldr	r3, [pc, #316]	@ (80007ec <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	    	//RxDataBuffer[CountRecvData] = RxData;
	    	//CountRecvData += 64;
//	    	if (CountRecvData == 2048)
//	    	{
		    	iap_write_appbin(RxData, 64, CountAddr, APPLength, 8);
 80006b4:	4b4e      	ldr	r3, [pc, #312]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b4e      	ldr	r3, [pc, #312]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2108      	movs	r1, #8
 80006be:	9100      	str	r1, [sp, #0]
 80006c0:	2140      	movs	r1, #64	@ 0x40
 80006c2:	4845      	ldr	r0, [pc, #276]	@ (80007d8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80006c4:	f000 f950 	bl	8000968 <iap_write_appbin>
		    	CountAddr += 64;
 80006c8:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3340      	adds	r3, #64	@ 0x40
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80006d0:	6013      	str	r3, [r2, #0]
		        APPLength += 64;       //RxHeader.DataLength不是64不要用這個  #define FDCAN_DLC_BYTES_64 ((uint32_t)0x0000000FU) 所以只有byte==8時才可以用
 80006d2:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3340      	adds	r3, #64	@ 0x40
 80006d8:	4a46      	ldr	r2, [pc, #280]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80006da:	6013      	str	r3, [r2, #0]
		        //CountRecvData = 0;
//	    	}
	        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxACK) != HAL_OK)
 80006dc:	4a46      	ldr	r2, [pc, #280]	@ (80007f8 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80006de:	4941      	ldr	r1, [pc, #260]	@ (80007e4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80006e0:	4841      	ldr	r0, [pc, #260]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80006e2:	f001 fb62 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d06a      	beq.n	80007c2 <HAL_FDCAN_RxFifo0Callback+0x1aa>
	        {
	          Error_Handler();
 80006ec:	f000 fb2a 	bl	8000d44 <Error_Handler>
	        }
			break;
 80006f0:	e067      	b.n	80007c2 <HAL_FDCAN_RxFifo0Callback+0x1aa>
		case 0x06://data不足8byte我會補0
	    	load_APP_flag = 1;
 80006f2:	4b3e      	ldr	r3, [pc, #248]	@ (80007ec <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
	    	//RxDataBuffer[CountRecvData] = RxData;
	    	//CountRecvData += 64;
			iap_write_appbin(RxData, 64, CountAddr, APPLength, 8);//
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b3d      	ldr	r3, [pc, #244]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2108      	movs	r1, #8
 8000702:	9100      	str	r1, [sp, #0]
 8000704:	2140      	movs	r1, #64	@ 0x40
 8000706:	4834      	ldr	r0, [pc, #208]	@ (80007d8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8000708:	f000 f92e 	bl	8000968 <iap_write_appbin>
			CountAddr += 64;
 800070c:	4b38      	ldr	r3, [pc, #224]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3340      	adds	r3, #64	@ 0x40
 8000712:	4a37      	ldr	r2, [pc, #220]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8000714:	6013      	str	r3, [r2, #0]
	        APPLength += 64;
 8000716:	4b37      	ldr	r3, [pc, #220]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3340      	adds	r3, #64	@ 0x40
 800071c:	4a35      	ldr	r2, [pc, #212]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800071e:	6013      	str	r3, [r2, #0]
	        //CountRecvData = 0;
			break;
 8000720:	e056      	b.n	80007d0 <HAL_FDCAN_RxFifo0Callback+0x1b8>
		case 0x07:
			load_APP_flag = 1;
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
			break;
 8000728:	e052      	b.n	80007d0 <HAL_FDCAN_RxFifo0Callback+0x1b8>
		case 0x111:
			if(RxData[0]==14){
 800072a:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b0e      	cmp	r3, #14
 8000730:	d104      	bne.n	800073c <HAL_FDCAN_RxFifo0Callback+0x124>
				WRITE_REG( TAMP->BKP15R, 0xBEEFBEEF);
 8000732:	4b32      	ldr	r3, [pc, #200]	@ (80007fc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8000734:	4a32      	ldr	r2, [pc, #200]	@ (8000800 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8000736:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxCommandError) != HAL_OK)
				{
				  Error_Handler();
				}
			}
	        break;
 800073a:	e044      	b.n	80007c6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
			else if(RxData[0]==3){
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d10a      	bne.n	800075a <HAL_FDCAN_RxFifo0Callback+0x142>
		        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxHW) != HAL_OK)
 8000744:	4a2f      	ldr	r2, [pc, #188]	@ (8000804 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 8000746:	4927      	ldr	r1, [pc, #156]	@ (80007e4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8000748:	4827      	ldr	r0, [pc, #156]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800074a:	f001 fb2e 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d038      	beq.n	80007c6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
		          Error_Handler();
 8000754:	f000 faf6 	bl	8000d44 <Error_Handler>
	        break;
 8000758:	e035      	b.n	80007c6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxCommandError) != HAL_OK)
 800075a:	4a2b      	ldr	r2, [pc, #172]	@ (8000808 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 800075c:	4921      	ldr	r1, [pc, #132]	@ (80007e4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800075e:	4822      	ldr	r0, [pc, #136]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000760:	f001 fb23 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d02d      	beq.n	80007c6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				  Error_Handler();
 800076a:	f000 faeb 	bl	8000d44 <Error_Handler>
	        break;
 800076e:	e02a      	b.n	80007c6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
		case 0x10:
	        uint32_t u32TxFifoRqst = HAL_FDCAN_GetLatestTxFifoQRequestBuffer(&hfdcan1);
 8000770:	481d      	ldr	r0, [pc, #116]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000772:	f001 fb5e 	bl	8001e32 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>
 8000776:	60f8      	str	r0, [r7, #12]
	        HAL_FDCAN_AbortTxRequest(&hfdcan1, u32TxFifoRqst);
 8000778:	68f9      	ldr	r1, [r7, #12]
 800077a:	481b      	ldr	r0, [pc, #108]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800077c:	f001 fb65 	bl	8001e4a <HAL_FDCAN_AbortTxRequest>
			load_APP_flag = 0;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
			CountAddr = FLASH_APP_ADDR;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8000788:	4a20      	ldr	r2, [pc, #128]	@ (800080c <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 800078a:	601a      	str	r2, [r3, #0]
	        APPLength = 0;
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
	        //*(volatile uint32_t*)Ram_Flag = 0x00000000;
	        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxACK) != HAL_OK)
 8000792:	4a19      	ldr	r2, [pc, #100]	@ (80007f8 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8000794:	4913      	ldr	r1, [pc, #76]	@ (80007e4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8000796:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8000798:	f001 fb07 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <HAL_FDCAN_RxFifo0Callback+0x1b2>
	        {
	          Error_Handler();
 80007a2:	f000 facf 	bl	8000d44 <Error_Handler>
	        }
			break;
 80007a6:	e010      	b.n	80007ca <HAL_FDCAN_RxFifo0Callback+0x1b2>
		default:
	        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxIDerror) != HAL_OK)
 80007a8:	4a19      	ldr	r2, [pc, #100]	@ (8000810 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80007aa:	490e      	ldr	r1, [pc, #56]	@ (80007e4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80007ac:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80007ae:	f001 fafc 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00a      	beq.n	80007ce <HAL_FDCAN_RxFifo0Callback+0x1b6>
	        {
	          Error_Handler();
 80007b8:	f000 fac4 	bl	8000d44 <Error_Handler>
	        }
	        break;
 80007bc:	e007      	b.n	80007ce <HAL_FDCAN_RxFifo0Callback+0x1b6>
			break;
 80007be:	bf00      	nop
 80007c0:	e006      	b.n	80007d0 <HAL_FDCAN_RxFifo0Callback+0x1b8>
			break;
 80007c2:	bf00      	nop
 80007c4:	e004      	b.n	80007d0 <HAL_FDCAN_RxFifo0Callback+0x1b8>
	        break;
 80007c6:	bf00      	nop
 80007c8:	e002      	b.n	80007d0 <HAL_FDCAN_RxFifo0Callback+0x1b8>
			break;
 80007ca:	bf00      	nop
 80007cc:	e000      	b.n	80007d0 <HAL_FDCAN_RxFifo0Callback+0x1b8>
	        break;
 80007ce:	bf00      	nop
	}*/
/*	if(RxHeader.Identifier == 0x02)
	{
		test_standby_flag = 1;
	}*/
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000140 	.word	0x20000140
 80007dc:	20000180 	.word	0x20000180
 80007e0:	2000000c 	.word	0x2000000c
 80007e4:	200001a8 	.word	0x200001a8
 80007e8:	200000b8 	.word	0x200000b8
 80007ec:	20000130 	.word	0x20000130
 80007f0:	20000000 	.word	0x20000000
 80007f4:	2000011c 	.word	0x2000011c
 80007f8:	20000004 	.word	0x20000004
 80007fc:	40002400 	.word	0x40002400
 8000800:	beefbeef 	.word	0xbeefbeef
 8000804:	20000014 	.word	0x20000014
 8000808:	20000034 	.word	0x20000034
 800080c:	08008000 	.word	0x08008000
 8000810:	2000002c 	.word	0x2000002c

08000814 <iap_load_app>:
void iap_load_app(uint32_t appxaddr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	//HAL_Delay(2000);
		uint32_t Length_Addr = *(uint32_t*)REAL_LENGTH_ADDR;//存在08008024 uint32_t代表只讀4個bytes
 800081c:	4b46      	ldr	r3, [pc, #280]	@ (8000938 <iap_load_app+0x124>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	61bb      	str	r3, [r7, #24]
		//uint32_t crccrc = 0;
	if( Length_Addr != 0xFFFFFFFF ){  //  *STM32_FLASH_TAIL will error  because  is number not address 一次拿32個bit LENGTH_ADDR
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000828:	d075      	beq.n	8000916 <iap_load_app+0x102>
		//uint32_t crc_value_2 = do_crc_table( ( uint8_t*)FLASH_APP_ADDR , Length_Addr);
		uint32_t crc_value_2 = HAL_CRC_Calculate(&hcrc, (uint32_t*)FLASH_APP_ADDR, Length_Addr)^0xFFFFFFFF;
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4943      	ldr	r1, [pc, #268]	@ (800093c <iap_load_app+0x128>)
 800082e:	4844      	ldr	r0, [pc, #272]	@ (8000940 <iap_load_app+0x12c>)
 8000830:	f000 fe36 	bl	80014a0 <HAL_CRC_Calculate>
 8000834:	4603      	mov	r3, r0
 8000836:	43db      	mvns	r3, r3
 8000838:	617b      	str	r3, [r7, #20]
		if( *( uint32_t*)(FLASH_APP_ADDR + Length_Addr) != crc_value_2){
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000840:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	d00a      	beq.n	8000862 <iap_load_app+0x4e>
				test_value = Length_Addr % 10;
				TxData[k] = test_value;
				Length_Addr /= 10;
				k++;
			}*/
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxCRCerror) != HAL_OK)
 800084c:	4a3d      	ldr	r2, [pc, #244]	@ (8000944 <iap_load_app+0x130>)
 800084e:	493e      	ldr	r1, [pc, #248]	@ (8000948 <iap_load_app+0x134>)
 8000850:	483e      	ldr	r0, [pc, #248]	@ (800094c <iap_load_app+0x138>)
 8000852:	f001 faaa 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d067      	beq.n	800092c <iap_load_app+0x118>
			{
			  Error_Handler();
 800085c:	f000 fa72 	bl	8000d44 <Error_Handler>
			}
			return;
 8000860:	e064      	b.n	800092c <iap_load_app+0x118>
		}
		else{
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxACK) != HAL_OK) //if write rear will receive error mesage
 8000862:	4a3b      	ldr	r2, [pc, #236]	@ (8000950 <iap_load_app+0x13c>)
 8000864:	4938      	ldr	r1, [pc, #224]	@ (8000948 <iap_load_app+0x134>)
 8000866:	4839      	ldr	r0, [pc, #228]	@ (800094c <iap_load_app+0x138>)
 8000868:	f001 fa9f 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <iap_load_app+0x62>
			{
			  Error_Handler();
 8000872:	f000 fa67 	bl	8000d44 <Error_Handler>
			}
			HAL_Delay(200);
 8000876:	20c8      	movs	r0, #200	@ 0xc8
 8000878:	f000 fc4a 	bl	8001110 <HAL_Delay>
			//if(((*(volatile uint32_t*)appxaddr)&0x2FFE0000)==0x20000000)	//
			//{
		        /* */
			jump2app=(iapfun)*(volatile uint32_t*)(appxaddr+4);//appxaddr = 0x08008000                                           //(iapfun)函數指針 (vu32*)是轉型態 *取出該地址的內容
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3304      	adds	r3, #4
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <iap_load_app+0x140>)
 8000886:	601a      	str	r2, [r3, #0]
			 /* Disable all interrupts */
			HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
 8000888:	2015      	movs	r0, #21
 800088a:	f000 fd8a 	bl	80013a2 <HAL_NVIC_DisableIRQ>
			HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 800088e:	2101      	movs	r1, #1
 8000890:	482e      	ldr	r0, [pc, #184]	@ (800094c <iap_load_app+0x138>)
 8000892:	f001 fce7 	bl	8002264 <HAL_FDCAN_DeactivateNotification>
			HAL_FDCAN_DeInit(&hfdcan1);
 8000896:	482d      	ldr	r0, [pc, #180]	@ (800094c <iap_load_app+0x138>)
 8000898:	f001 f8fe 	bl	8001a98 <HAL_FDCAN_DeInit>
			HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 800089c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a0:	482d      	ldr	r0, [pc, #180]	@ (8000958 <iap_load_app+0x144>)
 80008a2:	f002 fc6f 	bl	8003184 <HAL_GPIO_DeInit>
			//HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
			//HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1);
			HAL_DeInit();
 80008a6:	f000 fba7 	bl	8000ff8 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008aa:	b672      	cpsid	i
}
 80008ac:	bf00      	nop
			__disable_irq();
																											//__set_PRIMASK(1); //__disable_irq();
			/* Set the clock to the default state */
			HAL_RCC_DeInit();
 80008ae:	f002 ffb3 	bl	8003818 <HAL_RCC_DeInit>
			//HAL_SuspendTick();//SysTick->CTRL我認為和SysTick->CTRL一樣的意思
			/* Disable Systick timer */
			SysTick->CTRL = 0;//0: counter disabled 1: counter enabled.
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <iap_load_app+0x148>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
			SysTick->LOAD = 0;
 80008b8:	4b28      	ldr	r3, [pc, #160]	@ (800095c <iap_load_app+0x148>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
			SysTick->VAL = 0;
 80008be:	4b27      	ldr	r3, [pc, #156]	@ (800095c <iap_load_app+0x148>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
			/* Clear Interrupt Enable Register & Interrupt Pending Register */
			for (int i = 0; i < sizeof(NVIC->ICER)/sizeof(NVIC->ICER[0]); i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
 80008c8:	e010      	b.n	80008ec <iap_load_app+0xd8>
			{
				NVIC->ICER[i]=0xFFFFFFFF;
 80008ca:	4a25      	ldr	r2, [pc, #148]	@ (8000960 <iap_load_app+0x14c>)
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	3320      	adds	r3, #32
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				NVIC->ICPR[i]=0xFFFFFFFF;
 80008d8:	4a21      	ldr	r2, [pc, #132]	@ (8000960 <iap_load_app+0x14c>)
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3360      	adds	r3, #96	@ 0x60
 80008de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < sizeof(NVIC->ICER)/sizeof(NVIC->ICER[0]); i++)
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3301      	adds	r3, #1
 80008ea:	61fb      	str	r3, [r7, #28]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d9eb      	bls.n	80008ca <iap_load_app+0xb6>
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f383 8814 	msr	CONTROL, r3
}
 80008fc:	bf00      	nop
			}
																											  /* Re-enable all interrupts */
																									 // __enable_irq();		        //__set_PRIMASK(0);
			/*  RTOS Set the MSP*/
			__set_CONTROL(0);
			__set_MSP(*(volatile uint32_t*)appxaddr);					// Set the MSP
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	f383 8808 	msr	MSP, r3
}
 800090a:	bf00      	nop
			jump2app();									//
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <iap_load_app+0x140>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4798      	blx	r3
			while (1)
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <iap_load_app+0xfe>
			}
			//}
		}
	}
	else{
        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxNoCRC) != HAL_OK)
 8000916:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <iap_load_app+0x150>)
 8000918:	490b      	ldr	r1, [pc, #44]	@ (8000948 <iap_load_app+0x134>)
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <iap_load_app+0x138>)
 800091c:	f001 fa45 	bl	8001daa <HAL_FDCAN_AddMessageToTxFifoQ>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <iap_load_app+0x11c>
        {
          Error_Handler();
 8000926:	f000 fa0d 	bl	8000d44 <Error_Handler>
        }
		return;
 800092a:	e001      	b.n	8000930 <iap_load_app+0x11c>
			return;
 800092c:	bf00      	nop
 800092e:	e000      	b.n	8000932 <iap_load_app+0x11e>
		return;
 8000930:	bf00      	nop
	}

}
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	08008024 	.word	0x08008024
 800093c:	08008000 	.word	0x08008000
 8000940:	20000094 	.word	0x20000094
 8000944:	20000024 	.word	0x20000024
 8000948:	200001a8 	.word	0x200001a8
 800094c:	200000b8 	.word	0x200000b8
 8000950:	20000004 	.word	0x20000004
 8000954:	200001e4 	.word	0x200001e4
 8000958:	48001400 	.word	0x48001400
 800095c:	e000e010 	.word	0xe000e010
 8000960:	e000e100 	.word	0xe000e100
 8000964:	2000001c 	.word	0x2000001c

08000968 <iap_write_appbin>:
//NumtoWrite 有多少資料要寫入
//WriteAPPLength 目前app的長度
//WriteToFlashSize STM有兩種，一次寫入32bit跟一次寫入64bit，我是選一次寫入64bit，所以是8byte
void iap_write_appbin(uint8_t *pBuffer, uint16_t NumtoWrite, uint32_t WriteAddr, uint32_t WriteAPPLength, uint8_t WriteToFlashSize)//each byte one address
{
 8000968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800096c:	b0a0      	sub	sp, #128	@ 0x80
 800096e:	af00      	add	r7, sp, #0
 8000970:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000972:	657a      	str	r2, [r7, #84]	@ 0x54
 8000974:	653b      	str	r3, [r7, #80]	@ 0x50
 8000976:	460b      	mov	r3, r1
 8000978:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
    if (WriteAddr < STM32_FLASH_BASE || (WriteAddr >= STM32_FLASH_TAIL))
 800097c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800097e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000982:	f0c0 81ae 	bcc.w	8000ce2 <iap_write_appbin+0x37a>
 8000986:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000988:	4b9f      	ldr	r3, [pc, #636]	@ (8000c08 <iap_write_appbin+0x2a0>)
 800098a:	429a      	cmp	r2, r3
 800098c:	f080 81a9 	bcs.w	8000ce2 <iap_write_appbin+0x37a>
    	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    	//HAL_Delay(2000);
        //printf("stack overflow\r\n");
        return;
    }
    uint32_t PageError = 0; ////设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
 8000990:	2300      	movs	r3, #0
 8000992:	667b      	str	r3, [r7, #100]	@ 0x64
    //uint32_t FirstPage = 0, NbOfPages = 0, BankNumber = 0;
    //uint32_t Address = 0, PageError = 0; ////设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
    /*One page (2 Kbytes)STM32G474  有双 Bank 功能，且默认情况下 Option Bytes 中的 DBANK =1*/
    //crc = HAL_CRC_Calculate(&hcrc, (u32 *)pBuffer, NumToWrite)^0x00000000;//word size=32bits

    HAL_FLASH_Unlock();
 8000994:	f002 f828 	bl	80029e8 <HAL_FLASH_Unlock>

    if((WriteAPPLength % 2048) == 0){ //two page FLASH_PAGE_SIZE==2048
 8000998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800099a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d134      	bne.n	8000a0c <iap_write_appbin+0xa4>
    	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
  	    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80009a2:	4a9a      	ldr	r2, [pc, #616]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009a4:	2300      	movs	r3, #0
 80009a6:	6013      	str	r3, [r2, #0]
  	    EraseInitStruct.NbPages     = 1;
 80009a8:	4a98      	ldr	r2, [pc, #608]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009aa:	2301      	movs	r3, #1
 80009ac:	60d3      	str	r3, [r2, #12]
        if(WriteAddr < 0x08040000){
 80009ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80009b0:	4b97      	ldr	r3, [pc, #604]	@ (8000c10 <iap_write_appbin+0x2a8>)
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d814      	bhi.n	80009e0 <iap_write_appbin+0x78>
        	//FLASH_PageErase( (WriteAddr-FLASH_APP_ADDR)/2048, FLASH_BANK_1); //FLASH_ErasePage法二 //error
  		    EraseInitStruct.Page = (WriteAddr-STM32_FLASH_BASE)/FLASH_PAGE_SIZE;
 80009b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009b8:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80009bc:	0ada      	lsrs	r2, r3, #11
 80009be:	4b93      	ldr	r3, [pc, #588]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009c0:	609a      	str	r2, [r3, #8]
  		    EraseInitStruct.Banks = FLASH_BANK_1;
 80009c2:	4a92      	ldr	r2, [pc, #584]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009c4:	2301      	movs	r3, #1
 80009c6:	6053      	str	r3, [r2, #4]
        	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 80009c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009cc:	4619      	mov	r1, r3
 80009ce:	488f      	ldr	r0, [pc, #572]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009d0:	f002 f8f4 	bl	8002bbc <HAL_FLASHEx_Erase>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d018      	beq.n	8000a0c <iap_write_appbin+0xa4>
        		Error_Handler();
 80009da:	f000 f9b3 	bl	8000d44 <Error_Handler>
 80009de:	e015      	b.n	8000a0c <iap_write_appbin+0xa4>
        	}
        }
        else{
  		    EraseInitStruct.Page = (WriteAddr-0x08040000)/FLASH_PAGE_SIZE;
 80009e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009e2:	f103 4377 	add.w	r3, r3, #4143972352	@ 0xf7000000
 80009e6:	f503 037c 	add.w	r3, r3, #16515072	@ 0xfc0000
 80009ea:	0ada      	lsrs	r2, r3, #11
 80009ec:	4b87      	ldr	r3, [pc, #540]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009ee:	609a      	str	r2, [r3, #8]
  		    EraseInitStruct.Banks = FLASH_BANK_2;
 80009f0:	4a86      	ldr	r2, [pc, #536]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009f2:	2302      	movs	r3, #2
 80009f4:	6053      	str	r3, [r2, #4]
        	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 80009f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009fa:	4619      	mov	r1, r3
 80009fc:	4883      	ldr	r0, [pc, #524]	@ (8000c0c <iap_write_appbin+0x2a4>)
 80009fe:	f002 f8dd 	bl	8002bbc <HAL_FLASHEx_Erase>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <iap_write_appbin+0xa4>
        		Error_Handler();
 8000a08:	f000 f99c 	bl	8000d44 <Error_Handler>
        		Error_Handler();
        	}
        }*/                                                                                                                 //close
    }
    //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
    uint64_t merge_pBuffer = 0;
 8000a0c:	f04f 0200 	mov.w	r2, #0
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    for(int i=0; i<NumtoWrite; i+=WriteToFlashSize){//(Address < FLASH_USER_END_ADDR) write 8 byte every time
 8000a18:	2300      	movs	r3, #0
 8000a1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000a1c:	e0bb      	b.n	8000b96 <iap_write_appbin+0x22e>
//    	if(WriteToFlashSize==8){
    		merge_pBuffer = 0;
 8000a1e:	f04f 0200 	mov.w	r2, #0
 8000a22:	f04f 0300 	mov.w	r3, #0
 8000a26:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        	for(int j=0; j<WriteToFlashSize; j++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8000a2e:	e028      	b.n	8000a82 <iap_write_appbin+0x11a>
        		merge_pBuffer |= (uint64_t)*(pBuffer + j);
 8000a30:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000a3e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000a40:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000a44:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000a46:	4311      	orrs	r1, r2
 8000a48:	6239      	str	r1, [r7, #32]
 8000a4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a54:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        		if( j < (WriteToFlashSize-1) ){
 8000a58:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8000a5c:	1e5a      	subs	r2, r3, #1
 8000a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a60:	4293      	cmp	r3, r2
 8000a62:	da0b      	bge.n	8000a7c <iap_write_appbin+0x114>
        			merge_pBuffer <<= 8; //8 is bit not byte
 8000a64:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	f04f 0100 	mov.w	r1, #0
 8000a70:	0219      	lsls	r1, r3, #8
 8000a72:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000a76:	0210      	lsls	r0, r2, #8
 8000a78:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
        	for(int j=0; j<WriteToFlashSize; j++){
 8000a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a7e:	3301      	adds	r3, #1
 8000a80:	673b      	str	r3, [r7, #112]	@ 0x70
 8000a82:	f897 20a0 	ldrb.w	r2, [r7, #160]	@ 0xa0
 8000a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	dbd1      	blt.n	8000a30 <iap_write_appbin+0xc8>
        		}
        	}
        	merge_pBuffer = ((merge_pBuffer << 8) & (0xFF00FF00FF00FF00) ) | ((merge_pBuffer >> 8) & (0x00FF00FF00FF00FF) ); //must have add uint64_t because CPU do 32bit
 8000a8c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	f04f 0100 	mov.w	r1, #0
 8000a98:	0219      	lsls	r1, r3, #8
 8000a9a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000a9e:	0210      	lsls	r0, r2, #8
 8000aa0:	f000 23ff 	and.w	r3, r0, #4278255360	@ 0xff00ff00
 8000aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8000aa6:	f001 23ff 	and.w	r3, r1, #4278255360	@ 0xff00ff00
 8000aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8000aac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	f04f 0100 	mov.w	r1, #0
 8000ab8:	0a10      	lsrs	r0, r2, #8
 8000aba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000abe:	0a19      	lsrs	r1, r3, #8
 8000ac0:	f000 1aff 	and.w	sl, r0, #16711935	@ 0xff00ff
 8000ac4:	f001 1bff 	and.w	fp, r1, #16711935	@ 0xff00ff
 8000ac8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000acc:	460b      	mov	r3, r1
 8000ace:	ea43 030a 	orr.w	r3, r3, sl
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	ea43 030b 	orr.w	r3, r3, fp
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ae0:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        	merge_pBuffer = ((merge_pBuffer << 16) &  (0xFFFF0000FFFF0000) ) | ((merge_pBuffer >> 16) &  (0x0000FFFF0000FFFF) );
 8000ae4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	f04f 0100 	mov.w	r1, #0
 8000af0:	0419      	lsls	r1, r3, #16
 8000af2:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8000af6:	0410      	lsls	r0, r2, #16
 8000af8:	a341      	add	r3, pc, #260	@ (adr r3, 8000c00 <iap_write_appbin+0x298>)
 8000afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afe:	ea00 0802 	and.w	r8, r0, r2
 8000b02:	ea01 0903 	and.w	r9, r1, r3
 8000b06:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000b0a:	f04f 0000 	mov.w	r0, #0
 8000b0e:	f04f 0100 	mov.w	r1, #0
 8000b12:	0c10      	lsrs	r0, r2, #16
 8000b14:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b18:	0c19      	lsrs	r1, r3, #16
 8000b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b22:	ea00 0402 	and.w	r4, r0, r2
 8000b26:	ea01 0503 	and.w	r5, r1, r3
 8000b2a:	ea48 0304 	orr.w	r3, r8, r4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	ea49 0305 	orr.w	r3, r9, r5
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b3a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        	merge_pBuffer = (merge_pBuffer << 32) | (merge_pBuffer >> 32);
 8000b3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b4a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        	if(WriteAddr != LENGTH_ADDR){//保留位置寫入crc
 8000b4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b50:	4b30      	ldr	r3, [pc, #192]	@ (8000c14 <iap_write_appbin+0x2ac>)
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d00b      	beq.n	8000b6e <iap_write_appbin+0x206>
            	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WriteAddr, merge_pBuffer) != HAL_OK)//write 8bytes *(pointer+0)=a[0]
 8000b56:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000b5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 fed7 	bl	8002910 <HAL_FLASH_Program>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d007      	beq.n	8000b78 <iap_write_appbin+0x210>
            	{
            		Error_Handler();
 8000b68:	f000 f8ec 	bl	8000d44 <Error_Handler>
 8000b6c:	e004      	b.n	8000b78 <iap_write_appbin+0x210>
            	}
        	}
        	else
        	{
        		APPLengthBuffer = merge_pBuffer;
 8000b6e:	492a      	ldr	r1, [pc, #168]	@ (8000c18 <iap_write_appbin+0x2b0>)
 8000b70:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000b74:	e9c1 2300 	strd	r2, r3, [r1]
    	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WriteCRCAddr, merge_pBuffer) != HAL_OK)//write 8bytes *(pointer+0)=a[0]
    	{
    		//CRC_BUF = CRC_BUF + i;  重複使用crc_buf
    	}
*/                                                                                                                 //close
    	pBuffer = pBuffer + WriteToFlashSize;
 8000b78:	f897 20a0 	ldrb.w	r2, [r7, #160]	@ 0xa0
 8000b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b7e:	4413      	add	r3, r2
 8000b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    	WriteAddr = WriteAddr + WriteToFlashSize;
 8000b82:	f897 20a0 	ldrb.w	r2, [r7, #160]	@ 0xa0
 8000b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b88:	4413      	add	r3, r2
 8000b8a:	657b      	str	r3, [r7, #84]	@ 0x54
    for(int i=0; i<NumtoWrite; i+=WriteToFlashSize){//(Address < FLASH_USER_END_ADDR) write 8 byte every time
 8000b8c:	f897 20a0 	ldrb.w	r2, [r7, #160]	@ 0xa0
 8000b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b92:	4413      	add	r3, r2
 8000b94:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b96:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	f6ff af3e 	blt.w	8000a1e <iap_write_appbin+0xb6>
	}
	if(load_APP_flag == 1){
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <iap_write_appbin+0x2b4>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	f040 8097 	bne.w	8000cdc <iap_write_appbin+0x374>
		WriteAPPLength = WriteAPPLength + NumtoWrite;
 8000bae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000bb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000bb4:	4413      	add	r3, r2
 8000bb6:	653b      	str	r3, [r7, #80]	@ 0x50
		EraseInitStruct.Page = 126; //page index
		EraseInitStruct.Banks = FLASH_BANK_2;
    	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
    		Error_Handler();
    	}*/
    	if(( WriteAPPLength % FLASH_PAGE_SIZE) == 0){
 8000bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d144      	bne.n	8000c4c <iap_write_appbin+0x2e4>
      	    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <iap_write_appbin+0x2a4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
      	    EraseInitStruct.NbPages     = 1;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <iap_write_appbin+0x2a4>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	60da      	str	r2, [r3, #12]
            if(WriteAddr < 0x08040000){
 8000bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <iap_write_appbin+0x2a8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d824      	bhi.n	8000c20 <iap_write_appbin+0x2b8>
            	//FLASH_PageErase( (WriteAddr-FLASH_APP_ADDR)/2048, FLASH_BANK_1); //FLASH_ErasePage法二 //error
      		    EraseInitStruct.Page = (WriteAddr - STM32_FLASH_BASE)/FLASH_PAGE_SIZE;
 8000bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bd8:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000bdc:	0adb      	lsrs	r3, r3, #11
 8000bde:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <iap_write_appbin+0x2a4>)
 8000be0:	6093      	str	r3, [r2, #8]
      		    EraseInitStruct.Banks = FLASH_BANK_1;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <iap_write_appbin+0x2a4>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	605a      	str	r2, [r3, #4]
            	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 8000be8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <iap_write_appbin+0x2a4>)
 8000bf0:	f001 ffe4 	bl	8002bbc <HAL_FLASHEx_Erase>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d028      	beq.n	8000c4c <iap_write_appbin+0x2e4>
            		Error_Handler();
 8000bfa:	f000 f8a3 	bl	8000d44 <Error_Handler>
 8000bfe:	e025      	b.n	8000c4c <iap_write_appbin+0x2e4>
 8000c00:	ffff0000 	.word	0xffff0000
 8000c04:	ffff0000 	.word	0xffff0000
 8000c08:	0807f000 	.word	0x0807f000
 8000c0c:	20000120 	.word	0x20000120
 8000c10:	0803ffff 	.word	0x0803ffff
 8000c14:	08008020 	.word	0x08008020
 8000c18:	20000138 	.word	0x20000138
 8000c1c:	20000130 	.word	0x20000130
            	}
            }
            else{
      		    EraseInitStruct.Page = (WriteAddr - 0x08040000)/FLASH_PAGE_SIZE;
 8000c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c22:	f103 4377 	add.w	r3, r3, #4143972352	@ 0xf7000000
 8000c26:	f503 037c 	add.w	r3, r3, #16515072	@ 0xfc0000
 8000c2a:	0adb      	lsrs	r3, r3, #11
 8000c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000cec <iap_write_appbin+0x384>)
 8000c2e:	6093      	str	r3, [r2, #8]
      		    EraseInitStruct.Banks = FLASH_BANK_2;
 8000c30:	4b2e      	ldr	r3, [pc, #184]	@ (8000cec <iap_write_appbin+0x384>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	605a      	str	r2, [r3, #4]
            	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 8000c36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	482b      	ldr	r0, [pc, #172]	@ (8000cec <iap_write_appbin+0x384>)
 8000c3e:	f001 ffbd 	bl	8002bbc <HAL_FLASHEx_Erase>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <iap_write_appbin+0x2e4>
            		Error_Handler();
 8000c48:	f000 f87c 	bl	8000d44 <Error_Handler>
            	}
            }
    	}
    	APPLengthBuffer = APPLengthBuffer & (0x00000000FFFFFFFF);
 8000c4c:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <iap_write_appbin+0x388>)
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000c54:	2300      	movs	r3, #0
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c58:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <iap_write_appbin+0x388>)
 8000c5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8000c5e:	e9c3 1200 	strd	r1, r2, [r3]
    	APPLengthBuffer = APPLengthBuffer | ((uint64_t) WriteAPPLength) << 32;//要先移到高位才會存在08008024
 8000c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c64:	2200      	movs	r2, #0
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c68:	637a      	str	r2, [r7, #52]	@ 0x34
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c74:	000b      	movs	r3, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	491d      	ldr	r1, [pc, #116]	@ (8000cf0 <iap_write_appbin+0x388>)
 8000c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c7e:	ea42 0400 	orr.w	r4, r2, r0
 8000c82:	62bc      	str	r4, [r7, #40]	@ 0x28
 8000c84:	430b      	orrs	r3, r1
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <iap_write_appbin+0x388>)
 8000c8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000c8e:	e9c3 1200 	strd	r1, r2, [r3]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, LENGTH_ADDR, APPLengthBuffer) != HAL_OK){
 8000c92:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <iap_write_appbin+0x388>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	4916      	ldr	r1, [pc, #88]	@ (8000cf4 <iap_write_appbin+0x38c>)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f001 fe38 	bl	8002910 <HAL_FLASH_Program>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <iap_write_appbin+0x342>
			Error_Handler();//寫入的資料會自動強制轉型成uint64_t  0x08008020 LENGTH_ADDR STM32_FLASH_TAIL
 8000ca6:	f000 f84d 	bl	8000d44 <Error_Handler>
		}
		//uint64_t crc_value = do_crc_table( ( uint8_t*)FLASH_APP_ADDR , WriteAPPLength);//先寫再算crc，才不會crc error
		uint64_t crc_value = HAL_CRC_Calculate(&hcrc, (uint32_t*)FLASH_APP_ADDR, WriteAPPLength)^0xFFFFFFFF;
 8000caa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000cac:	4912      	ldr	r1, [pc, #72]	@ (8000cf8 <iap_write_appbin+0x390>)
 8000cae:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <iap_write_appbin+0x394>)
 8000cb0:	f000 fbf6 	bl	80014a0 <HAL_CRC_Calculate>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000cc2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WriteAddr, crc_value) != HAL_OK){  //WriteAddr前面已經加了
 8000cc6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f001 fe1f 	bl	8002910 <HAL_FLASH_Program>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <iap_write_appbin+0x374>
			Error_Handler();
 8000cd8:	f000 f834 	bl	8000d44 <Error_Handler>
		}
	}
    HAL_FLASH_Lock();
 8000cdc:	f001 fea6 	bl	8002a2c <HAL_FLASH_Lock>
 8000ce0:	e000      	b.n	8000ce4 <iap_write_appbin+0x37c>
        return;
 8000ce2:	bf00      	nop
}
 8000ce4:	3780      	adds	r7, #128	@ 0x80
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cec:	20000120 	.word	0x20000120
 8000cf0:	20000138 	.word	0x20000138
 8000cf4:	08008020 	.word	0x08008020
 8000cf8:	08008000 	.word	0x08008000
 8000cfc:	20000094 	.word	0x20000094

08000d00 <Standby>:
        crc = (crc >> 8) ^ crc_table[(crc ^ *ptr++) & 0xff];
    }

    return (crc);
}*/
void Standby(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
	HAL_PWREx_EnablePullUpPullDownConfig();//standby mode專用，因為進standby modegpio都會設成類比
 8000d04:	f002 fd68 	bl	80037d8 <HAL_PWREx_EnablePullUpPullDownConfig>
	HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_F, GPIO_PIN_15);
 8000d08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d0c:	2005      	movs	r0, #5
 8000d0e:	f002 fc37 	bl	8003580 <HAL_PWREx_EnableGPIOPullUp>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_F, PWR_GPIO_BIT_12);
 8000d12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d16:	2005      	movs	r0, #5
 8000d18:	f002 fcc8 	bl	80036ac <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_6);
 8000d1c:	2140      	movs	r1, #64	@ 0x40
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f002 fcc4 	bl	80036ac <HAL_PWREx_EnableGPIOPullDown>
//	HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_C, GPIO_PIN_13);

	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2_LOW);
 8000d24:	2042      	movs	r0, #66	@ 0x42
 8000d26:	f002 fb57 	bl	80033d8 <HAL_PWR_DisableWakeUpPin>

	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR , ENABLE);//我不用開rcc
	//HAL_PWR_EnableBkUpAccess();
	/* Clear all related wakeup flags */
//	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF2);
 8000d2a:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <Standby+0x40>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	619a      	str	r2, [r3, #24]
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_LOW);
 8000d30:	2042      	movs	r0, #66	@ 0x42
 8000d32:	f002 fb31 	bl	8003398 <HAL_PWR_EnableWakeUpPin>
	//PWR_WakeUpPinCmd (ENABLE);
	HAL_PWR_EnterSTANDBYMode();
 8000d36:	f002 fb65 	bl	8003404 <HAL_PWR_EnterSTANDBYMode>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40007000 	.word	0x40007000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <Error_Handler+0x8>

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d86:	f002 fd37 	bl	80037f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_CRC_MspInit+0x38>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10b      	bne.n	8000dc2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_CRC_MspInit+0x3c>)
 8000dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_CRC_MspInit+0x3c>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <HAL_CRC_MspInit+0x3c>)
 8000db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023000 	.word	0x40023000
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b09e      	sub	sp, #120	@ 0x78
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	2254      	movs	r2, #84	@ 0x54
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fcd3 	bl	80047a4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a24      	ldr	r2, [pc, #144]	@ (8000e94 <HAL_FDCAN_MspInit+0xbc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d141      	bne.n	8000e8c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e12:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 fa75 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e24:	f7ff ff8e 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_FDCAN_MspInit+0xc0>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e98 <HAL_FDCAN_MspInit+0xc0>)
 8000e2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_FDCAN_MspInit+0xc0>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_FDCAN_MspInit+0xc0>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e44:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <HAL_FDCAN_MspInit+0xc0>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_FDCAN_MspInit+0xc0>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e58:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e5c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e78:	f002 f802 	bl	8002e80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2015      	movs	r0, #21
 8000e82:	f000 fa66 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e86:	2015      	movs	r0, #21
 8000e88:	f000 fa7d 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3778      	adds	r7, #120	@ 0x78
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40006400 	.word	0x40006400
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_FDCAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(hfdcan->Instance==FDCAN1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_FDCAN_MspDeInit+0x38>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10e      	bne.n	8000ecc <HAL_FDCAN_MspDeInit+0x30>
  {
  /* USER CODE BEGIN FDCAN1_MspDeInit 0 */

  /* USER CODE END FDCAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_FDCAN_MspDeInit+0x3c>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb2:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <HAL_FDCAN_MspDeInit+0x3c>)
 8000eb4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000eb8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8000eba:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec2:	f002 f95f 	bl	8003184 <HAL_GPIO_DeInit>

    /* FDCAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
 8000ec6:	2015      	movs	r0, #21
 8000ec8:	f000 fa6b 	bl	80013a2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN FDCAN1_MspDeInit 1 */

  /* USER CODE END FDCAN1_MspDeInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40006400 	.word	0x40006400
 8000ed8:	40021000 	.word	0x40021000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f32:	f000 f8cf 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <FDCAN1_IT0_IRQHandler+0x10>)
 8000f42:	f001 fa6f 	bl	8002424 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000b8 	.word	0x200000b8

08000f50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f74:	480d      	ldr	r0, [pc, #52]	@ (8000fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff ffea 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	@ (8000fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc0 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f003 fc07 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f7ff f937 	bl	8000218 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   r0, =_estack
 8000fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000fb8:	0800483c 	.word	0x0800483c
  ldr r2, =_sbss
 8000fbc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fc0:	200001ec 	.word	0x200001ec

08000fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_2_IRQHandler>

08000fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f9b3 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f842 	bl	8001060 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e001      	b.n	8000fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe8:	f7ff feb2 	bl	8000d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fec:	79fb      	ldrb	r3, [r7, #7]

}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_DeInit>:
  * @brief  This function de-initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <HAL_DeInit+0x54>)
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001002:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_DeInit+0x54>)
 8001006:	2200      	movs	r2, #0
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HAL_DeInit+0x54>)
 800100c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_DeInit+0x54>)
 8001014:	2200      	movs	r2, #0
 8001016:	641a      	str	r2, [r3, #64]	@ 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_DeInit+0x54>)
 800101a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800101e:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_DeInit+0x54>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <HAL_DeInit+0x54>)
 8001028:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800102c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <HAL_DeInit+0x54>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_DeInit+0x54>)
 8001036:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800103a:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_DeInit+0x54>)
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	@ 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001042:	f000 f805 	bl	8001050 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <HAL_InitTick+0x68>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d022      	beq.n	80010ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_InitTick+0x6c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_InitTick+0x68>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001080:	fbb1 f3f3 	udiv	r3, r1, r3
 8001084:	fbb2 f3f3 	udiv	r3, r2, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f998 	bl	80013be <HAL_SYSTICK_Config>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10f      	bne.n	80010b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	d809      	bhi.n	80010ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109a:	2200      	movs	r2, #0
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a2:	f000 f956 	bl	8001352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <HAL_InitTick+0x70>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	e007      	b.n	80010be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e004      	b.n	80010be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e001      	b.n	80010be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000054 	.word	0x20000054
 80010cc:	2000004c 	.word	0x2000004c
 80010d0:	20000050 	.word	0x20000050

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <HAL_IncTick+0x1c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <HAL_IncTick+0x20>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a03      	ldr	r2, [pc, #12]	@ (80010f0 <HAL_IncTick+0x1c>)
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	200001e8 	.word	0x200001e8
 80010f4:	20000054 	.word	0x20000054

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200001e8 	.word	0x200001e8

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001128:	d004      	beq.n	8001134 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_Delay+0x40>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001134:	bf00      	nop
 8001136:	f7ff ffdf 	bl	80010f8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	429a      	cmp	r2, r3
 8001144:	d8f7      	bhi.n	8001136 <HAL_Delay+0x26>
  {
  }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000054 	.word	0x20000054

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db12      	blt.n	800122c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	490a      	ldr	r1, [pc, #40]	@ (8001238 <__NVIC_DisableIRQ+0x44>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	3320      	adds	r3, #32
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001220:	f3bf 8f4f 	dsb	sy
}
 8001224:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001226:	f3bf 8f6f 	isb	sy
}
 800122a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	@ (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	@ (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff05 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff1c 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff90 	bl	8001290 <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5f 	bl	800123c <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff0f 	bl	80011b8 <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff1f 	bl	80011f4 <__NVIC_DisableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff96 	bl	80012f8 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e054      	b.n	8001494 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7f5b      	ldrb	r3, [r3, #29]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fccc 	bl	8000d98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10c      	bne.n	8001428 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a22      	ldr	r2, [pc, #136]	@ (800149c <HAL_CRC_Init+0xc4>)
 8001414:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0218 	bic.w	r2, r2, #24
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	e00c      	b.n	8001442 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6899      	ldr	r1, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	461a      	mov	r2, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f948 	bl	80016c8 <HAL_CRCEx_Polynomial_Set>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e028      	b.n	8001494 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	795b      	ldrb	r3, [r3, #5]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d105      	bne.n	8001456 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	e004      	b.n	8001460 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6912      	ldr	r2, [r2, #16]
 800145e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	04c11db7 	.word	0x04c11db7

080014a0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2202      	movs	r2, #2
 80014b4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d006      	beq.n	80014dc <HAL_CRC_Calculate+0x3c>
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d829      	bhi.n	8001526 <HAL_CRC_Calculate+0x86>
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d019      	beq.n	800150a <HAL_CRC_Calculate+0x6a>
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d01e      	beq.n	8001518 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80014da:	e024      	b.n	8001526 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	441a      	add	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3f0      	bcc.n	80014e2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      break;
 8001508:	e00e      	b.n	8001528 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f812 	bl	8001538 <CRC_Handle_8>
 8001514:	6138      	str	r0, [r7, #16]
      break;
 8001516:	e007      	b.n	8001528 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f899 	bl	8001654 <CRC_Handle_16>
 8001522:	6138      	str	r0, [r7, #16]
      break;
 8001524:	e000      	b.n	8001528 <HAL_CRC_Calculate+0x88>
      break;
 8001526:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2201      	movs	r2, #1
 800152c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800152e:	693b      	ldr	r3, [r7, #16]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	e023      	b.n	8001592 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	3301      	adds	r3, #1
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	440b      	add	r3, r1
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001564:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	440b      	add	r3, r1
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001574:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	3303      	adds	r3, #3
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	440b      	add	r3, r1
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001588:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800158a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3301      	adds	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3d6      	bcc.n	800154a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d04d      	beq.n	8001642 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	4413      	add	r3, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d116      	bne.n	80015f8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	3301      	adds	r3, #1
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	440b      	add	r3, r1
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	8b7a      	ldrh	r2, [r7, #26]
 80015f6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d11f      	bne.n	8001642 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	3301      	adds	r3, #1
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	440b      	add	r3, r1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b21b      	sxth	r3, r3
 8001622:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	8b7a      	ldrh	r2, [r7, #26]
 800162e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3724      	adds	r7, #36	@ 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e013      	b.n	800168e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	4413      	add	r3, r2
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	440b      	add	r3, r1
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3e6      	bcc.n	8001666 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	4413      	add	r3, r2
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80016d8:	231f      	movs	r3, #31
 80016da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
 80016ea:	e063      	b.n	80017b4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80016ec:	bf00      	nop
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1e5a      	subs	r2, r3, #1
 80016f2:	613a      	str	r2, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <HAL_CRCEx_Polynomial_Set+0x44>
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b18      	cmp	r3, #24
 8001710:	d846      	bhi.n	80017a0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001712:	a201      	add	r2, pc, #4	@ (adr r2, 8001718 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	080017a7 	.word	0x080017a7
 800171c:	080017a1 	.word	0x080017a1
 8001720:	080017a1 	.word	0x080017a1
 8001724:	080017a1 	.word	0x080017a1
 8001728:	080017a1 	.word	0x080017a1
 800172c:	080017a1 	.word	0x080017a1
 8001730:	080017a1 	.word	0x080017a1
 8001734:	080017a1 	.word	0x080017a1
 8001738:	08001795 	.word	0x08001795
 800173c:	080017a1 	.word	0x080017a1
 8001740:	080017a1 	.word	0x080017a1
 8001744:	080017a1 	.word	0x080017a1
 8001748:	080017a1 	.word	0x080017a1
 800174c:	080017a1 	.word	0x080017a1
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017a1 	.word	0x080017a1
 8001758:	08001789 	.word	0x08001789
 800175c:	080017a1 	.word	0x080017a1
 8001760:	080017a1 	.word	0x080017a1
 8001764:	080017a1 	.word	0x080017a1
 8001768:	080017a1 	.word	0x080017a1
 800176c:	080017a1 	.word	0x080017a1
 8001770:	080017a1 	.word	0x080017a1
 8001774:	080017a1 	.word	0x080017a1
 8001778:	0800177d 	.word	0x0800177d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b06      	cmp	r3, #6
 8001780:	d913      	bls.n	80017aa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001786:	e010      	b.n	80017aa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b07      	cmp	r3, #7
 800178c:	d90f      	bls.n	80017ae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001792:	e00c      	b.n	80017ae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b0f      	cmp	r3, #15
 8001798:	d90b      	bls.n	80017b2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800179e:	e008      	b.n	80017b2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	75fb      	strb	r3, [r7, #23]
        break;
 80017a4:	e006      	b.n	80017b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017a6:	bf00      	nop
 80017a8:	e004      	b.n	80017b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017aa:	bf00      	nop
 80017ac:	e002      	b.n	80017b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017ae:	bf00      	nop
 80017b0:	e000      	b.n	80017b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017b2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10d      	bne.n	80017d6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 0118 	bic.w	r1, r3, #24
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e147      	b.n	8001a86 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fae4 	bl	8000dd8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0210 	bic.w	r2, r2, #16
 800181e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001820:	f7ff fc6a 	bl	80010f8 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001826:	e012      	b.n	800184e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001828:	f7ff fc66 	bl	80010f8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b0a      	cmp	r3, #10
 8001834:	d90b      	bls.n	800184e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e11b      	b.n	8001a86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d0e5      	beq.n	8001828 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186c:	f7ff fc44 	bl	80010f8 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001872:	e012      	b.n	800189a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001874:	f7ff fc40 	bl	80010f8 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b0a      	cmp	r3, #10
 8001880:	d90b      	bls.n	800189a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001886:	f043 0201 	orr.w	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2203      	movs	r2, #3
 8001892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0f5      	b.n	8001a86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0e5      	beq.n	8001874 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0202 	orr.w	r2, r2, #2
 80018b6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a74      	ldr	r2, [pc, #464]	@ (8001a90 <HAL_FDCAN_Init+0x2ac>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d103      	bne.n	80018ca <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80018c2:	4a74      	ldr	r2, [pc, #464]	@ (8001a94 <HAL_FDCAN_Init+0x2b0>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7c1b      	ldrb	r3, [r3, #16]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d108      	bne.n	80018e4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018e0:	619a      	str	r2, [r3, #24]
 80018e2:	e007      	b.n	80018f4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7c5b      	ldrb	r3, [r3, #17]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	e007      	b.n	800191e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800191c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7c9b      	ldrb	r3, [r3, #18]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	e007      	b.n	8001948 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001946:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800196c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0210 	bic.w	r2, r2, #16
 800197c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0204 	orr.w	r2, r2, #4
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	e02c      	b.n	80019f2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d028      	beq.n	80019f2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d01c      	beq.n	80019e2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019b6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0210 	orr.w	r2, r2, #16
 80019c6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d110      	bne.n	80019f2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	e007      	b.n	80019f2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a02:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a0a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a1a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a1c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a26:	d115      	bne.n	8001a54 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a32:	3b01      	subs	r3, #1
 8001a34:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a36:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a40:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a50:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a52:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fe68 	bl	8002740 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40006400 	.word	0x40006400
 8001a94:	40006500 	.word	0x40006500

08001a98 <HAL_FDCAN_DeInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeInit(FDCAN_HandleTypeDef *hfdcan)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_FDCAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e015      	b.n	8001ad6 <HAL_FDCAN_DeInit+0x3e>

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));

  /* Stop the FDCAN module: return value is voluntary ignored */
  (void)HAL_FDCAN_Stop(hfdcan);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f90d 	bl	8001cca <HAL_FDCAN_Stop>

  /* Disable Interrupt lines */
  CLEAR_BIT(hfdcan->Instance->ILE, (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0203 	bic.w	r2, r2, #3
 8001abe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* DeInit the low level hardware: CLOCK, NVIC */
  hfdcan->MspDeInitCallback(hfdcan);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_FDCAN_MspDeInit(hfdcan);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff f9eb 	bl	8000e9c <HAL_FDCAN_MspDeInit>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Reset the FDCAN ErrorCode */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_RESET;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b087      	sub	sp, #28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001aee:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d002      	beq.n	8001afc <HAL_FDCAN_ConfigFilter+0x1e>
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d13d      	bne.n	8001b78 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d119      	bne.n	8001b38 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001b10:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001b18:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e01d      	b.n	8001b74 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	075a      	lsls	r2, r3, #29
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	079a      	lsls	r2, r3, #30
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e006      	b.n	8001b86 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7c:	f043 0202 	orr.w	r2, r3, #2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d116      	bne.n	8001bda <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	011a      	lsls	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	f043 0204 	orr.w	r2, r3, #4
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d108      	bne.n	8001c1e <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	0219      	lsls	r1, r3, #8
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e006      	b.n	8001c2c <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c22:	f043 0204 	orr.w	r2, r3, #4
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
  }
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d109      	bne.n	8001c60 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c5a:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e006      	b.n	8001c6e <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c64:	f043 0204 	orr.w	r2, r3, #4
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d110      	bne.n	8001cb0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e006      	b.n	8001cbe <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb4:	f043 0204 	orr.w	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d156      	bne.n	8001d90 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001cf2:	e011      	b.n	8001d18 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d90b      	bls.n	8001d12 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e045      	b.n	8001d9e <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0e6      	beq.n	8001cf4 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0210 	bic.w	r2, r2, #16
 8001d38:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d3a:	e011      	b.n	8001d60 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b0a      	cmp	r3, #10
 8001d40:	d90b      	bls.n	8001d5a <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2203      	movs	r2, #3
 8001d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e021      	b.n	8001d9e <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d0e6      	beq.n	8001d3c <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0202 	orr.w	r2, r2, #2
 8001d7c:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e006      	b.n	8001d9e <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d94:	f043 0208 	orr.w	r2, r3, #8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d12c      	bne.n	8001e1c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e023      	b.n	8001e2a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fd0d 	bl	8002818 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2101      	movs	r1, #1
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e006      	b.n	8001e2a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e20:	f043 0208 	orr.w	r2, r3, #8
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>:
  * @retval Tx buffer index of last Tx FIFO/Queue request
  *          - Any value of @arg FDCAN_Tx_location if Tx request has been submitted.
  *          - 0 if no Tx FIFO/Queue request have been submitted.
  */
uint32_t HAL_FDCAN_GetLatestTxFifoQRequestBuffer(const FDCAN_HandleTypeDef *hfdcan)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Return Last Tx FIFO/Queue Request Buffer */
  return hfdcan->LatestTxFifoQRequest;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_FDCAN_AbortTxRequest>:
  * @param  BufferIndex buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AbortTxRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndex));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d106      	bne.n	8001e6e <HAL_FDCAN_AbortTxRequest+0x24>
  {
    /* Add cancellation request */
    hfdcan->Instance->TXBCR = BufferIndex;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    /* Return function status */
    return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e006      	b.n	8001e7c <HAL_FDCAN_AbortTxRequest+0x32>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e72:	f043 0208 	orr.w	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
  }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b08b      	sub	sp, #44	@ 0x2c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ea0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001ea2:	7efb      	ldrb	r3, [r7, #27]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	f040 80e8 	bne.w	800207a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b40      	cmp	r3, #64	@ 0x40
 8001eae:	d137      	bne.n	8001f20 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0db      	b.n	8002088 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed8:	0e1b      	lsrs	r3, r3, #24
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10a      	bne.n	8001ef8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eea:	0a5b      	lsrs	r3, r3, #9
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1e:	e036      	b.n	8001f8e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0a3      	b.n	8002088 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f48:	0e1b      	lsrs	r3, r3, #24
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10a      	bne.n	8001f68 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d107      	bne.n	8001fb2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0c9b      	lsrs	r3, r3, #18
 8001fa8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e005      	b.n	8001fbe <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	3304      	adds	r3, #4
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	f003 020f 	and.w	r2, r3, #15
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e1b      	lsrs	r3, r3, #24
 8002012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0fda      	lsrs	r2, r3, #31
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	3304      	adds	r3, #4
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	e00a      	b.n	800204a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	441a      	add	r2, r3
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	440b      	add	r3, r1
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	3301      	adds	r3, #1
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4a11      	ldr	r2, [pc, #68]	@ (8002094 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	461a      	mov	r2, r3
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	4293      	cmp	r3, r2
 8002058:	d3ec      	bcc.n	8002034 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b40      	cmp	r3, #64	@ 0x40
 800205e:	d105      	bne.n	800206c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800206a:	e004      	b.n	8002076 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e006      	b.n	8002088 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207e:	f043 0208 	orr.w	r2, r3, #8
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	372c      	adds	r7, #44	@ 0x2c
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	08004824 	.word	0x08004824

08002098 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020aa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d003      	beq.n	80020ba <HAL_FDCAN_ActivateNotification+0x22>
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	f040 80c8 	bne.w	800224a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03b      	beq.n	800214e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d031      	beq.n	800214e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d027      	beq.n	800214e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01d      	beq.n	800214e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d013      	beq.n	800214e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00c      	beq.n	800215e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d13b      	bne.n	80021ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d131      	bne.n	80021ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d127      	bne.n	80021ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11d      	bne.n	80021ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d113      	bne.n	80021ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00c      	beq.n	80021fa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0202 	orr.w	r2, r2, #2
 80021f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	430a      	orrs	r2, r1
 8002214:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	430a      	orrs	r2, r1
 8002232:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	430a      	orrs	r2, r1
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e006      	b.n	8002258 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224e:	f043 0202 	orr.w	r2, r3, #2
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_FDCAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg FDCAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeactivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t InactiveITs)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002274:	75fb      	strb	r3, [r7, #23]
  uint32_t ITs_lines_selection;

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(InactiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d003      	beq.n	8002284 <HAL_FDCAN_DeactivateNotification+0x20>
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b02      	cmp	r3, #2
 8002280:	f040 80c3 	bne.w	800240a <HAL_FDCAN_DeactivateNotification+0x1a6>
  {
    /* Disable the selected interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, InactiveITs);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	43da      	mvns	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	400a      	ands	r2, r1
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((InactiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <HAL_FDCAN_DeactivateNotification+0x46>
    {
      /* Disable Tx Buffer Transmission Interrupts */
      CLEAR_REG(hfdcan->Instance->TXBTIE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((InactiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_FDCAN_DeactivateNotification+0x5a>
    {
      /* Disable Tx Buffer Cancellation Finished Interrupt */
      CLEAR_REG(hfdcan->Instance->TXBCIE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Get interrupts enabled and interrupts line selection */
    ITs_enabled = hfdcan->Instance->IE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	613b      	str	r3, [r7, #16]
    ITs_lines_selection = hfdcan->Instance->ILS;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	60fb      	str	r3, [r7, #12]

    /* Check if some interrupts are still enabled on interrupt line 0 */
    if ((((ITs_enabled & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_FDCAN_DeactivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d043      	beq.n	800236a <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_FDCAN_DeactivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d039      	beq.n	800236a <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_SMSG)           != 0U)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_FDCAN_DeactivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d02f      	beq.n	800236a <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_FDCAN_DeactivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d025      	beq.n	800236a <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_MISC)           != 0U)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_FDCAN_DeactivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01b      	beq.n	800236a <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <HAL_FDCAN_DeactivateNotification+0xe2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d011      	beq.n	800236a <HAL_FDCAN_DeactivateNotification+0x106>
        (((ITs_enabled & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_FDCAN_DeactivateNotification+0xf6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_FDCAN_DeactivateNotification+0x106>
      /* Do nothing */
    }
    else /* no more interrupts enabled on interrupt line 0 */
    {
      /* Disable interrupt line 0 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Check if some interrupts are still enabled on interrupt line 1 */
    if ((((ITs_enabled & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_FDCAN_DeactivateNotification+0x11a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d143      	bne.n	8002406 <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_FDCAN_DeactivateNotification+0x12e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d139      	bne.n	8002406 <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_SMSG)           != 0U)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <HAL_FDCAN_DeactivateNotification+0x142>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12f      	bne.n	8002406 <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_FDCAN_DeactivateNotification+0x156>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d125      	bne.n	8002406 <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_MISC)           != 0U)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_FDCAN_DeactivateNotification+0x16a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11b      	bne.n	8002406 <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_FDCAN_DeactivateNotification+0x17e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d111      	bne.n	8002406 <HAL_FDCAN_DeactivateNotification+0x1a2>
        (((ITs_enabled & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_FDCAN_DeactivateNotification+0x192>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_FDCAN_DeactivateNotification+0x1a2>
      /* Do nothing */
    }
    else /* no more interrupts enabled on interrupt line 1 */
    {
      /* Disable interrupt line 1 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0202 	bic.w	r2, r2, #2
 8002404:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e006      	b.n	8002418 <HAL_FDCAN_DeactivateNotification+0x1b4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240e:	f043 0202 	orr.w	r2, r3, #2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	@ 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002432:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002440:	4013      	ands	r3, r2
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002458:	4013      	ands	r3, r2
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002470:	4013      	ands	r3, r2
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800247e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	6a3a      	ldr	r2, [r7, #32]
 8002488:	4013      	ands	r3, r2
 800248a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002492:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002496:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2240      	movs	r2, #64	@ 0x40
 80024ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f916 	bl	8002702 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d019      	beq.n	8002514 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d014      	beq.n	8002514 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024f2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800250a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800250c:	6939      	ldr	r1, [r7, #16]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8d8 	bl	80026c4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002520:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8a2 	bl	800266e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800252a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002536:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f86c 	bl	8000618 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800254e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f897 	bl	8002684 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002572:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f890 	bl	800269a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d018      	beq.n	80025b6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d013      	beq.n	80025b6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002596:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80025ae:	68f9      	ldr	r1, [r7, #12]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f87c 	bl	80026ae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00c      	beq.n	80025da <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f880 	bl	80026da <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f878 	bl	80026ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00f      	beq.n	8002628 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800261a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002620:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002636:	69f9      	ldr	r1, [r7, #28]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f876 	bl	800272a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f858 	bl	8002716 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002666:	bf00      	nop
 8002668:	3730      	adds	r7, #48	@ 0x30
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002748:	4b30      	ldr	r3, [pc, #192]	@ (800280c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800274a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2f      	ldr	r2, [pc, #188]	@ (8002810 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d103      	bne.n	800275e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800275c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2c      	ldr	r2, [pc, #176]	@ (8002814 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800276e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800277e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002786:	041a      	lsls	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027a4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	061a      	lsls	r2, r3, #24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e005      	b.n	80027f2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3304      	adds	r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3f3      	bcc.n	80027e6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	4000a400 	.word	0x4000a400
 8002810:	40006800 	.word	0x40006800
 8002814:	40006c00 	.word	0x40006c00

08002818 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002836:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800283e:	4313      	orrs	r3, r2
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e00a      	b.n	800285a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800284c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002852:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002858:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002864:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800286a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002870:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3304      	adds	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	3304      	adds	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e020      	b.n	80028ee <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3303      	adds	r3, #3
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3302      	adds	r3, #2
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	440b      	add	r3, r1
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028c4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3301      	adds	r3, #1
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	440b      	add	r3, r1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80028d2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	440a      	add	r2, r1
 80028da:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028dc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	3304      	adds	r3, #4
 80028e6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3304      	adds	r3, #4
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4a06      	ldr	r2, [pc, #24]	@ (800290c <FDCAN_CopyMessageToRAM+0xf4>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	461a      	mov	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d3d6      	bcc.n	80028ac <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	3724      	adds	r7, #36	@ 0x24
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	08004824 	.word	0x08004824

08002910 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002922:	4b2f      	ldr	r3, [pc, #188]	@ (80029e0 <HAL_FLASH_Program+0xd0>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_FLASH_Program+0x1e>
 800292a:	2302      	movs	r3, #2
 800292c:	e053      	b.n	80029d6 <HAL_FLASH_Program+0xc6>
 800292e:	4b2c      	ldr	r3, [pc, #176]	@ (80029e0 <HAL_FLASH_Program+0xd0>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002934:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002938:	f000 f892 	bl	8002a60 <FLASH_WaitForLastOperation>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d143      	bne.n	80029ce <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002946:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <HAL_FLASH_Program+0xd0>)
 8002948:	2200      	movs	r2, #0
 800294a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_FLASH_Program+0xd4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002958:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <HAL_FLASH_Program+0xd4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a21      	ldr	r2, [pc, #132]	@ (80029e4 <HAL_FLASH_Program+0xd4>)
 800295e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002962:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002964:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <HAL_FLASH_Program+0xd0>)
 8002966:	2202      	movs	r2, #2
 8002968:	771a      	strb	r2, [r3, #28]
 800296a:	e002      	b.n	8002972 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800296c:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <HAL_FLASH_Program+0xd0>)
 800296e:	2200      	movs	r2, #0
 8002970:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800297c:	68b8      	ldr	r0, [r7, #8]
 800297e:	f000 f8c1 	bl	8002b04 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002982:	2301      	movs	r3, #1
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e010      	b.n	80029aa <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d002      	beq.n	8002994 <HAL_FLASH_Program+0x84>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d10a      	bne.n	80029aa <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	68b8      	ldr	r0, [r7, #8]
 800299a:	f000 f8d9 	bl	8002b50 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d102      	bne.n	80029aa <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80029a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80029a8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029ae:	f000 f857 	bl	8002a60 <FLASH_WaitForLastOperation>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80029bc:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_FLASH_Program+0xd4>)
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	4907      	ldr	r1, [pc, #28]	@ (80029e4 <HAL_FLASH_Program+0xd4>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80029ca:	f000 fa0f 	bl	8002dec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029ce:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <HAL_FLASH_Program+0xd0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000058 	.word	0x20000058
 80029e4:	40022000 	.word	0x40022000

080029e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_FLASH_Unlock+0x38>)
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da0b      	bge.n	8002a12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80029fa:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_FLASH_Unlock+0x38>)
 80029fc:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_FLASH_Unlock+0x3c>)
 80029fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a00:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <HAL_FLASH_Unlock+0x38>)
 8002a02:	4a09      	ldr	r2, [pc, #36]	@ (8002a28 <HAL_FLASH_Unlock+0x40>)
 8002a04:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_FLASH_Unlock+0x38>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da01      	bge.n	8002a12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002a12:	79fb      	ldrb	r3, [r7, #7]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40022000 	.word	0x40022000
 8002a24:	45670123 	.word	0x45670123
 8002a28:	cdef89ab 	.word	0xcdef89ab

08002a2c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002a36:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_FLASH_Lock+0x30>)
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <HAL_FLASH_Lock+0x30>)
 8002a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a40:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_FLASH_Lock+0x30>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da01      	bge.n	8002a4e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40022000 	.word	0x40022000

08002a60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002a68:	f7fe fb46 	bl	80010f8 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002a6e:	e009      	b.n	8002a84 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002a70:	f7fe fb42 	bl	80010f8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d201      	bcs.n	8002a84 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e037      	b.n	8002af4 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <FLASH_WaitForLastOperation+0x9c>)
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d0ee      	beq.n	8002a70 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002a92:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <FLASH_WaitForLastOperation+0x9c>)
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01d      	beq.n	8002ae0 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8002aa4:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <FLASH_WaitForLastOperation+0xa0>)
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <FLASH_WaitForLastOperation+0xa0>)
 8002aae:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ab6:	d307      	bcc.n	8002ac8 <FLASH_WaitForLastOperation+0x68>
 8002ab8:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <FLASH_WaitForLastOperation+0x9c>)
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002ac2:	490e      	ldr	r1, [pc, #56]	@ (8002afc <FLASH_WaitForLastOperation+0x9c>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	618b      	str	r3, [r1, #24]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <FLASH_WaitForLastOperation+0x7c>
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <FLASH_WaitForLastOperation+0x9c>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ada:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e009      	b.n	8002af4 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <FLASH_WaitForLastOperation+0x9c>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002aec:	4b03      	ldr	r3, [pc, #12]	@ (8002afc <FLASH_WaitForLastOperation+0x9c>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40022000 	.word	0x40022000
 8002b00:	20000058 	.word	0x20000058

08002b04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002b10:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <FLASH_Program_DoubleWord+0x48>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <FLASH_Program_DoubleWord+0x48>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002b22:	f3bf 8f6f 	isb	sy
}
 8002b26:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	000a      	movs	r2, r1
 8002b36:	2300      	movs	r3, #0
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	3104      	adds	r1, #4
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	40022000 	.word	0x40022000

08002b50 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	@ 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002b5a:	2340      	movs	r3, #64	@ 0x40
 8002b5c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002b66:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <FLASH_Program_Fast+0x68>)
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4a13      	ldr	r2, [pc, #76]	@ (8002bb8 <FLASH_Program_Fast+0x68>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b72:	f3ef 8310 	mrs	r3, PRIMASK
 8002b76:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b78:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002b7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3304      	adds	r3, #4
 8002b92:	617b      	str	r3, [r7, #20]
    row_index--;
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ef      	bne.n	8002b80 <FLASH_Program_Fast+0x30>
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f383 8810 	msr	PRIMASK, r3
}
 8002baa:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002bac:	bf00      	nop
 8002bae:	3724      	adds	r7, #36	@ 0x24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bc6:	4b49      	ldr	r3, [pc, #292]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_FLASHEx_Erase+0x16>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e087      	b.n	8002ce2 <HAL_FLASHEx_Erase+0x126>
 8002bd2:	4b46      	ldr	r3, [pc, #280]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bdc:	f7ff ff40 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d177      	bne.n	8002cda <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bea:	4b40      	ldr	r3, [pc, #256]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c08:	4b39      	ldr	r3, [pc, #228]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a38      	ldr	r2, [pc, #224]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002c0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c12:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002c14:	4b35      	ldr	r3, [pc, #212]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002c16:	2203      	movs	r2, #3
 8002c18:	771a      	strb	r2, [r3, #28]
 8002c1a:	e016      	b.n	8002c4a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002c1c:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	771a      	strb	r2, [r3, #28]
 8002c22:	e012      	b.n	8002c4a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002c24:	4b32      	ldr	r3, [pc, #200]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c30:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002c36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c3a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002c3e:	2202      	movs	r2, #2
 8002c40:	771a      	strb	r2, [r3, #28]
 8002c42:	e002      	b.n	8002c4a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002c44:	4b29      	ldr	r3, [pc, #164]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d113      	bne.n	8002c7a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f84c 	bl	8002cf4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c60:	f7ff fefe 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002c68:	4b21      	ldr	r3, [pc, #132]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002c6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c72:	f023 0304 	bic.w	r3, r3, #4
 8002c76:	6153      	str	r3, [r2, #20]
 8002c78:	e02d      	b.n	8002cd6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c80:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	e01d      	b.n	8002cc6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	68b8      	ldr	r0, [r7, #8]
 8002c92:	f000 f867 	bl	8002d64 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c9a:	f7ff fee1 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002ca2:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4a12      	ldr	r2, [pc, #72]	@ (8002cf0 <HAL_FLASHEx_Erase+0x134>)
 8002ca8:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8002cac:	f023 0302 	bic.w	r3, r3, #2
 8002cb0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	601a      	str	r2, [r3, #0]
          break;
 8002cbe:	e00a      	b.n	8002cd6 <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3d9      	bcc.n	8002c8a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002cd6:	f000 f889 	bl	8002dec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cda:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <HAL_FLASHEx_Erase+0x130>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]

  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000058 	.word	0x20000058
 8002cf0:	40022000 	.word	0x40022000

08002cf4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d016      	beq.n	8002d36 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002d28:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d32:	6153      	str	r3, [r2, #20]
 8002d34:	e007      	b.n	8002d46 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4a09      	ldr	r2, [pc, #36]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <FLASH_MassErase+0x6c>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6153      	str	r3, [r2, #20]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000

08002d64 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d84:	6153      	str	r3, [r2, #20]
 8002d86:	e011      	b.n	8002dac <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4a14      	ldr	r2, [pc, #80]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002d98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d9c:	6153      	str	r3, [r2, #20]
 8002d9e:	e005      	b.n	8002dac <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4a10      	ldr	r2, [pc, #64]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002da6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002daa:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002dac:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002dbc:	490a      	ldr	r1, [pc, #40]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4a05      	ldr	r2, [pc, #20]	@ (8002de8 <FLASH_PageErase+0x84>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6153      	str	r3, [r2, #20]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000

08002dec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002df2:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <FLASH_FlushCaches+0x8c>)
 8002df4:	7f1b      	ldrb	r3, [r3, #28]
 8002df6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d002      	beq.n	8002e04 <FLASH_FlushCaches+0x18>
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d117      	bne.n	8002e34 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002e04:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e0a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002e10:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e28:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d002      	beq.n	8002e40 <FLASH_FlushCaches+0x54>
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d111      	bne.n	8002e64 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e58:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	@ (8002e7c <FLASH_FlushCaches+0x90>)
 8002e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e62:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <FLASH_FlushCaches+0x8c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	771a      	strb	r2, [r3, #28]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000058 	.word	0x20000058
 8002e7c:	40022000 	.word	0x40022000

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e8e:	e15a      	b.n	8003146 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 814c 	beq.w	8003140 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d005      	beq.n	8002ec0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d130      	bne.n	8002f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0201 	and.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d017      	beq.n	8002f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d123      	bne.n	8002fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	6939      	ldr	r1, [r7, #16]
 8002fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a6 	beq.w	8003140 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8003164 <HAL_GPIO_Init+0x2e4>)
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8003164 <HAL_GPIO_Init+0x2e4>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003000:	4b58      	ldr	r3, [pc, #352]	@ (8003164 <HAL_GPIO_Init+0x2e4>)
 8003002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300c:	4a56      	ldr	r2, [pc, #344]	@ (8003168 <HAL_GPIO_Init+0x2e8>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003036:	d01f      	beq.n	8003078 <HAL_GPIO_Init+0x1f8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a4c      	ldr	r2, [pc, #304]	@ (800316c <HAL_GPIO_Init+0x2ec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d019      	beq.n	8003074 <HAL_GPIO_Init+0x1f4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a4b      	ldr	r2, [pc, #300]	@ (8003170 <HAL_GPIO_Init+0x2f0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_GPIO_Init+0x1f0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a4a      	ldr	r2, [pc, #296]	@ (8003174 <HAL_GPIO_Init+0x2f4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_Init+0x1ec>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a49      	ldr	r2, [pc, #292]	@ (8003178 <HAL_GPIO_Init+0x2f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x1e8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a48      	ldr	r2, [pc, #288]	@ (800317c <HAL_GPIO_Init+0x2fc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_Init+0x1e4>
 8003060:	2305      	movs	r3, #5
 8003062:	e00a      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003064:	2306      	movs	r3, #6
 8003066:	e008      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003068:	2304      	movs	r3, #4
 800306a:	e006      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 800306c:	2303      	movs	r3, #3
 800306e:	e004      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003070:	2302      	movs	r3, #2
 8003072:	e002      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_GPIO_Init+0x1fa>
 8003078:	2300      	movs	r3, #0
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	f002 0203 	and.w	r2, r2, #3
 8003080:	0092      	lsls	r2, r2, #2
 8003082:	4093      	lsls	r3, r2
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800308a:	4937      	ldr	r1, [pc, #220]	@ (8003168 <HAL_GPIO_Init+0x2e8>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003098:	4b39      	ldr	r3, [pc, #228]	@ (8003180 <HAL_GPIO_Init+0x300>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030bc:	4a30      	ldr	r2, [pc, #192]	@ (8003180 <HAL_GPIO_Init+0x300>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003180 <HAL_GPIO_Init+0x300>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e6:	4a26      	ldr	r2, [pc, #152]	@ (8003180 <HAL_GPIO_Init+0x300>)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030ec:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <HAL_GPIO_Init+0x300>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003110:	4a1b      	ldr	r2, [pc, #108]	@ (8003180 <HAL_GPIO_Init+0x300>)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003116:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <HAL_GPIO_Init+0x300>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800313a:	4a11      	ldr	r2, [pc, #68]	@ (8003180 <HAL_GPIO_Init+0x300>)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3301      	adds	r3, #1
 8003144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	f47f ae9d 	bne.w	8002e90 <HAL_GPIO_Init+0x10>
  }
}
 8003156:	bf00      	nop
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40021000 	.word	0x40021000
 8003168:	40010000 	.word	0x40010000
 800316c:	48000400 	.word	0x48000400
 8003170:	48000800 	.word	0x48000800
 8003174:	48000c00 	.word	0x48000c00
 8003178:	48001000 	.word	0x48001000
 800317c:	48001400 	.word	0x48001400
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003192:	e0bd      	b.n	8003310 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003194:	2201      	movs	r2, #1
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80b0 	beq.w	800330a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80031aa:	4a60      	ldr	r2, [pc, #384]	@ (800332c <HAL_GPIO_DeInit+0x1a8>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031d2:	d01f      	beq.n	8003214 <HAL_GPIO_DeInit+0x90>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a56      	ldr	r2, [pc, #344]	@ (8003330 <HAL_GPIO_DeInit+0x1ac>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d019      	beq.n	8003210 <HAL_GPIO_DeInit+0x8c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a55      	ldr	r2, [pc, #340]	@ (8003334 <HAL_GPIO_DeInit+0x1b0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <HAL_GPIO_DeInit+0x88>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a54      	ldr	r2, [pc, #336]	@ (8003338 <HAL_GPIO_DeInit+0x1b4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00d      	beq.n	8003208 <HAL_GPIO_DeInit+0x84>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a53      	ldr	r2, [pc, #332]	@ (800333c <HAL_GPIO_DeInit+0x1b8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <HAL_GPIO_DeInit+0x80>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a52      	ldr	r2, [pc, #328]	@ (8003340 <HAL_GPIO_DeInit+0x1bc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_GPIO_DeInit+0x7c>
 80031fc:	2305      	movs	r3, #5
 80031fe:	e00a      	b.n	8003216 <HAL_GPIO_DeInit+0x92>
 8003200:	2306      	movs	r3, #6
 8003202:	e008      	b.n	8003216 <HAL_GPIO_DeInit+0x92>
 8003204:	2304      	movs	r3, #4
 8003206:	e006      	b.n	8003216 <HAL_GPIO_DeInit+0x92>
 8003208:	2303      	movs	r3, #3
 800320a:	e004      	b.n	8003216 <HAL_GPIO_DeInit+0x92>
 800320c:	2302      	movs	r3, #2
 800320e:	e002      	b.n	8003216 <HAL_GPIO_DeInit+0x92>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_GPIO_DeInit+0x92>
 8003214:	2300      	movs	r3, #0
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	f002 0203 	and.w	r2, r2, #3
 800321c:	0092      	lsls	r2, r2, #2
 800321e:	4093      	lsls	r3, r2
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	429a      	cmp	r2, r3
 8003224:	d132      	bne.n	800328c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003226:	4b47      	ldr	r3, [pc, #284]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	4945      	ldr	r1, [pc, #276]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 8003230:	4013      	ands	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003234:	4b43      	ldr	r3, [pc, #268]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	4941      	ldr	r1, [pc, #260]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 800323e:	4013      	ands	r3, r2
 8003240:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003242:	4b40      	ldr	r3, [pc, #256]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	493e      	ldr	r1, [pc, #248]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 800324c:	4013      	ands	r3, r2
 800324e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003250:	4b3c      	ldr	r3, [pc, #240]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	493a      	ldr	r1, [pc, #232]	@ (8003344 <HAL_GPIO_DeInit+0x1c0>)
 800325a:	4013      	ands	r3, r2
 800325c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800326e:	4a2f      	ldr	r2, [pc, #188]	@ (800332c <HAL_GPIO_DeInit+0x1a8>)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43da      	mvns	r2, r3
 800327e:	482b      	ldr	r0, [pc, #172]	@ (800332c <HAL_GPIO_DeInit+0x1a8>)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	400a      	ands	r2, r1
 8003286:	3302      	adds	r3, #2
 8003288:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2103      	movs	r1, #3
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	08da      	lsrs	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3208      	adds	r2, #8
 80032a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	08d2      	lsrs	r2, r2, #3
 80032c0:	4019      	ands	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3208      	adds	r2, #8
 80032c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2103      	movs	r1, #3
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	2101      	movs	r1, #1
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2103      	movs	r1, #3
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	401a      	ands	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	609a      	str	r2, [r3, #8]
    }

    position++;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f af3b 	bne.w	8003194 <HAL_GPIO_DeInit+0x10>
  }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40010000 	.word	0x40010000
 8003330:	48000400 	.word	0x48000400
 8003334:	48000800 	.word	0x48000800
 8003338:	48000c00 	.word	0x48000c00
 800333c:	48001000 	.word	0x48001000
 8003340:	48001400 	.word	0x48001400
 8003344:	40010400 	.word	0x40010400

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
 8003354:	4613      	mov	r3, r2
 8003356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003358:	787b      	ldrb	r3, [r7, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003364:	e002      	b.n	800336c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a04      	ldr	r2, [pc, #16]	@ (8003394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40007000 	.word	0x40007000

08003398 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 80033a0:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	43db      	mvns	r3, r3
 80033ac:	401a      	ands	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	4908      	ldr	r1, [pc, #32]	@ (80033d4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 80033b8:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]


}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40007000 	.word	0x40007000

080033d8 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80033e0:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <HAL_PWR_DisableWakeUpPin+0x28>)
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	43db      	mvns	r3, r3
 80033ec:	4904      	ldr	r1, [pc, #16]	@ (8003400 <HAL_PWR_DisableWakeUpPin+0x28>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40007000 	.word	0x40007000

08003404 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003408:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 0307 	bic.w	r3, r3, #7
 8003410:	4a07      	ldr	r2, [pc, #28]	@ (8003430 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003412:	f043 0303 	orr.w	r3, r3, #3
 8003416:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	4a05      	ldr	r2, [pc, #20]	@ (8003434 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003424:	bf30      	wfi
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40007000 	.word	0x40007000
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d141      	bne.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003446:	4b4b      	ldr	r3, [pc, #300]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d131      	bne.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003454:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345a:	4a46      	ldr	r2, [pc, #280]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003464:	4b43      	ldr	r3, [pc, #268]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800346c:	4a41      	ldr	r2, [pc, #260]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003474:	4b40      	ldr	r3, [pc, #256]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2232      	movs	r2, #50	@ 0x32
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	4a3f      	ldr	r2, [pc, #252]	@ (800357c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0c9b      	lsrs	r3, r3, #18
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348a:	e002      	b.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b01      	subs	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003492:	4b38      	ldr	r3, [pc, #224]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349e:	d102      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f2      	bne.n	800348c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a6:	4b33      	ldr	r3, [pc, #204]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b2:	d158      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e057      	b.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034be:	4a2d      	ldr	r2, [pc, #180]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034c8:	e04d      	b.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034d0:	d141      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d2:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034de:	d131      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e0:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034e6:	4a23      	ldr	r2, [pc, #140]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034f0:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2232      	movs	r2, #50	@ 0x32
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	4a1c      	ldr	r2, [pc, #112]	@ (800357c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	0c9b      	lsrs	r3, r3, #18
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003516:	e002      	b.n	800351e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3b01      	subs	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352a:	d102      	bne.n	8003532 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f2      	bne.n	8003518 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003532:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353e:	d112      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e011      	b.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800354a:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003550:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003554:	e007      	b.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800355e:	4a05      	ldr	r2, [pc, #20]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003560:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003564:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40007000 	.word	0x40007000
 8003578:	2000004c 	.word	0x2000004c
 800357c:	431bde83 	.word	0x431bde83

08003580 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b06      	cmp	r3, #6
 8003592:	d87f      	bhi.n	8003694 <HAL_PWREx_EnableGPIOPullUp+0x114>
 8003594:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035b9 	.word	0x080035b9
 80035a0:	080035dd 	.word	0x080035dd
 80035a4:	080035fd 	.word	0x080035fd
 80035a8:	08003619 	.word	0x08003619
 80035ac:	08003635 	.word	0x08003635
 80035b0:	08003651 	.word	0x08003651
 80035b4:	08003671 	.word	0x08003671
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80035b8:	4b3b      	ldr	r3, [pc, #236]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035c2:	4939      	ldr	r1, [pc, #228]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80035c8:	4b37      	ldr	r3, [pc, #220]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80035d2:	43db      	mvns	r3, r3
 80035d4:	4934      	ldr	r1, [pc, #208]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	624b      	str	r3, [r1, #36]	@ 0x24
       break;
 80035da:	e05e      	b.n	800369a <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 80035dc:	4b32      	ldr	r3, [pc, #200]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035e0:	4931      	ldr	r1, [pc, #196]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	628b      	str	r3, [r1, #40]	@ 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80035e8:	4b2f      	ldr	r3, [pc, #188]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f023 0310 	bic.w	r3, r3, #16
 80035f2:	43db      	mvns	r3, r3
 80035f4:	492c      	ldr	r1, [pc, #176]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
       break;
 80035fa:	e04e      	b.n	800369a <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 80035fc:	4b2a      	ldr	r3, [pc, #168]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 80035fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003600:	4929      	ldr	r1, [pc, #164]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	630b      	str	r3, [r1, #48]	@ 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 8003608:	4b27      	ldr	r3, [pc, #156]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800360a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	43db      	mvns	r3, r3
 8003610:	4925      	ldr	r1, [pc, #148]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003612:	4013      	ands	r3, r2
 8003614:	634b      	str	r3, [r1, #52]	@ 0x34
       break;
 8003616:	e040      	b.n	800369a <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 8003618:	4b23      	ldr	r3, [pc, #140]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800361a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800361c:	4922      	ldr	r1, [pc, #136]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	638b      	str	r3, [r1, #56]	@ 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8003624:	4b20      	ldr	r3, [pc, #128]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	43db      	mvns	r3, r3
 800362c:	491e      	ldr	r1, [pc, #120]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800362e:	4013      	ands	r3, r2
 8003630:	63cb      	str	r3, [r1, #60]	@ 0x3c
       break;
 8003632:	e032      	b.n	800369a <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 8003634:	4b1c      	ldr	r3, [pc, #112]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003638:	491b      	ldr	r1, [pc, #108]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	640b      	str	r3, [r1, #64]	@ 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	43db      	mvns	r3, r3
 8003648:	4917      	ldr	r1, [pc, #92]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800364a:	4013      	ands	r3, r2
 800364c:	644b      	str	r3, [r1, #68]	@ 0x44
       break;
 800364e:	e024      	b.n	800369a <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 8003650:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003652:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	4913      	ldr	r1, [pc, #76]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800365a:	4313      	orrs	r3, r2
 800365c:	648b      	str	r3, [r1, #72]	@ 0x48
       CLEAR_BIT(PWR->PDCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003660:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	490f      	ldr	r1, [pc, #60]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800366a:	4013      	ands	r3, r2
 800366c:	64cb      	str	r3, [r1, #76]	@ 0x4c
       break;
 800366e:	e014      	b.n	800369a <HAL_PWREx_EnableGPIOPullUp+0x11a>
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, (GPIONumber & PWR_PORTG_AVAILABLE_PINS));
 8003670:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003672:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800367a:	490b      	ldr	r1, [pc, #44]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800367c:	4313      	orrs	r3, r2
 800367e:	650b      	str	r3, [r1, #80]	@ 0x50
       CLEAR_BIT(PWR->PDCRG, ((GPIONumber & PWR_PORTG_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_10))));
 8003680:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 8003682:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800368a:	43db      	mvns	r3, r3
 800368c:	4906      	ldr	r1, [pc, #24]	@ (80036a8 <HAL_PWREx_EnableGPIOPullUp+0x128>)
 800368e:	4013      	ands	r3, r2
 8003690:	654b      	str	r3, [r1, #84]	@ 0x54
       break;
 8003692:	e002      	b.n	800369a <HAL_PWREx_EnableGPIOPullUp+0x11a>
    default:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	bf00      	nop
  }

  return status;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40007000 	.word	0x40007000

080036ac <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d87f      	bhi.n	80037c0 <HAL_PWREx_EnableGPIOPullDown+0x114>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036e5 	.word	0x080036e5
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003729 	.word	0x08003729
 80036d4:	08003745 	.word	0x08003745
 80036d8:	08003761 	.word	0x08003761
 80036dc:	0800377d 	.word	0x0800377d
 80036e0:	0800379d 	.word	0x0800379d
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80036e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80036ee:	4939      	ldr	r1, [pc, #228]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	624b      	str	r3, [r1, #36]	@ 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80036f4:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036fe:	43db      	mvns	r3, r3
 8003700:	4934      	ldr	r1, [pc, #208]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003702:	4013      	ands	r3, r2
 8003704:	620b      	str	r3, [r1, #32]
       break;
 8003706:	e05e      	b.n	80037c6 <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8003708:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800370a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f023 0310 	bic.w	r3, r3, #16
 8003712:	4930      	ldr	r1, [pc, #192]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003714:	4313      	orrs	r3, r2
 8003716:	62cb      	str	r3, [r1, #44]	@ 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8003718:	4b2e      	ldr	r3, [pc, #184]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800371a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	43db      	mvns	r3, r3
 8003720:	492c      	ldr	r1, [pc, #176]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003722:	4013      	ands	r3, r2
 8003724:	628b      	str	r3, [r1, #40]	@ 0x28
       break;
 8003726:	e04e      	b.n	80037c6 <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8003728:	4b2a      	ldr	r3, [pc, #168]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800372a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800372c:	4929      	ldr	r1, [pc, #164]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	634b      	str	r3, [r1, #52]	@ 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8003734:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	43db      	mvns	r3, r3
 800373c:	4925      	ldr	r1, [pc, #148]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800373e:	4013      	ands	r3, r2
 8003740:	630b      	str	r3, [r1, #48]	@ 0x30
       break;
 8003742:	e040      	b.n	80037c6 <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8003744:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003748:	4922      	ldr	r1, [pc, #136]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	4313      	orrs	r3, r2
 800374e:	63cb      	str	r3, [r1, #60]	@ 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8003750:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	43db      	mvns	r3, r3
 8003758:	491e      	ldr	r1, [pc, #120]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800375a:	4013      	ands	r3, r2
 800375c:	638b      	str	r3, [r1, #56]	@ 0x38
       break;
 800375e:	e032      	b.n	80037c6 <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 8003760:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003764:	491b      	ldr	r1, [pc, #108]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	644b      	str	r3, [r1, #68]	@ 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 800376c:	4b19      	ldr	r3, [pc, #100]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800376e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	43db      	mvns	r3, r3
 8003774:	4917      	ldr	r1, [pc, #92]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003776:	4013      	ands	r3, r2
 8003778:	640b      	str	r3, [r1, #64]	@ 0x40
       break;
 800377a:	e024      	b.n	80037c6 <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 800377c:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800377e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	4913      	ldr	r1, [pc, #76]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003786:	4313      	orrs	r3, r2
 8003788:	64cb      	str	r3, [r1, #76]	@ 0x4c
       CLEAR_BIT(PWR->PUCRF, (GPIONumber & PWR_PORTF_AVAILABLE_PINS));
 800378a:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800378c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	490f      	ldr	r1, [pc, #60]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 8003796:	4013      	ands	r3, r2
 8003798:	648b      	str	r3, [r1, #72]	@ 0x48
       break;
 800379a:	e014      	b.n	80037c6 <HAL_PWREx_EnableGPIOPullDown+0x11a>
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, ((GPIONumber & PWR_PORTG_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_10))));
 800379c:	4b0d      	ldr	r3, [pc, #52]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 800379e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a6:	490b      	ldr	r1, [pc, #44]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	654b      	str	r3, [r1, #84]	@ 0x54
       CLEAR_BIT(PWR->PUCRG, (GPIONumber & PWR_PORTG_AVAILABLE_PINS));
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80037ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4906      	ldr	r1, [pc, #24]	@ (80037d4 <HAL_PWREx_EnableGPIOPullDown+0x128>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	650b      	str	r3, [r1, #80]	@ 0x50
       break;
 80037be:	e002      	b.n	80037c6 <HAL_PWREx_EnableGPIOPullDown+0x11a>
    default:
      status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	bf00      	nop
  }

  return status;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40007000 	.word	0x40007000

080037d8 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80037e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037e6:	6093      	str	r3, [r2, #8]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037fc:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a04      	ldr	r2, [pc, #16]	@ (8003814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003806:	6093      	str	r3, [r2, #8]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40007000 	.word	0x40007000

08003818 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800381e:	f7fd fc6b 	bl	80010f8 <HAL_GetTick>
 8003822:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003824:	4b39      	ldr	r3, [pc, #228]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a38      	ldr	r2, [pc, #224]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 800382a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003832:	f7fd fc61 	bl	80010f8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e05f      	b.n	8003904 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003844:	4b31      	ldr	r3, [pc, #196]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8003850:	4b2e      	ldr	r3, [pc, #184]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a2d      	ldr	r2, [pc, #180]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 8003856:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800385a:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800385c:	f7fd fc4c 	bl	80010f8 <HAL_GetTick>
 8003860:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8003862:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 8003864:	2201      	movs	r2, #1
 8003866:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386a:	f7fd fc45 	bl	80010f8 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e041      	b.n	8003904 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003880:	4b22      	ldr	r3, [pc, #136]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b04      	cmp	r3, #4
 800388a:	d1ee      	bne.n	800386a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800388c:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <HAL_RCC_DeInit+0xf8>)
 800388e:	4a21      	ldr	r2, [pc, #132]	@ (8003914 <HAL_RCC_DeInit+0xfc>)
 8003890:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003892:	4b21      	ldr	r3, [pc, #132]	@ (8003918 <HAL_RCC_DeInit+0x100>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fbe2 	bl	8001060 <HAL_InitTick>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e02e      	b.n	8003904 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80038a6:	4b19      	ldr	r3, [pc, #100]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038ac:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80038ae:	4b17      	ldr	r3, [pc, #92]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038b4:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038b6:	f7fd fc1f 	bl	80010f8 <HAL_GetTick>
 80038ba:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fd fc1b 	bl	80010f8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e019      	b.n	8003904 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d0:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038e2:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f0:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f8:	4a04      	ldr	r2, [pc, #16]	@ (800390c <HAL_RCC_DeInit+0xf4>)
 80038fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	2000004c 	.word	0x2000004c
 8003914:	00f42400 	.word	0x00f42400
 8003918:	20000050 	.word	0x20000050

0800391c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e2fe      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d075      	beq.n	8003a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393a:	4b97      	ldr	r3, [pc, #604]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003944:	4b94      	ldr	r3, [pc, #592]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b0c      	cmp	r3, #12
 8003952:	d102      	bne.n	800395a <HAL_RCC_OscConfig+0x3e>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d002      	beq.n	8003960 <HAL_RCC_OscConfig+0x44>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d10b      	bne.n	8003978 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	4b8d      	ldr	r3, [pc, #564]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d05b      	beq.n	8003a24 <HAL_RCC_OscConfig+0x108>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d157      	bne.n	8003a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e2d9      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003980:	d106      	bne.n	8003990 <HAL_RCC_OscConfig+0x74>
 8003982:	4b85      	ldr	r3, [pc, #532]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a84      	ldr	r2, [pc, #528]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e01d      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x98>
 800399a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a7b      	ldr	r2, [pc, #492]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 80039b4:	4b78      	ldr	r3, [pc, #480]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a77      	ldr	r2, [pc, #476]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b75      	ldr	r3, [pc, #468]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a74      	ldr	r2, [pc, #464]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fd fb90 	bl	80010f8 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fd fb8c 	bl	80010f8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	@ 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e29e      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0xc0>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fb7c 	bl	80010f8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fd fb78 	bl	80010f8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	@ 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e28a      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a16:	4b60      	ldr	r3, [pc, #384]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0xe8>
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d075      	beq.n	8003b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a32:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a3c:	4b56      	ldr	r3, [pc, #344]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_OscConfig+0x136>
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_OscConfig+0x13c>
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d11f      	bne.n	8003a98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a58:	4b4f      	ldr	r3, [pc, #316]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_OscConfig+0x154>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e25d      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	4b49      	ldr	r3, [pc, #292]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	4946      	ldr	r1, [pc, #280]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a84:	4b45      	ldr	r3, [pc, #276]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fae9 	bl	8001060 <HAL_InitTick>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d043      	beq.n	8003b1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e249      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d023      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd fb24 	bl	80010f8 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fd fb20 	bl	80010f8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e232      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac6:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b31      	ldr	r3, [pc, #196]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	061b      	lsls	r3, r3, #24
 8003ae0:	492d      	ldr	r1, [pc, #180]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
 8003ae6:	e01a      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003aee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd fb00 	bl	80010f8 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afc:	f7fd fafc 	bl	80010f8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e20e      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0e:	4b22      	ldr	r3, [pc, #136]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x1e0>
 8003b1a:	e000      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d041      	beq.n	8003bae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b32:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b38:	4a17      	ldr	r2, [pc, #92]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fd fad9 	bl	80010f8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4a:	f7fd fad5 	bl	80010f8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1e7      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ef      	beq.n	8003b4a <HAL_RCC_OscConfig+0x22e>
 8003b6a:	e020      	b.n	8003bae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fd fabc 	bl	80010f8 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b82:	e00d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fd fab8 	bl	80010f8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d906      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1ca      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ea      	bne.n	8003b84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a6 	beq.w	8003d08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc0:	4b84      	ldr	r3, [pc, #528]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x2b4>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2b6>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be2:	4b7c      	ldr	r3, [pc, #496]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf2:	4b79      	ldr	r3, [pc, #484]	@ (8003dd8 <HAL_RCC_OscConfig+0x4bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d118      	bne.n	8003c30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfe:	4b76      	ldr	r3, [pc, #472]	@ (8003dd8 <HAL_RCC_OscConfig+0x4bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a75      	ldr	r2, [pc, #468]	@ (8003dd8 <HAL_RCC_OscConfig+0x4bc>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fa75 	bl	80010f8 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd fa71 	bl	80010f8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e183      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c24:	4b6c      	ldr	r3, [pc, #432]	@ (8003dd8 <HAL_RCC_OscConfig+0x4bc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d108      	bne.n	8003c4a <HAL_RCC_OscConfig+0x32e>
 8003c38:	4b66      	ldr	r3, [pc, #408]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	4a65      	ldr	r2, [pc, #404]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c48:	e024      	b.n	8003c94 <HAL_RCC_OscConfig+0x378>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d110      	bne.n	8003c74 <HAL_RCC_OscConfig+0x358>
 8003c52:	4b60      	ldr	r3, [pc, #384]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c58:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c62:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c68:	4a5a      	ldr	r2, [pc, #360]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c72:	e00f      	b.n	8003c94 <HAL_RCC_OscConfig+0x378>
 8003c74:	4b57      	ldr	r3, [pc, #348]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	4a56      	ldr	r2, [pc, #344]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c84:	4b53      	ldr	r3, [pc, #332]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8a:	4a52      	ldr	r2, [pc, #328]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fd fa2c 	bl	80010f8 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fd fa28 	bl	80010f8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e138      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cba:	4b46      	ldr	r3, [pc, #280]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ed      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x388>
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd fa15 	bl	80010f8 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fd fa11 	bl	80010f8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e121      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ed      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cf6:	7ffb      	ldrb	r3, [r7, #31]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b35      	ldr	r3, [pc, #212]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d00:	4a34      	ldr	r2, [pc, #208]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03c      	beq.n	8003d8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d22:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd f9e4 	bl	80010f8 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d34:	f7fd f9e0 	bl	80010f8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0f2      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d46:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ef      	beq.n	8003d34 <HAL_RCC_OscConfig+0x418>
 8003d54:	e01b      	b.n	8003d8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d56:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fd f9c7 	bl	80010f8 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d6e:	f7fd f9c3 	bl	80010f8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0d5      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d80:	4b14      	ldr	r3, [pc, #80]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ef      	bne.n	8003d6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80c9 	beq.w	8003f2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d98:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	f000 8083 	beq.w	8003eac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d15e      	bne.n	8003e6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a08      	ldr	r2, [pc, #32]	@ (8003dd4 <HAL_RCC_OscConfig+0x4b8>)
 8003db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fd f99d 	bl	80010f8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	e00c      	b.n	8003ddc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd f999 	bl	80010f8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d905      	bls.n	8003ddc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0ab      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ddc:	4b55      	ldr	r3, [pc, #340]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ec      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de8:	4b52      	ldr	r3, [pc, #328]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	4b52      	ldr	r3, [pc, #328]	@ (8003f38 <HAL_RCC_OscConfig+0x61c>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6a11      	ldr	r1, [r2, #32]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e02:	0212      	lsls	r2, r2, #8
 8003e04:	4311      	orrs	r1, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e0a:	0852      	lsrs	r2, r2, #1
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0552      	lsls	r2, r2, #21
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e16:	0852      	lsrs	r2, r2, #1
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	0652      	lsls	r2, r2, #25
 8003e1c:	4311      	orrs	r1, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e22:	06d2      	lsls	r2, r2, #27
 8003e24:	430a      	orrs	r2, r1
 8003e26:	4943      	ldr	r1, [pc, #268]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2c:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a40      	ldr	r2, [pc, #256]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e38:	4b3e      	ldr	r3, [pc, #248]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd f958 	bl	80010f8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fd f954 	bl	80010f8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e066      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	4b35      	ldr	r3, [pc, #212]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x530>
 8003e6a:	e05e      	b.n	8003f2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a30      	ldr	r2, [pc, #192]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fd f93e 	bl	80010f8 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd f93a 	bl	80010f8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04c      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e92:	4b28      	ldr	r3, [pc, #160]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e9e:	4b25      	ldr	r3, [pc, #148]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	4924      	ldr	r1, [pc, #144]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003ea4:	4b25      	ldr	r3, [pc, #148]	@ (8003f3c <HAL_RCC_OscConfig+0x620>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60cb      	str	r3, [r1, #12]
 8003eaa:	e03e      	b.n	8003f2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e039      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f34 <HAL_RCC_OscConfig+0x618>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0203 	and.w	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d12c      	bne.n	8003f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d123      	bne.n	8003f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d11b      	bne.n	8003f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d113      	bne.n	8003f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d001      	beq.n	8003f2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	019f800c 	.word	0x019f800c
 8003f3c:	feeefffc 	.word	0xfeeefffc

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e11e      	b.n	8004196 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b91      	ldr	r3, [pc, #580]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d910      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b8e      	ldr	r3, [pc, #568]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 020f 	bic.w	r2, r3, #15
 8003f6e:	498c      	ldr	r1, [pc, #560]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b8a      	ldr	r3, [pc, #552]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e106      	b.n	8004196 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d073      	beq.n	800407c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d129      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9c:	4b81      	ldr	r3, [pc, #516]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0f4      	b.n	8004196 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fac:	f000 f966 	bl	800427c <RCC_GetSysClockFreqFromPLLSource>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4a7c      	ldr	r2, [pc, #496]	@ (80041a8 <HAL_RCC_ClockConfig+0x268>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d93f      	bls.n	800403a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fba:	4b7a      	ldr	r3, [pc, #488]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d033      	beq.n	800403a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d12f      	bne.n	800403a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fda:	4b72      	ldr	r3, [pc, #456]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fe2:	4a70      	ldr	r2, [pc, #448]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e024      	b.n	800403a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0c6      	b.n	8004196 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004008:	4b66      	ldr	r3, [pc, #408]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0be      	b.n	8004196 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004018:	f000 f8ce 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 800401c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4a61      	ldr	r2, [pc, #388]	@ (80041a8 <HAL_RCC_ClockConfig+0x268>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d909      	bls.n	800403a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004026:	4b5f      	ldr	r3, [pc, #380]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800402e:	4a5d      	ldr	r2, [pc, #372]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004036:	2380      	movs	r3, #128	@ 0x80
 8004038:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800403a:	4b5a      	ldr	r3, [pc, #360]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4957      	ldr	r1, [pc, #348]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404c:	f7fd f854 	bl	80010f8 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fd f850 	bl	80010f8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e095      	b.n	8004196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	4b4e      	ldr	r3, [pc, #312]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 020c 	and.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	429a      	cmp	r2, r3
 800407a:	d1eb      	bne.n	8004054 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d023      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004094:	4b43      	ldr	r3, [pc, #268]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a42      	ldr	r2, [pc, #264]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 800409a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800409e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040ac:	4b3d      	ldr	r3, [pc, #244]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040b4:	4a3b      	ldr	r2, [pc, #236]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4936      	ldr	r1, [pc, #216]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b80      	cmp	r3, #128	@ 0x80
 80040d4:	d105      	bne.n	80040e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040d6:	4b33      	ldr	r3, [pc, #204]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4a32      	ldr	r2, [pc, #200]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 80040dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e2:	4b2f      	ldr	r3, [pc, #188]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d21d      	bcs.n	800412c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f0:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 020f 	bic.w	r2, r3, #15
 80040f8:	4929      	ldr	r1, [pc, #164]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004100:	f7fc fffa 	bl	80010f8 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fc fff6 	bl	80010f8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e03b      	b.n	8004196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <HAL_RCC_ClockConfig+0x260>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d1ed      	bne.n	8004108 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b1a      	ldr	r3, [pc, #104]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4917      	ldr	r1, [pc, #92]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004156:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490f      	ldr	r1, [pc, #60]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800416a:	f000 f825 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <HAL_RCC_ClockConfig+0x264>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490c      	ldr	r1, [pc, #48]	@ (80041ac <HAL_RCC_ClockConfig+0x26c>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	4a0a      	ldr	r2, [pc, #40]	@ (80041b0 <HAL_RCC_ClockConfig+0x270>)
 8004188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800418a:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <HAL_RCC_ClockConfig+0x274>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc ff66 	bl	8001060 <HAL_InitTick>
 8004194:	4603      	mov	r3, r0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40022000 	.word	0x40022000
 80041a4:	40021000 	.word	0x40021000
 80041a8:	04c4b400 	.word	0x04c4b400
 80041ac:	08004814 	.word	0x08004814
 80041b0:	2000004c 	.word	0x2000004c
 80041b4:	20000050 	.word	0x20000050

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041be:	4b2c      	ldr	r3, [pc, #176]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d102      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004274 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	e047      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041d0:	4b27      	ldr	r3, [pc, #156]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d102      	bne.n	80041e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041dc:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e03e      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041e2:	4b23      	ldr	r3, [pc, #140]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d136      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	3301      	adds	r3, #1
 8004204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800420c:	4a1a      	ldr	r2, [pc, #104]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xc0>)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	4a16      	ldr	r2, [pc, #88]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004216:	68d2      	ldr	r2, [r2, #12]
 8004218:	0a12      	lsrs	r2, r2, #8
 800421a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	617b      	str	r3, [r7, #20]
      break;
 8004224:	e00c      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004226:	4a13      	ldr	r2, [pc, #76]	@ (8004274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	4a10      	ldr	r2, [pc, #64]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	0a12      	lsrs	r2, r2, #8
 8004234:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
      break;
 800423e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	0e5b      	lsrs	r3, r3, #25
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e001      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004260:	693b      	ldr	r3, [r7, #16]
}
 8004262:	4618      	mov	r0, r3
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200

0800427c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004282:	4b1e      	ldr	r3, [pc, #120]	@ (80042fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800428c:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d10c      	bne.n	80042ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042a0:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	4a14      	ldr	r2, [pc, #80]	@ (80042fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042aa:	68d2      	ldr	r2, [r2, #12]
 80042ac:	0a12      	lsrs	r2, r2, #8
 80042ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	617b      	str	r3, [r7, #20]
    break;
 80042b8:	e00c      	b.n	80042d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ba:	4a12      	ldr	r2, [pc, #72]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	4a0e      	ldr	r2, [pc, #56]	@ (80042fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042c4:	68d2      	ldr	r2, [r2, #12]
 80042c6:	0a12      	lsrs	r2, r2, #8
 80042c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    break;
 80042d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d4:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0e5b      	lsrs	r3, r3, #25
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	3301      	adds	r3, #1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042ee:	687b      	ldr	r3, [r7, #4]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40021000 	.word	0x40021000
 8004300:	007a1200 	.word	0x007a1200
 8004304:	00f42400 	.word	0x00f42400

08004308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004310:	2300      	movs	r3, #0
 8004312:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004314:	2300      	movs	r3, #0
 8004316:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8098 	beq.w	8004456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b43      	ldr	r3, [pc, #268]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10d      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	4b40      	ldr	r3, [pc, #256]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433a:	4a3f      	ldr	r2, [pc, #252]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004340:	6593      	str	r3, [r2, #88]	@ 0x58
 8004342:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434e:	2301      	movs	r3, #1
 8004350:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004352:	4b3a      	ldr	r3, [pc, #232]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a39      	ldr	r2, [pc, #228]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435e:	f7fc fecb 	bl	80010f8 <HAL_GetTick>
 8004362:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004364:	e009      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004366:	f7fc fec7 	bl	80010f8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d902      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	74fb      	strb	r3, [r7, #19]
        break;
 8004378:	e005      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800437a:	4b30      	ldr	r3, [pc, #192]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ef      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d159      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800438c:	4b2a      	ldr	r3, [pc, #168]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004396:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01e      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d019      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043a8:	4b23      	ldr	r3, [pc, #140]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b4:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fc fe87 	bl	80010f8 <HAL_GetTick>
 80043ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ec:	e00b      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fc fe83 	bl	80010f8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d902      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	74fb      	strb	r3, [r7, #19]
            break;
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004406:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ec      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441a:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	4903      	ldr	r1, [pc, #12]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004430:	e008      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	74bb      	strb	r3, [r7, #18]
 8004436:	e005      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004444:	7c7b      	ldrb	r3, [r7, #17]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4ba7      	ldr	r3, [pc, #668]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	4aa6      	ldr	r2, [pc, #664]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004462:	4ba1      	ldr	r3, [pc, #644]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	f023 0203 	bic.w	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	499d      	ldr	r1, [pc, #628]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004484:	4b98      	ldr	r3, [pc, #608]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448a:	f023 020c 	bic.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	4995      	ldr	r1, [pc, #596]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044a6:	4b90      	ldr	r3, [pc, #576]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	498c      	ldr	r1, [pc, #560]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044c8:	4b87      	ldr	r3, [pc, #540]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	4984      	ldr	r1, [pc, #528]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044ea:	4b7f      	ldr	r3, [pc, #508]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	497b      	ldr	r1, [pc, #492]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800450c:	4b76      	ldr	r3, [pc, #472]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	4973      	ldr	r1, [pc, #460]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800452e:	4b6e      	ldr	r3, [pc, #440]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	496a      	ldr	r1, [pc, #424]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004550:	4b65      	ldr	r3, [pc, #404]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	4962      	ldr	r1, [pc, #392]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004572:	4b5d      	ldr	r3, [pc, #372]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	4959      	ldr	r1, [pc, #356]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004594:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	4951      	ldr	r1, [pc, #324]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b6:	4b4c      	ldr	r3, [pc, #304]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	4948      	ldr	r1, [pc, #288]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d015      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045d8:	4b43      	ldr	r3, [pc, #268]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	4940      	ldr	r1, [pc, #256]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f6:	d105      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f8:	4b3b      	ldr	r3, [pc, #236]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a3a      	ldr	r2, [pc, #232]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004602:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004610:	4b35      	ldr	r3, [pc, #212]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461e:	4932      	ldr	r1, [pc, #200]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800462e:	d105      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004630:	4b2d      	ldr	r3, [pc, #180]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a2c      	ldr	r2, [pc, #176]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800463a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004648:	4b27      	ldr	r3, [pc, #156]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004656:	4924      	ldr	r1, [pc, #144]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004666:	d105      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004668:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a1e      	ldr	r2, [pc, #120]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004672:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d015      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	4916      	ldr	r1, [pc, #88]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800469e:	d105      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a0:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a10      	ldr	r2, [pc, #64]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d019      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	4908      	ldr	r1, [pc, #32]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d6:	d109      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a02      	ldr	r2, [pc, #8]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e2:	60d3      	str	r3, [r2, #12]
 80046e4:	e002      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046f8:	4b29      	ldr	r3, [pc, #164]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	4926      	ldr	r1, [pc, #152]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004716:	d105      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004718:	4b21      	ldr	r3, [pc, #132]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a20      	ldr	r2, [pc, #128]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004722:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004730:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473e:	4918      	ldr	r1, [pc, #96]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474e:	d105      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004750:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a12      	ldr	r2, [pc, #72]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004768:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800476a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800476e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004776:	490a      	ldr	r1, [pc, #40]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004786:	d105      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004794:	7cbb      	ldrb	r3, [r7, #18]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000

080047a4 <memset>:
 80047a4:	4402      	add	r2, r0
 80047a6:	4603      	mov	r3, r0
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d100      	bne.n	80047ae <memset+0xa>
 80047ac:	4770      	bx	lr
 80047ae:	f803 1b01 	strb.w	r1, [r3], #1
 80047b2:	e7f9      	b.n	80047a8 <memset+0x4>

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4d0d      	ldr	r5, [pc, #52]	@ (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	@ (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2600      	movs	r6, #0
 80047c0:	42a6      	cmp	r6, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4d0b      	ldr	r5, [pc, #44]	@ (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	@ (80047f8 <__libc_init_array+0x44>)
 80047c8:	f000 f818 	bl	80047fc <_init>
 80047cc:	1b64      	subs	r4, r4, r5
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2600      	movs	r6, #0
 80047d2:	42a6      	cmp	r6, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047dc:	4798      	blx	r3
 80047de:	3601      	adds	r6, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e6:	4798      	blx	r3
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	08004834 	.word	0x08004834
 80047f0:	08004834 	.word	0x08004834
 80047f4:	08004834 	.word	0x08004834
 80047f8:	08004838 	.word	0x08004838

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
